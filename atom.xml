<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>life-extension&#39;s blogs</title>
  
  <subtitle>chaser of light</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://life-extension.github.io/"/>
  <updated>2020-06-08T00:37:09.178Z</updated>
  <id>https://life-extension.github.io/</id>
  
  <author>
    <name>痛并快乐着</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ACTF2020密码学部分writeup</title>
    <link href="https://life-extension.github.io/2020/06/05/ACTF2020%E5%AF%86%E7%A0%81%E5%AD%A6%E9%83%A8%E5%88%86writeup/"/>
    <id>https://life-extension.github.io/2020/06/05/ACTF2020%E5%AF%86%E7%A0%81%E5%AD%A6%E9%83%A8%E5%88%86writeup/</id>
    <published>2020-06-05T11:33:52.000Z</published>
    <updated>2020-06-08T00:37:09.178Z</updated>
    
    <content type="html"><![CDATA[<p>编写的项目文件请参考<a href="https://github.com/CSUAuroraLab/ACTF2020/tree/master/Crypto" target="_blank" rel="noopener">项目链接</a>。</p><p>为了保护服务器的同时不给选手带来更多困难，密码学部分的交互题开了pow算力检测，我也提供了相应的pow算力运算解决样例，大家下载即可。</p><h4><span id="入门题">入门题</span></h4><h5><span id="column-permutation-cipher">Column Permutation Cipher：</span></h5><p>简单的矩阵换位密码，首先统计字段长度为625，由于题目中告诉我们是m*n矩阵换位，所以m,n的可能值是(5,125),(25,25),(125,5)，然后爆破即可，示例脚本: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding=UTF-8 -*-</span></span><br><span class="line">possiblelen=[<span class="number">5</span>,<span class="number">25</span>,<span class="number">125</span>]</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> possiblelen:</span><br><span class="line">    plaintext=<span class="string">""</span></span><br><span class="line">    line=<span class="number">625</span>//k</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(line):</span><br><span class="line">            plaintext+=cipher[j*k+i]</span><br><span class="line">    print(plaintext)</span><br></pre></td></tr></table></figure><h5><span id="我的密码本">我的密码本:</span></h5><p>统计英文文本中每个字符的出现频率，并查找概率表进行对比。当然其中需要用到一些英文知识，一般这种题目语义都是连贯的，一定要注意最后解出来的明文语义上是否通顺。</p><p><img src="/2020/06/05/ACTF2020%E5%AF%86%E7%A0%81%E5%AD%A6%E9%83%A8%E5%88%86writeup/image-20200529003238548.png" alt="image-20200529003238548"></p><p>如果你统计好词频并确定了明文-密文对以后，即可还原出原文。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">code_book=<span class="string">"ㅡ贰ㅒㄱёㄴ伍ㅊあムг肆ンㅇэ叁йΣωθξ壹ㅣのл￥"</span></span><br><span class="line">plaintext=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(len(cipher)):</span><br><span class="line">    flag=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(code_book)):</span><br><span class="line">        <span class="keyword">if</span>(cipher[j]==code_book[i]):</span><br><span class="line">            plaintext+=str(chr(<span class="number">0x61</span>+i))</span><br><span class="line">            flag=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="number">0</span>):</span><br><span class="line">        plaintext+=cipher[j]</span><br><span class="line">print(plaintext)</span><br></pre></td></tr></table></figure><h4><span id="简单题">简单题</span></h4><h5><span id="bomb-or-boom">bomb or boom：</span></h5><p>题目给出了5个压缩包文件和一个密码本，并告知我们5个压缩包只要破解4个就行。所以应该涉及到门限方案，这里虽然没有题目名，但是hint中给出来了，用的是bloom门限。这是一个（4,5）门限，消息被5个随机模数求模，得到a<sub>i</sub>和m<sub>i</sub>。并被封装在五个压缩包中。</p><p>压缩包的密码被一些编码方式加密了，想了解这些编码方式请看<a href="https://www.cnblogs.com/mq0036/p/6544055.html" target="_blank" rel="noopener">这里</a>。</p><p>下面稍微解释一下这些有趣的编码，第一个是培根，第二个盲文，第三个用的是千千秀字的文本转音符（大可搜索一下，如何把文本加密为音符，仅此一家，ps.看着音符的样子难道不好看嘛），第四个是aaencode（学过web应该都知道的吧），第五个是brainfuck，参考一下资料即可。</p><p>然后用门限方案的脚本直接跑，就可以辽：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">re</span><span class="params">(w1,m1)</span>:</span><span class="comment">#乘法逆</span></span><br><span class="line">t1=w1</span><br><span class="line">t2=m1</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line">s=[]</span><br><span class="line"><span class="keyword">while</span>(t1):</span><br><span class="line">y=t2%t1</span><br><span class="line">s.append(int(t2//t1))</span><br><span class="line">t2=t1</span><br><span class="line">t1=y</span><br><span class="line">re1= <span class="number">0</span></span><br><span class="line">re2= <span class="number">1</span></span><br><span class="line">i=len(s)<span class="number">-2</span></span><br><span class="line"><span class="keyword">while</span>(i&gt;=<span class="number">0</span>):</span><br><span class="line">t=re2</span><br><span class="line">re2=re1*<span class="number">1</span>-re2*s[i]</span><br><span class="line">re1=t</span><br><span class="line">i-=<span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> re2</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debloom</span><span class="params">(k)</span>:</span></span><br><span class="line">    x=[]</span><br><span class="line">    m=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,k):</span><br><span class="line">        print(<span class="string">"inputs x"</span>+str(i+<span class="number">1</span>)+<span class="string">" and m"</span>+str(i+<span class="number">1</span>)+<span class="string">":"</span>)</span><br><span class="line">        x.append(int(input()))</span><br><span class="line">        m.append(int(input()))</span><br><span class="line">    Mn=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,k):</span><br><span class="line">        Mn=Mn*m[i]</span><br><span class="line"></span><br><span class="line">    w=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,k):</span><br><span class="line">        w.append(int(Mn//m[i]))</span><br><span class="line">    t=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,k):</span><br><span class="line">        t.append(re(w[i],m[i]))</span><br><span class="line">    result=<span class="number">0</span><span class="comment">#初始化</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,k):</span><br><span class="line">        result+=(w[i]*t[i]*x[i])</span><br><span class="line">    result=result%Mn</span><br><span class="line">    print(long_to_bytes(result))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"input bloom k:"</span>)</span><br><span class="line">k=int(input())</span><br><span class="line">debloom(k)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/2020/06/05/ACTF2020%E5%AF%86%E7%A0%81%E5%AD%A6%E9%83%A8%E5%88%86writeup/%E8%A7%A3%E5%AF%86%E5%9B%BE%E7%89%87.png" alt="解密图片"></p><h5><span id="naive-encryption">naive encryption:</span></h5><p>一道改装后的仿射密码题，只不过采用了不同的a,b进行了更多的轮加密，所以说这道题目更像是算法逆向。关键知识是乘法逆。解题脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inv</span><span class="params">(u,v)</span>:</span></span><br><span class="line">    u3,v3=u,v</span><br><span class="line">    u1,v1=<span class="number">1</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> v3&gt;<span class="number">0</span>:</span><br><span class="line">        q=u3//v3</span><br><span class="line">        u1,v1=v1,u1-v1*q</span><br><span class="line">        u3,v3=v3,u3-v3*q</span><br><span class="line">    <span class="keyword">while</span> u1&lt;<span class="number">0</span>:</span><br><span class="line">        u1=u1+v</span><br><span class="line">    <span class="keyword">return</span> u1</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">k=[<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">37</span>,</span><br><span class="line">    <span class="number">41</span>,<span class="number">43</span>,<span class="number">47</span>,<span class="number">53</span>,<span class="number">59</span>,<span class="number">61</span>,<span class="number">67</span>,<span class="number">71</span>,<span class="number">73</span>,<span class="number">79</span>,</span><br><span class="line">    <span class="number">83</span>,<span class="number">89</span>,<span class="number">97</span>,<span class="number">101</span>,<span class="number">103</span>,<span class="number">107</span>,<span class="number">109</span>,<span class="number">113</span>,</span><br><span class="line">    <span class="number">127</span>,<span class="number">131</span>,<span class="number">137</span>,<span class="number">139</span>,<span class="number">149</span>,<span class="number">151</span>,<span class="number">157</span>,</span><br><span class="line">    <span class="number">163</span>,<span class="number">167</span>,<span class="number">173</span>,<span class="number">179</span>,<span class="number">181</span>,<span class="number">191</span>,<span class="number">193</span>,</span><br><span class="line">    <span class="number">197</span>,<span class="number">199</span>,<span class="number">211</span>,<span class="number">223</span>,<span class="number">227</span>,<span class="number">229</span>,<span class="number">233</span>,</span><br><span class="line">    <span class="number">239</span>,<span class="number">241</span>,<span class="number">251</span>]</span><br><span class="line">n=<span class="number">1000</span></span><br><span class="line">len_k=len(k)</span><br><span class="line">cipher=[<span class="number">71</span>, <span class="number">37</span>, <span class="number">4</span>, <span class="number">242</span>, <span class="number">109</span>, <span class="number">227</span>, <span class="number">22</span>, <span class="number">207</span>, <span class="number">36</span>, <span class="number">5</span>, <span class="number">39</span>, <span class="number">87</span>, <span class="number">22</span>, <span class="number">155</span>, <span class="number">19</span>, <span class="number">5</span>, <span class="number">19</span>, <span class="number">36</span>, <span class="number">155</span>, <span class="number">36</span>, <span class="number">224</span>, <span class="number">2</span>, <span class="number">104</span>, <span class="number">155</span>, <span class="number">39</span>, <span class="number">2</span>, <span class="number">19</span>, <span class="number">241</span>, <span class="number">155</span>, <span class="number">70</span>, <span class="number">210</span>, <span class="number">241</span>, <span class="number">53</span>, <span class="number">5</span>, <span class="number">19</span>, <span class="number">39</span>, <span class="number">22</span>, <span class="number">70</span>, <span class="number">22</span>, <span class="number">210</span>, <span class="number">70</span>, <span class="number">75</span>]</span><br><span class="line"></span><br><span class="line">flag=<span class="number">0</span></span><br><span class="line">len_cipher=len(cipher)</span><br><span class="line"><span class="keyword">while</span>(n&gt;<span class="number">0</span>):</span><br><span class="line">    pointer=<span class="number">1001</span>-n</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len_cipher):</span><br><span class="line">        <span class="comment">#cipher[i]=(cipher[i]*k[((pointer+2)%len_k]+k[(pointer*7)%len_k])&amp;0xff</span></span><br><span class="line">        cipher[i]=((cipher[i]-k[(pointer*<span class="number">7</span>)%len_k])*inv(k[(pointer+<span class="number">2</span>)%len_k],<span class="number">0x100</span>))&amp;<span class="number">0xff</span></span><br><span class="line">    n=n<span class="number">-1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len_cipher):</span><br><span class="line">    flag+=cipher[i]</span><br><span class="line">    flag=flag&lt;&lt;<span class="number">8</span></span><br><span class="line">flag=flag&gt;&gt;<span class="number">8</span></span><br><span class="line">print(long_to_bytes(flag))</span><br></pre></td></tr></table></figure><h5><span id="naive-rsa">naive rsa：</span></h5><p>本来这道题目我已经出好推送想送分的，但不料推送还没轮到我，所以没发出来，希望大家多多支持“中南极光网安实验室”的公众号，支持痛并快乐着的作品。</p><p>回到题目，这是一道简单的coppersmith，主要问题出在getPrime函数和给出的p%q上。p是520位素数，q是500位素数，所以p//q就在2<sup>19</sup>到2<sup>21</sup>之间，我们假设p//q=k，p%q=a，那么p=kq+a，那么我们只需要在2<sup>19</sup>到2<sup>21</sup>之间爆破k即可，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> *</span><br><span class="line">a=int(input())</span><br><span class="line">N=int(input())</span><br><span class="line">c=int(input())</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">2</span>**<span class="number">19</span>,<span class="number">2</span>**<span class="number">21</span>):</span><br><span class="line">    <span class="comment">#print(gmpy2.iroot(k*k+4*N, 2)[0])</span></span><br><span class="line">    q = (-a + gmpy2.iroot(a*a+<span class="number">4</span>*k*N, <span class="number">2</span>)[<span class="number">0</span>])//(<span class="number">2</span>*k)</span><br><span class="line">    p = k*q+a</span><br><span class="line">    <span class="comment">#print(k)</span></span><br><span class="line">    <span class="keyword">if</span>(p*q==N):</span><br><span class="line">        <span class="comment">#print (k)</span></span><br><span class="line">        phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">        d = gmpy2.invert(e,phi)</span><br><span class="line">        m = pow(c,d,N)</span><br><span class="line">        <span class="keyword">print</span> (long_to_bytes(m))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h4><span id="中等题">中等题</span></h4><h5><span id="imitation-game">Imitation game：</span></h5><p>由于在密码学实验期间，我发现基本没有同学完成mtp的实验，所以在这里稍微加深了一下mtp以后形成了新的题目。这道题目和一般的mtp的区别就是，这里对密钥进行了类似于CBC的块加密，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(iv,message)</span>:</span></span><br><span class="line">    padding=[iv]   </span><br><span class="line">    cipher=[message[<span class="number">0</span>]^padding[<span class="number">0</span>]]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len_flag):</span><br><span class="line">        <span class="comment">#print(cipher)</span></span><br><span class="line">        padding.append(cipher[i<span class="number">-1</span>]^padding[i<span class="number">-1</span>])</span><br><span class="line">        cipher.append(message[i]^padding[i])</span><br><span class="line">    print(<span class="string">"cipher=&#123;&#125;"</span>.format(cipher))</span><br></pre></td></tr></table></figure><p>但是由于初始iv范围很小，而且它嵌入到了密钥的每一个字节中，所以我们只需要爆破iv就可以得到明文。甚至我们可以知道密钥最后一位是”}”，直接与mtp后得到的密钥异或就知道iv值了。然后整个密钥每个字节异或iv就得到明文。</p><p>而对于mtp，题目中已经给出，密文都来自于书本原句，即可见字符，那么我们只需要通过限定课件字符的范围就可以排除很多无关答案。这里推荐python的mtp包，效果很棒，运行截图如下：</p><p><img src="/2020/06/05/ACTF2020%E5%AF%86%E7%A0%81%E5%AD%A6%E9%83%A8%E5%88%86writeup/%E6%A0%B7%E4%BE%8B-%E5%BE%97%E5%88%B0%E7%9A%84key%E6%AF%8F%E4%B8%80%E4%BD%8D%E5%BC%82%E6%88%960xab%E5%8D%B3%E5%8F%AF.png" alt="样例-得到的key每一位异或0xab即可"></p><p>得到的key不是最后的key，但是0xd6^b’}’=0xab，所以对每一位异或0xab即可得到明文。</p><h5><span id="naive-aes">naive aes：</span></h5><p>又是一道算法逆向题，但是这里主要考察的是S盒和P盒的逆向。</p><p>from： <a href="https://ctftime.org/task/9330" target="_blank" rel="noopener">nactf——Super Duper AES</a></p><p>writeup: <a href="https://seymour.hackstreetboys.ph/chals/ctf/2019_NACTF/crypto/5_Super_Duper_AES.html" target="_blank" rel="noopener">detail link</a></p><p>all you need is to:</p><p>1.Reverse the <strong>permute()</strong> function.</p><p>2.Reverse the <strong>substitute()</strong> function.</p><p>3.Put everything together and run the script.</p><p>Isn’t it easy?</p><h5><span id="tiny_prng0">tiny_PRNG0:</span></h5><p>出题人：<a href="csuwangj.github.io">DJ</a></p><p>出题人只给了我脚本，不过mt19937伪随机数预测最近的CTF题目很多，大家可以参考这个<a href="https://blog.wuhao13.xin/1245.html" target="_blank" rel="noopener">博客</a>。</p><p>基本思想：根据输出的随机数逆向extract_number对应的状态，实际上只需要前624个随机数恢复前624个state，就可以预测此后生成的随机数。 脚本：</p><p>1.mt19937.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inv_right_shift</span><span class="params">(v, b, m)</span>:</span></span><br><span class="line">    <span class="string">'</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; from cryptonita.attacks.prng import inv_right_shift</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; y, b, m = 524889969, 11, 0x010101</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; v = y ^ ((y &gt;&gt; b) &amp; m)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; inv_right_shift(v, b, m)</span></span><br><span class="line"><span class="string">        524889969</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; y, b, m = 0xffffffff, 4, 0xffffffff</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; v = y ^ ((y &gt;&gt; b) &amp; m)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; inv_right_shift(v, b, m)</span></span><br><span class="line"><span class="string">        4294967295</span></span><br><span class="line"><span class="string">    '</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">0</span> &lt; b &lt; <span class="number">32</span></span><br><span class="line"></span><br><span class="line">    g = <span class="number">0</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">32</span>:</span><br><span class="line">        g = v ^ ((g &gt;&gt; b) &amp; m)</span><br><span class="line">        i += b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> g</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inv_left_shift</span><span class="params">(v, b, m)</span>:</span></span><br><span class="line">    <span class="string">'</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; from cryptonita.attacks.prng import inv_left_shift</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; y, b, m = 524889969, 3, 0x010101</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; v = y ^ ((y &lt;&lt; b) &amp; m)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; inv_left_shift(v, b, m)</span></span><br><span class="line"><span class="string">        524889969</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; y, b, m = 0xffffffff, 4, 0xffffffff</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; v = y ^ ((y &lt;&lt; b) &amp; m)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; inv_left_shift(v, b, m)</span></span><br><span class="line"><span class="string">        4294967295</span></span><br><span class="line"><span class="string">    '</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">0</span> &lt; b &lt; <span class="number">32</span></span><br><span class="line"></span><br><span class="line">    g = <span class="number">0</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">32</span>:</span><br><span class="line">        g = v ^ ((g &lt;&lt; b) &amp; m)</span><br><span class="line">        i += b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> g</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clone_mt19937</span><span class="params">(out)</span>:</span></span><br><span class="line">    <span class="string">'   Clone the internal state of a Mersenne Twister 19937 (MT19937)</span></span><br><span class="line"><span class="string">        from its output &lt;out&gt;.</span></span><br><span class="line"><span class="string">        For MT19937 we need 624 sequential bytes at minimum to clone</span></span><br><span class="line"><span class="string">        the state.</span></span><br><span class="line"><span class="string">            &gt;&gt;&gt; from cryptonita.attacks.prng import clone_mt19937</span></span><br><span class="line"><span class="string">            &gt;&gt;&gt; clone_mt19937(B('</span>abc<span class="string">'))           # byexample: +norm-ws</span></span><br><span class="line"><span class="string">            Traceback &lt;...&gt;</span></span><br><span class="line"><span class="string">            ValueError: You need at least 624 bytes to clone the MT19937 PRNG</span></span><br><span class="line"><span class="string">                        but you have only 3.</span></span><br><span class="line"><span class="string">        With 624+n, the first 624 are used to clone the</span></span><br><span class="line"><span class="string">        MT19937'</span>s state <span class="keyword">and</span> the next byte <span class="keyword">is</span> used to validate.</span><br><span class="line">        If the validation fails, <span class="string">"shift to the right one byte"</span>: the first</span><br><span class="line">        byte <span class="keyword">is</span> ignored, the next <span class="number">624</span> bytes are used to re-clone the state</span><br><span class="line">        <span class="keyword">and</span> the next byte <span class="keyword">is</span> used to validate the generator.</span><br><span class="line">        The process continues until one validation success <span class="keyword">or</span> until reach the</span><br><span class="line">        end of the string.</span><br><span class="line">        The last cloned MT19937 cannot be validated.</span><br><span class="line">        Given <span class="number">624</span> bytes only, no validation <span class="keyword">is</span> performed; given <span class="number">624</span>*<span class="number">2</span> bytes,</span><br><span class="line">        it <span class="keyword">is</span> guaranteed that a valid clone can be found.</span><br><span class="line">        <span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    n = 624</span></span><br><span class="line"><span class="string">    if len(out) &lt; n:</span></span><br><span class="line"><span class="string">        raise ValueError(("You need at least %i bytes to clone the MT19937 PRNG" +\</span></span><br><span class="line"><span class="string">                          " but you have only %i.") % (n, len(out)))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    u, d = 11, 0xffffffff</span></span><br><span class="line"><span class="string">    s, b = 7, 0x9d2c5680</span></span><br><span class="line"><span class="string">    t, c = 15, 0xefc60000</span></span><br><span class="line"><span class="string">    l = 18</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    state = []</span></span><br><span class="line"><span class="string">    for y in out:</span></span><br><span class="line"><span class="string">        y = inv_right_shift(y, l, 0xffffffff)    # inv of y ^ ((y &gt;&gt; l) &amp; 0)</span></span><br><span class="line"><span class="string">        y = inv_left_shift(y, t, c)     # inv of y ^ ((y &lt;&lt; t) &amp; c)</span></span><br><span class="line"><span class="string">        y = inv_left_shift(y, s, b)     # inv of y ^ ((y &lt;&lt; s) &amp; b)</span></span><br><span class="line"><span class="string">        y = inv_right_shift(y, u, d)    # inv of y ^ ((y &gt;&gt; u) &amp; d)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        state.append(y)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    found = False</span></span><br><span class="line"><span class="string">    i = 0</span></span><br><span class="line"><span class="string">    g = MT19937(0)</span></span><br><span class="line"><span class="string">    g.reset_state(state[i:i+n], index=n)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    while i+n &lt; len(out):</span></span><br><span class="line"><span class="string">        v = g.extract_number()</span></span><br><span class="line"><span class="string">        found = v == out[i+n]</span></span><br><span class="line"><span class="string">        if found:</span></span><br><span class="line"><span class="string">            g.reset_state(state[i:i+n], index=n)</span></span><br><span class="line"><span class="string">            break</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        i += 1</span></span><br><span class="line"><span class="string">        g.reset_state(state[i:i+n], index=n)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    return g</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># https://en.wikipedia.org/wiki/Mersenne_Twister</span></span><br><span class="line"><span class="string">class MT19937:</span></span><br><span class="line"><span class="string">    def __init__(self, seed):</span></span><br><span class="line"><span class="string">        w, n, m, r = 32, 624, 397, 31</span></span><br><span class="line"><span class="string">        a, f = 0x9908b0df, 1812433253</span></span><br><span class="line"><span class="string">        W = 0xffffffff</span></span><br><span class="line"><span class="string">        u, d = 11, 0xffffffff</span></span><br><span class="line"><span class="string">        s, b = 7, 0x9d2c5680</span></span><br><span class="line"><span class="string">        t, c = 15, 0xefc60000</span></span><br><span class="line"><span class="string">        l = 18</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        # Create a length n array to store the state of the generator</span></span><br><span class="line"><span class="string">        self.MT = MT = [] # n size</span></span><br><span class="line"><span class="string">        self.index = n+1</span></span><br><span class="line"><span class="string">        lower_mask = (1 &lt;&lt; r) - 1</span></span><br><span class="line"><span class="string">        upper_mask = (~lower_mask) &amp; W</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        # Initialize the generator from a seed</span></span><br><span class="line"><span class="string">        index = n</span></span><br><span class="line"><span class="string">        MT.append(seed)</span></span><br><span class="line"><span class="string">        for i in range(1, n):</span></span><br><span class="line"><span class="string">            MT.append((f * (MT[i-1] ^ (MT[i-1] &gt;&gt; (w-2))) + i) &amp; W)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        # Generate the next n values from the series x_i</span></span><br><span class="line"><span class="string">        def twist():</span></span><br><span class="line"><span class="string">            for i in range(n):</span></span><br><span class="line"><span class="string">                 x = (MT[i] &amp; upper_mask) \</span></span><br><span class="line"><span class="string">                           + (MT[(i+1) % n] &amp; lower_mask)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                 xA = x &gt;&gt; 1</span></span><br><span class="line"><span class="string">                 if (x % 2) != 0:  # lowest bit of x is 1</span></span><br><span class="line"><span class="string">                     xA = xA ^ a</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                 MT[i] = MT[(i + m) % n] ^ xA</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            self.index = 0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        # Extract a tempered value based on MT[index]</span></span><br><span class="line"><span class="string">        # calling twist() every n numbers</span></span><br><span class="line"><span class="string">        def extract_number():</span></span><br><span class="line"><span class="string">            while 1:</span></span><br><span class="line"><span class="string">                if self.index &gt;= n:</span></span><br><span class="line"><span class="string">                    twist()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                y = MT[self.index]</span></span><br><span class="line"><span class="string">                y = y ^ ((y &gt;&gt; u) &amp; d)</span></span><br><span class="line"><span class="string">                y = y ^ ((y &lt;&lt; s) &amp; b)</span></span><br><span class="line"><span class="string">                y = y ^ ((y &lt;&lt; t) &amp; c)</span></span><br><span class="line"><span class="string">                y = y ^ (y &gt;&gt; l)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                self.index += 1</span></span><br><span class="line"><span class="string">                yield y &amp; W</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        self.extract_number = extract_number</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def reset_state(self, MT, index=0):</span></span><br><span class="line"><span class="string">        assert len(MT) == len(self.MT)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        self.index = index</span></span><br><span class="line"><span class="string">        if not (0 &lt;= self.index &lt;= len(MT)):</span></span><br><span class="line"><span class="string">            raise IndexError("Setting index=%i is out of range" \</span></span><br><span class="line"><span class="string">                    % (self.index))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        self.MT[:] = MT</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def __iter__(self):</span></span><br><span class="line"><span class="string">        return self.extract_number()</span></span><br></pre></td></tr></table></figure><p>2.exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> mt19937 <span class="keyword">import</span> clone_mt19937</span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> (</span><br><span class="line">    process,</span><br><span class="line">    remote,</span><br><span class="line">    log,</span><br><span class="line">    <span class="comment"># context</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># context.log_level = "DEBUG"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_output</span><span class="params">(io, size)</span>:</span></span><br><span class="line">    output = []</span><br><span class="line">    <span class="keyword">with</span> tqdm(total=size) <span class="keyword">as</span> bar:</span><br><span class="line">        <span class="keyword">while</span> len(output) &lt; size:</span><br><span class="line">            io.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">            line = io.recvline().decode(<span class="string">"utf-8"</span>)</span><br><span class="line">            output += list(map(int, line.strip().split(<span class="string">" "</span>)))</span><br><span class="line">            bar.update(<span class="number">10</span>)</span><br><span class="line">    bar.close()</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(argv) == <span class="number">1</span>:</span><br><span class="line">        io = process(<span class="string">"./a.out"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(argv[<span class="number">1</span>], int(argv[<span class="number">2</span>]))</span><br><span class="line">    log.info(<span class="string">"get output from mt19937"</span>)</span><br><span class="line">    out = get_output(io, <span class="number">640</span>)</span><br><span class="line">    log.info(<span class="string">"clone mt19937 from output"</span>)</span><br><span class="line">    new_iter = iter(clone_mt19937(out))</span><br><span class="line">    io.sendline(<span class="string">"2"</span>)</span><br><span class="line">    log.info(<span class="string">"send answer"</span>)</span><br><span class="line">    io.sendline(str(next(new_iter)))</span><br><span class="line">    s = str(io.recvuntil(<span class="string">"4) "</span>))</span><br><span class="line">    s = str(io.recvuntil(<span class="string">"4) "</span>))</span><br><span class="line">    log.success(re.search(<span class="string">"ACTF&#123;.*&#125;"</span>, s).group(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4><span id="难题">难题</span></h4><h5><span id="dlp头号玩家">DLP头号玩家：</span></h5><p>这道题主要是想考察离散对数问题，设计的考点有：如何计算离散对数，ElGamal算法，ecc算法。</p><p>level1:计算离散对数</p><p>采用大步小步法即可。</p><p>level2：ElGamal算法</p><p>首先，这里的密钥是两个字节的（见下面代码），可以直接考虑爆破：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d=bytes_to_long(message[<span class="number">0</span>:<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>然后根据密钥进行ElGamal算法解密即可。</p><p>level3：ECC算法</p><p>先回顾一下ECC算法</p><p><img src="/2020/06/05/ACTF2020%E5%AF%86%E7%A0%81%E5%AD%A6%E9%83%A8%E5%88%86writeup/1.png" alt="1"></p><p>这里我在具体代码中做了一些手脚，令k=100,d=100，把100当成常量嵌入到了kG的运算中，所以其实解密的时候只需要代入d=100,k=100即可。</p><p>解题脚本示例如下(省略交互)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> ceil,sqrt</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ecc <span class="keyword">import</span> get_inverse,get_gcd,get_np,get_ng</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bsgs</span><span class="params">(g, y, p)</span>:</span></span><br><span class="line">    res = []</span><br><span class="line">    m = int(ceil(sqrt(p - <span class="number">1</span>)))</span><br><span class="line">    S = &#123;pow(g, j, p):j <span class="keyword">for</span> j <span class="keyword">in</span> range(m)&#125;</span><br><span class="line">    gs = pow(g, p - <span class="number">1</span> - m, p)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">        <span class="keyword">if</span> y <span class="keyword">in</span> S:</span><br><span class="line">            res.append(i * m + S[y])</span><br><span class="line">        y = y * gs % p</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_inverse</span><span class="params">(u,v)</span>:</span></span><br><span class="line">    u3,v3=u,v</span><br><span class="line">    u1,v1=<span class="number">1</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> v3&gt;<span class="number">0</span>:</span><br><span class="line">        q=u3//v3</span><br><span class="line">        u1,v1=v1,u1-v1*q</span><br><span class="line">        u3,v3=v3,u3-v3*q</span><br><span class="line">    <span class="keyword">while</span> u1&lt;<span class="number">0</span>:</span><br><span class="line">        u1=u1+v</span><br><span class="line">    <span class="keyword">return</span> u1</span><br><span class="line"></span><br><span class="line"><span class="comment">#level1</span></span><br><span class="line">p=<span class="number">5391644857</span></span><br><span class="line">g=<span class="number">2</span></span><br><span class="line">c1=[<span class="number">4908063849</span>,<span class="number">1283736637</span>,<span class="number">4385640372</span>,<span class="number">428852363</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(c1)):</span><br><span class="line">    inp=c1[i]</span><br><span class="line">    c=int(inp)</span><br><span class="line">    res=bsgs(g,c,p)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">        print(long_to_bytes(i))</span><br><span class="line"></span><br><span class="line"><span class="comment">#level2</span></span><br><span class="line">e,g,p=(<span class="number">2685568775701283525351462610033561666387306287538522499134808519515971408889570947875407095838440735098786110848850070468375238474921045086123009358906</span>,</span><br><span class="line">       <span class="number">2</span>,</span><br><span class="line">       <span class="number">3108147961599785276150798080269087679501293709501455568774725039866085754219397531303169017523045103124751042601841840328290404343235853405579539233773</span>)</span><br><span class="line">a,b=(<span class="number">1968486588460454870108621075441203470309302694739442500606039058477890260262954690597523764122825500774397066089804125306327432806567312924827814647950</span>,</span><br><span class="line">     <span class="number">1024812622664084668424411594448713407303536660751692688061972897584163822765150299422248209733371319297760175591974882337903320853550670045641950256872</span>)</span><br><span class="line">       </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>**<span class="number">16</span>):</span><br><span class="line">    <span class="keyword">if</span>(pow(g,i,p)==e):</span><br><span class="line">        print(long_to_bytes(i))</span><br><span class="line">        d=i</span><br><span class="line">inv=get_inverse(a,p)</span><br><span class="line">m2=(b*pow(inv,d,p))%p</span><br><span class="line">print(long_to_bytes(m2))</span><br><span class="line"></span><br><span class="line"><span class="comment">#level3</span></span><br><span class="line">cipher=[[<span class="number">414</span>,<span class="number">131</span>,<span class="number">27744</span>],</span><br><span class="line">        [<span class="number">249</span>,<span class="number">291</span>,<span class="number">27612</span>],</span><br><span class="line">        [<span class="number">26</span>,<span class="number">255</span>,<span class="number">26656</span>],</span><br><span class="line">        [<span class="number">452</span>,<span class="number">278</span>,<span class="number">31968</span>],</span><br><span class="line">        [<span class="number">78</span>,<span class="number">308</span>,<span class="number">17034</span>],</span><br><span class="line">        [<span class="number">319</span>,<span class="number">33</span>,<span class="number">15400</span>],</span><br><span class="line">        [<span class="number">598</span>,<span class="number">457</span>,<span class="number">51200</span>],</span><br><span class="line">        [<span class="number">310</span>,<span class="number">478</span>,<span class="number">2695</span>],</span><br><span class="line">        [<span class="number">307</span>,<span class="number">739</span>,<span class="number">5500</span>],</span><br><span class="line">        [<span class="number">397</span>,<span class="number">455</span>,<span class="number">89500</span>]</span><br><span class="line">        ]</span><br><span class="line">p=<span class="number">769</span></span><br><span class="line">a=<span class="number">23</span></span><br><span class="line">b=<span class="number">711</span></span><br><span class="line"></span><br><span class="line">key=<span class="number">100</span></span><br><span class="line">k=<span class="number">100</span></span><br><span class="line"><span class="keyword">for</span> ci <span class="keyword">in</span> cipher:</span><br><span class="line">    kG=[<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">    kG[<span class="number">0</span>],kG[<span class="number">1</span>]=get_ng(ci[<span class="number">0</span>], ci[<span class="number">1</span>] , k, a, p) </span><br><span class="line">    decrypto_text_x,decrypto_text_y = get_ng(kG[<span class="number">0</span>], kG[<span class="number">1</span>] , key, a, p)</span><br><span class="line">    print(chr(ci[<span class="number">2</span>]//decrypto_text_x),end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure><h5><span id="tiny_prng1">tiny_PRNG1：</span></h5><p>出题人：<a href="csuwangj.github.io">DJ</a></p><p>主要是对xoroshiro128plus随机数发生器，<a href="https://github.com/lemire/crackingxoroshiro128plus/blob/master/xoroshiftall.py" target="_blank" rel="noopener">参考资料</a></p><p>需要对next函数进行逆向，然后用z3求解种子。</p><p>直接放解题脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys, z3</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> (</span><br><span class="line">    process,</span><br><span class="line">    remote,</span><br><span class="line">    log,</span><br><span class="line">    <span class="comment"># context</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="comment"># context.log_level = "DEBUG"</span></span><br><span class="line">bit64 = <span class="number">0xffffffffffffffff</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">LShL</span><span class="params">(x, n)</span>:</span> <span class="keyword">return</span> (x &lt;&lt; n) &amp; bit64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xo128</span><span class="params">(x, y, LShR = lambda x,i: x&gt;&gt;i)</span>:</span></span><br><span class="line">    y ^= x</span><br><span class="line">    <span class="keyword">return</span> y ^ LShL(y, <span class="number">14</span>) ^ (LShL(x,<span class="number">55</span>)|LShR(x,<span class="number">9</span>)), (LShL(y,<span class="number">36</span>)|LShR(y,<span class="number">28</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_output</span><span class="params">(io, size)</span>:</span></span><br><span class="line">    output = []</span><br><span class="line">    <span class="keyword">with</span> tqdm(total=size) <span class="keyword">as</span> bar:</span><br><span class="line">        <span class="keyword">while</span> len(output) &lt; size:</span><br><span class="line">            io.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">            line = io.recvline().decode(<span class="string">"utf-8"</span>)</span><br><span class="line">            output += list(map(int, line.strip().split(<span class="string">" "</span>)))</span><br><span class="line">            bar.update(<span class="number">10</span>)</span><br><span class="line">    bar.close()</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(argv) == <span class="number">1</span>:</span><br><span class="line">        io = process(<span class="string">"./a.out"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(argv[<span class="number">1</span>], int(argv[<span class="number">2</span>]))</span><br><span class="line">    log.info(<span class="string">"get output"</span>)</span><br><span class="line">    out = get_output(io, <span class="number">10</span>)</span><br><span class="line">    x0, y0 = z3.BitVecs(<span class="string">'x0 y0'</span>, <span class="number">64</span>)</span><br><span class="line">    x, y = x0, y0</span><br><span class="line">    s = z3.SimpleSolver()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> out:</span><br><span class="line">        s.add((x + y) &amp; bit64 == v)</span><br><span class="line">        x, y = xo128(x, y, z3.LShR)</span><br><span class="line">    </span><br><span class="line">    ans = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, sys.maxsize):</span><br><span class="line">        <span class="keyword">if</span> s.check().r != <span class="number">1</span>: <span class="keyword">break</span>  <span class="comment"># quit if failed</span></span><br><span class="line">        soln = s.model()</span><br><span class="line">        x, y = (soln[i].as_long() <span class="keyword">for</span> i <span class="keyword">in</span> (x0,y0))</span><br><span class="line">        ans += [<span class="string">"ACTF&#123;"</span> </span><br><span class="line">            + long_to_bytes(x).decode(<span class="string">"utf-8"</span>)[::<span class="number">-1</span>]</span><br><span class="line">            + long_to_bytes(y).decode(<span class="string">"utf-8"</span>)[::<span class="number">-1</span>]</span><br><span class="line">            + <span class="string">"&#125;"</span>]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            x, y = xo128(x, y)</span><br><span class="line">        s.add( z3.Or(x0 != soln[x0], y0 != soln[y0]) )</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> ans:</span><br><span class="line">        log.info(<span class="string">"possible flag: "</span> + a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;编写的项目文件请参考&lt;a href=&quot;https://github.com/CSUAuroraLab/ACTF2020/tree/master/Crypto&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;项目链接&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;为了保护服务器的同
      
    
    </summary>
    
    
      <category term="project" scheme="https://life-extension.github.io/categories/project/"/>
    
    
      <category term="project" scheme="https://life-extension.github.io/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>GPT技术初探</title>
    <link href="https://life-extension.github.io/2020/05/27/GPT%E6%8A%80%E6%9C%AF%E5%88%9D%E6%8E%A2/"/>
    <id>https://life-extension.github.io/2020/05/27/GPT%E6%8A%80%E6%9C%AF%E5%88%9D%E6%8E%A2/</id>
    <published>2020-05-27T09:26:53.000Z</published>
    <updated>2020-05-28T03:49:13.888Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="第一部分-引入">第一部分 引入</span></h3><h4><span id="1概念">1.概念</span></h4><p>GPT：Generative Pre-Training 生成式的预训练、</p><h4><span id="2工作机制">2.工作机制</span></h4><p>GPT也采用两阶段过程，第 一个阶段是利用语言模型进行预训练，第二阶段通过 Fine-tuning的模式解决下游任务。</p><h4><span id="3gpt系列发布者">3.GPT系列发布者</span></h4><p>openai  说明文章请见 <a href="https://openai.com/blog/language-unsupervised/" target="_blank" rel="noopener">GPT</a> <a href="https://openai.com/blog/better-language-models/#sample1" target="_blank" rel="noopener">GPT2</a></p><h3><span id="第二部分-gpt论文">第二部分 GPT论文</span></h3><p><a href="language_understanding_paper.pdf">原文链接</a></p><h4><span id="1摘要">1.摘要</span></h4><h5><span id="1背景">（1）背景</span></h5><p> 大多数深度学习方法都需要大量的标注数据，在NLP领域中也是如此，但是标注数据毕竟是稀少的，大部分数据肯定还是非标注数据。</p><p>标注数据<a href="http://www.woshipm.com/pd/856172.html" target="_blank" rel="noopener">参考文章</a> ： 类比机器学习，我们要教他认识一个苹果，你直接给它一张苹果的图片，它是完全不知道这是个啥玩意的。我们得先有苹果的图片，上面标注着“苹果”两个字，然后机器通过学习了大量的图片中的特征，这时候再给机器任意一张苹果的图片，它就能认出来了。 </p><p>那碰到非标注数据该怎么办?<br>一种解决办法就是pre-training。 其实词向量就是一种pre-training技术，通过语言模型将文本转化为数字表示。</p><h5><span id="2方案">（2）方案</span></h5><p>在优化期间使用任务感知输入转换来实现有效的传输，同时要求对模型架构进行最小的更改。</p><p>解释： 论文提出的主要是一种半监督的学习方法：非监督的预训练和监督的fine-tuning。  generative pre-training主要应用于无标记文本，在fine-tuning的时候使用了task-aware的方法，并且使模型的变化最小的前提下获得有效的转化。 </p><h5><span id="3效果">（3）效果</span></h5><p> 模型在常识推理（Stories Cloze Test）上获得8.9％的绝对改善，在问答（RACE）上达到5.7％，在文本蕴涵（MultiNLI）上达到1.5％。 </p><h4><span id="2related-work">2.Related Work</span></h4><h5><span id="1词嵌入及其好处">（1）词嵌入及其好处</span></h5><p>略，详见课件。</p><h5><span id="2无监督学习">（2）无监督学习</span></h5><p>无监督学习是一种特殊的半监督学习，其目标是找到一个好的初始化点，而不是修改监督学习目标。可以使用语言建模目标对神经网络进行预训练，然后在监督下根据目标任务对其进行优化。</p><h5><span id="3辅助训练目标">（3）辅助训练目标</span></h5><p>增加辅助的无监督训练目标是半监督学习的另一种形式。用来来改进语义角色标记。</p><h4><span id="3framework">3.Framework</span></h4><p>OpenAI 的系统分为两阶段，首先研究者以无监督的方式在大型数据集上训练一个 Transformer，使用语言建模作为训练信号，然后在小得多的模型上精调解决具体任务。 </p><p> <img src="https://pic4.zhimg.com/80/v2-e485cfb6b87b4fa65565c704f52f05a7_720w.jpg" alt="img"></p><p>左图：Transfromer进行预训练。</p><p>右图：输入转换，用于对不同任务进行fine-tuning（精确调整）。我们将所有结构化输入转换成标记序列，然后由我们的预训练模型进行处理，然后是linear+softmax层。</p><h5><span id="1第一阶段-非监督预训练">（1）第一阶段： <strong>非监督预训练</strong></span></h5><p>   1）介绍</p><p>模型的一般方法是用语言模型去极大化极大似然函数。 在输入的文本上使用<em>multi-head-self-attention</em>(Bert中也有用到)，之后使用包含位置信息的前馈神经网络，输出的是各个词的概率分布 。 </p><p>   2）特点（和ELMO相比）</p><p>首先，特征抽取器不是用的RNN，而是用的<a href="https://arxiv.org/abs/1706.03762" target="_blank" rel="noopener">Transformer</a>叠加的“自注意力机制” 构成的深度网络）。</p><p>评价：Transformer的特征抽取能力要强于RNN，这个选择是很明智的。</p><p>其次，GPT的预训练虽然仍然是以语言模型作为目标任务， 但是采用的是单向的语言模型。</p><p>“单向”的概念：GPT只采用Context-before（上文）来进行预测。</p><h5><span id="2第二阶段监督微调">（2）第二阶段：监督微调</span></h5><p>   1）介绍</p><p>对前一个阶段训练出来的模型参数进行微调，以适应当前的监督型任务。 假设我们有带标签的数据集<em>C，</em> 经过我们的预训练模型在输入上的迭代之后，获得输出向量 ，然后经过线性层和softmax得到预测标签。  </p><p>左图中</p><p>   2）步骤</p><p>首先，对于下游任务来说，需要把任务的网络结构改成和GPT的网络结构一 样。</p><p>其次，利用第一步预训练好的参数初始化GPT的网络结构，把通过预训练学到的语言学知识引入到任务里来。</p><p>再次，用手头的任务去训练这个网络，对网络参数进行 Fine-tuning，使得这个网络更适合解决手头的问题。</p><h5><span id="3特殊任务的输入变换">（3）特殊任务的输入变换</span></h5><p>对于特定的任务比如文本分类，我们能够直接使用上面的模型，因为文本分类的标签是确定的，正好对应论文的使用场景。由于文中的模型处理的是序列化的文本，对于问答系统或文本蕴含问题就需要手动修改文本格式、问题以及答案。 </p><p>   1）文本蕴含</p><p>用$连接前后两个文本，即前提p和假设h。</p><p>   2）相似度</p><p>由于两个文本内部没有先后顺序，对此我们可以输入两个句子Text1$Text2和Text2$Text1，将结果用element-wise的方式相加起来，再放进线性输出层中。</p><p>   3）问答系统和常识推理</p><p>对于这类问题一般有Context、Question和Answer{a1,a2,…,an},可以组合n个问答对(Context_i,Question_i,$,ai)，获得n个输出，再将其通过linear层后softmax输出。</p><h4><span id="4效果和不足之处">4.效果和不足之处</span></h4><h5><span id="1效果">（1）效果</span></h5><p>GPT的效果是非常令人惊艳的，在12个任务里，9个达到 了最好的效果，有些任务性能提升非常明显。</p><h5><span id="2不足之处">（2）不足之处</span></h5><p>模型训练计算要求大： 以前许多用于NLP任务的方法都从头开始在单个GPU上训练相对较小的模型。我们的预培训步方需要8个GPU上进行1个月。</p><p>通过文本学习世界的局限性和片面性：最近的工作表明，仅通过文本就很难学习某些类型的信息，而其他工作表明，模型可以学习和利用数据分布中的偏差。</p><p>特征概括能力依然不足：尽管我们的方法可以提高各种任务的性能，但是当前的深度学习NLP模型仍然表现出令人惊讶和违反直觉的行为-尤其是在以系统，对抗或分布外的方式进行评估时。</p><p>GPT使用单向语言模型是个不好的选择，它没有把单词的下文融合进来，这限制了其在更多应用场景的效果。比如阅读理解，在做任务的时候是可以允许同时看到上文和下 文一起做决策的，如果预训练时候不把单词的下文嵌入到 Word Embedding中，是很吃亏的，白白丢掉了很多信息。</p><h4><span id="5gpt项目">5.GPT项目</span></h4><p><a href="https://github.com/openai/finetune-transformer-lm" target="_blank" rel="noopener">项目链接</a></p><h3><span id="第三部分-gpt2">第三部分 GPT2</span></h3><p><a href="https://openai.com/blog/better-language-models/#sample1" target="_blank" rel="noopener">openai链接</a></p><h4><span id="1gpt2模型简介">1.GPT2模型简介</span></h4><p>我们的模型称为GPT-2（是GPT的继承者），仅经过训练即可预测40GB的互联网文本中的下一个单词。由于我们担心该技术的恶意应用，因此我们不会发布经过训练的模型。作为负责任公开的一项实验，我们将发布一个供研究人员进行实验的小得多的模型以及一份技术论文。</p><h4><span id="2gpt-2的训练目标">2.GPT-2的训练目标</span></h4><p>GPT-2是基于大型transformer的语言模型，具有15亿个参数，并在<u>非常高质量的</u>数据集上进行了训练800万个网页。根据文本中的所有先前单词，预测下一个单词。数据集的多样性使这个简单的目标包含了跨不同领域的许多任务的自然发生的演示。GPT-2是GPT的直接扩展，具有超过10倍的参数，并接受了超过10倍的数据量训练。</p><h4><span id="3gpt-2的效果">3.GPT-2的效果</span></h4><p>GPT2显示了广泛的功能，包括生成具有空前质量的条件合成文本样本的能力，我们在模型中使用输入来填充模型并让其生成冗长的延续。此外，GPT-2优于其他在特定领域（如Wikipedia，新闻或书籍）上训练的语言模型，而无需使用这些特定于领域的训练数据集。在诸如答疑，阅读理解，总结和翻译之类的语言任务上，GPT-2开始使用原始文本来学习这些任务，而没有使用特定于任务的训练数据。尽管这些下游任务的得分远非最新，但它们表明，只要有足够的（未标记）数据和计算，这些任务就可以从无监督的技术中受益。</p><h5><span id="1答疑">（1）答疑</span></h5><p><img src="/2020/05/27/GPT%E6%8A%80%E6%9C%AF%E5%88%9D%E6%8E%A2/image-20200527165249559.png" alt="image-20200527165249559"></p><h5><span id="2文本填充">（2）文本填充</span></h5><p><img src="/2020/05/27/GPT%E6%8A%80%E6%9C%AF%E5%88%9D%E6%8E%A2/image-20200527165550265.png" alt="image-20200527165550265"></p><h5><span id="3文章内容概括总结">（3）文章内容概括总结</span></h5><p><img src="/2020/05/27/GPT%E6%8A%80%E6%9C%AF%E5%88%9D%E6%8E%A2/image-20200527165902886.png" alt="image-20200527165902886"></p><h5><span id="4翻译">（4）翻译</span></h5><p><img src="/2020/05/27/GPT%E6%8A%80%E6%9C%AF%E5%88%9D%E6%8E%A2/image-20200527165928137.png" alt="image-20200527165928137"></p><h5><span id="5阅读理解">（5）阅读理解</span></h5><p><img src="/2020/05/27/GPT%E6%8A%80%E6%9C%AF%E5%88%9D%E6%8E%A2/image-20200527170248695.png" alt="image-20200527170248695"></p><p><a href="language-models.pdf">4.GPT2论文</a>  </p><p><a href="https://github.com/openai/gpt-2" target="_blank" rel="noopener">5.GPT2项目</a></p><h3><span id="第四部分-特别鸣谢">第四部分 特别鸣谢</span></h3><p><a href="https://openai.com" target="_blank" rel="noopener">openai项目组</a></p><p>李芳芳,中南大学</p><p><a href="https://zhuanlan.zhihu.com/p/52775384" target="_blank" rel="noopener">蔡杰 ,北京大学:论文研读之OpenAI-Generative Pre-Training</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;第一部分-引入&quot;&gt;第一部分 引入&lt;/span&gt;&lt;/h3&gt;&lt;h4&gt;&lt;span id=&quot;1概念&quot;&gt;1.概念&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;GPT：Generative Pre-Training 生成式的预训练、&lt;/p&gt;
&lt;h4&gt;&lt;span id=&quot;2工作机制
      
    
    </summary>
    
    
      <category term="study" scheme="https://life-extension.github.io/categories/study/"/>
    
    
      <category term="study" scheme="https://life-extension.github.io/tags/study/"/>
    
  </entry>
  
  <entry>
    <title>通过python脚本自动插入汇编反调试代码</title>
    <link href="https://life-extension.github.io/2020/05/20/%E9%80%9A%E8%BF%87python%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E6%8F%92%E5%85%A5%E6%B7%B7%E6%B7%86%E4%BB%A3%E7%A0%81%E7%9A%84%E4%B8%80%E7%A7%8D%E5%9F%BA%E6%9C%AC%E7%A4%BA%E4%BE%8B/"/>
    <id>https://life-extension.github.io/2020/05/20/%E9%80%9A%E8%BF%87python%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E6%8F%92%E5%85%A5%E6%B7%B7%E6%B7%86%E4%BB%A3%E7%A0%81%E7%9A%84%E4%B8%80%E7%A7%8D%E5%9F%BA%E6%9C%AC%E7%A4%BA%E4%BE%8B/</id>
    <published>2020-05-20T04:26:01.000Z</published>
    <updated>2020-05-20T04:54:54.475Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="研究背景">研究背景</span></h3><p>在之前OLLVM项目的研究过程中，我们发现反调试技术对反混淆脚本有一定的干扰作用，如果可以在OLLVM的中间代码中自动化插入反调试代码，那么就可以给OLLVM的代码混淆增加一层保障。</p><h3><span id="方案分析">方案分析</span></h3><p>探讨多种方案以后，我认为最适合在汇编代码中进行代码嵌入，原因如下：</p><p>1.首先，在C语言或者LL层的高级语言中，存在比较复杂的括号和分支语句，代码有可能错误的嵌入。</p><p>2.其次，反调试代码主要是以汇编语言为主，所以选择越底层的语言嵌入越好。</p><p>但是在汇编代码中的嵌入依然存在很大的问题：</p><p>1.我们要确定汇编程序的代码段，而且要把函数进行划分，甚至要划分出，在一个基本块或函数之内进行代码嵌入。</p><p>2.汇编代码中存在比较多的分支和跳转，混淆代码的插入可能会破坏原程序流程。</p><p>3.有些混淆代码并不是连续的，而且包含跳转语句，因此嵌入时需要对上下文的语义进行分析。</p><h3><span id="初步脚本">初步脚本</span></h3><p>选择一种最简单的嵌入形式，即假设已经确定需要嵌入的代码段，处理完分支和跳转，而且嵌入的代码是连续的，那么只需要直接完成嵌入工作即可。于是用python写出一个样例脚本模拟OLLVM的工作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#conding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> *;</span><br><span class="line"></span><br><span class="line">code=[<span class="string">"          .byte 0x80 ;auto insert\n"</span>,</span><br><span class="line">      <span class="string">"          int 3 ;auto insert\n"</span>,</span><br><span class="line">      <span class="string">"          rdtsc ;auto insert\n"</span>]</span><br><span class="line"></span><br><span class="line">n=int(input(<span class="string">"请输入需要插入的代码段的数量："</span>))</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"Code.asm"</span>,<span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    strr=[]</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">        line=f.readline()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        strr.append(line)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    index=getRandomRange(<span class="number">1</span>,len(strr))</span><br><span class="line">    cindex=getRandomRange(<span class="number">0</span>,<span class="number">3</span>)</span><br><span class="line">    strr.insert(index,code[cindex])</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"output.asm"</span>,<span class="string">"w"</span>) <span class="keyword">as</span> o:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(strr)):</span><br><span class="line">        o.write(strr[i])</span><br></pre></td></tr></table></figure><h3><span id="运行效果">运行效果</span></h3><p>假设有下面这样的汇编文件Code.asm：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">start:</span><br><span class="line">           push ds</span><br><span class="line">           mov ax,0</span><br><span class="line">           push ax</span><br><span class="line">   mov ax,data</span><br><span class="line">           mov ds,ax</span><br><span class="line">           mov es,ax</span><br><span class="line">           cld </span><br><span class="line">           lea di,nametab</span><br><span class="line">a20loop:</span><br><span class="line">   call b10read</span><br><span class="line">           cmp namelen,0</span><br><span class="line">           jz a30</span><br><span class="line">           cmp namectr,30</span><br><span class="line">           je a30</span><br><span class="line">           call d10stor</span><br><span class="line">           jmp  a20loop</span><br><span class="line">a30:</span><br><span class="line">          cmp namectr,1</span><br><span class="line">          jbe a40</span><br><span class="line">        ; call  g10sort</span><br><span class="line">          call  k10disp </span><br><span class="line">a40:</span><br><span class="line">          mov ah,4ch</span><br><span class="line">          Int  21h</span><br><span class="line">b10read  proc  near</span><br><span class="line">          mov  ah,09h</span><br><span class="line">          lea dx ,messg1</span><br><span class="line">          int  21h</span><br><span class="line">          mov ah,0ah</span><br><span class="line">          lea dx,namepar</span><br><span class="line">          int 21h</span><br><span class="line">          mov ah,09h</span><br><span class="line">          lea dx,crlf</span><br><span class="line">          Int  21h</span><br><span class="line">          mov  bx,0</span><br><span class="line">          mov bl ,namelen</span><br><span class="line">          mov cx,21</span><br><span class="line">          sub cx,bx</span><br><span class="line">b20: </span><br><span class="line">          mov namefld[bx],20h</span><br><span class="line">          inc bx</span><br><span class="line">          loop b20</span><br><span class="line">          ret            </span><br><span class="line">d10stor  proc  near</span><br><span class="line">          inc namectr</span><br><span class="line">          cld</span><br><span class="line">          lea si , namefld</span><br><span class="line">          mov cx,10</span><br><span class="line">          rep movsw</span><br><span class="line">          ret</span><br><span class="line">g10sort  proc near</span><br><span class="line">          sub  di ,40</span><br><span class="line">          mov endaddr,di</span><br><span class="line">g20:</span><br><span class="line">          mov swapped,0</span><br><span class="line">          lea  si,nametab</span><br><span class="line">g30:</span><br><span class="line">          mov cx,20</span><br><span class="line">          mov di,si</span><br><span class="line">          add di,20</span><br><span class="line">          add ax,di</span><br><span class="line">          mov ax,di</span><br><span class="line">          mov  bx,si</span><br><span class="line">          repe  cmpsb</span><br><span class="line">          jbe g40</span><br><span class="line">          call h10xchg</span><br><span class="line">g40:      mov si,ax</span><br><span class="line">          cmp swapped,0</span><br><span class="line">          jnz  g20</span><br><span class="line">          ret</span><br><span class="line">h10xchg   proc  near</span><br><span class="line">          mov cx,10</span><br><span class="line">          lea di , namesav</span><br><span class="line">          mov si,bx</span><br><span class="line">          rep  movsw</span><br><span class="line">          mov cx,10</span><br><span class="line">          mov di,bx</span><br><span class="line">          rep movsw</span><br><span class="line">          mov cx ,10</span><br><span class="line">          lea si,namesav</span><br><span class="line">          rep   movsw</span><br><span class="line">          mov swapped,1</span><br><span class="line">          ret</span><br><span class="line">k10disp   proc  near</span><br><span class="line">          mov ah,09</span><br><span class="line">          lea  dx,messg2</span><br><span class="line">          int 21h</span><br><span class="line">          lea  si,nametab</span><br><span class="line">k20:    </span><br><span class="line">          lea di,namesav</span><br><span class="line">          mov cx,10</span><br><span class="line">          rep movsw</span><br><span class="line">          mov ah,09</span><br><span class="line">          lea dx, namesav</span><br><span class="line">          int 21h</span><br><span class="line">          dec namectr</span><br><span class="line">          jnz  k20</span><br><span class="line">          ret</span><br></pre></td></tr></table></figure><p>运行后得到的output.asm如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">start:</span><br><span class="line">           push ds</span><br><span class="line">           mov ax,0</span><br><span class="line">           push ax</span><br><span class="line">   mov ax,data</span><br><span class="line">           mov ds,ax</span><br><span class="line">           mov es,ax</span><br><span class="line">           cld </span><br><span class="line">           lea di,nametab</span><br><span class="line">a20loop:</span><br><span class="line">   call b10read</span><br><span class="line">           cmp namelen,0</span><br><span class="line">           jz a30</span><br><span class="line">           cmp namectr,30</span><br><span class="line">           je a30</span><br><span class="line">           call d10stor</span><br><span class="line">           jmp  a20loop</span><br><span class="line">a30:</span><br><span class="line">          cmp namectr,1</span><br><span class="line">          jbe a40</span><br><span class="line">        ; call  g10sort</span><br><span class="line">          call  k10disp </span><br><span class="line">a40:</span><br><span class="line">          mov ah,4ch</span><br><span class="line">          Int  21h</span><br><span class="line">b10read  proc  near</span><br><span class="line">          mov  ah,09h</span><br><span class="line">          lea dx ,messg1</span><br><span class="line">          int  21h</span><br><span class="line">          mov ah,0ah</span><br><span class="line">          lea dx,namepar</span><br><span class="line">          int 21h</span><br><span class="line">          mov ah,09h</span><br><span class="line">          lea dx,crlf</span><br><span class="line">          Int  21h</span><br><span class="line">          mov  bx,0</span><br><span class="line">          mov bl ,namelen</span><br><span class="line">          int 3 ;auto insert</span><br><span class="line">          mov cx,21</span><br><span class="line">          sub cx,bx</span><br><span class="line">b20: </span><br><span class="line">          rdtsc ;auto insert</span><br><span class="line">          mov namefld[bx],20h</span><br><span class="line">          inc bx</span><br><span class="line">          loop b20</span><br><span class="line">          ret            </span><br><span class="line">          rdtsc ;auto insert</span><br><span class="line">d10stor  proc  near</span><br><span class="line">          inc namectr</span><br><span class="line">          cld</span><br><span class="line">          int 3 ;auto insert</span><br><span class="line">          lea si , namefld</span><br><span class="line">          mov cx,10</span><br><span class="line">          rep movsw</span><br><span class="line">          rdtsc ;auto insert</span><br><span class="line">          ret</span><br><span class="line">g10sort  proc near</span><br><span class="line">          rdtsc ;auto insert</span><br><span class="line">          sub  di ,40</span><br><span class="line">          mov endaddr,di</span><br><span class="line">g20:</span><br><span class="line">          mov swapped,0</span><br><span class="line">          lea  si,nametab</span><br><span class="line">g30:</span><br><span class="line">          mov cx,20</span><br><span class="line">          mov di,si</span><br><span class="line">          int 3 ;auto insert</span><br><span class="line">          add di,20</span><br><span class="line">          .byte 0x80 ;auto insert</span><br><span class="line">          add ax,di</span><br><span class="line">          mov ax,di</span><br><span class="line">          mov  bx,si</span><br><span class="line">          repe  cmpsb</span><br><span class="line">          jbe g40</span><br><span class="line">          call h10xchg</span><br><span class="line">g40:      mov si,ax</span><br><span class="line">          cmp swapped,0</span><br><span class="line">          jnz  g20</span><br><span class="line">          ret</span><br><span class="line">h10xchg   proc  near</span><br><span class="line">          mov cx,10</span><br><span class="line">          lea di , namesav</span><br><span class="line">          mov si,bx</span><br><span class="line">          rep  movsw</span><br><span class="line">          mov cx,10</span><br><span class="line">          mov di,bx</span><br><span class="line">          rep movsw</span><br><span class="line">          mov cx ,10</span><br><span class="line">          lea si,namesav</span><br><span class="line">          rep   movsw</span><br><span class="line">          .byte 0x80 ;auto insert</span><br><span class="line">          mov swapped,1</span><br><span class="line">          ret</span><br><span class="line">k10disp   proc  near</span><br><span class="line">          mov ah,09</span><br><span class="line">          lea  dx,messg2</span><br><span class="line">          int 21h</span><br><span class="line">          lea  si,nametab</span><br><span class="line">k20:    </span><br><span class="line">          int 3 ;auto insert</span><br><span class="line">          lea di,namesav</span><br><span class="line">          mov cx,10</span><br><span class="line">          rep movsw</span><br><span class="line">          mov ah,09</span><br><span class="line">          lea dx, namesav</span><br><span class="line">          int 21h</span><br><span class="line">          dec namectr</span><br><span class="line">          jnz  k20</span><br><span class="line">          ret</span><br></pre></td></tr></table></figure><p>初步实现了嵌入功能。</p><hr><p>2020520 愿所有关心我的人都能被温柔相待，愿世间所有人都能乐观阳光积极向上。特别感谢我的父母一直含辛茹苦地哺育着我，我爱你们。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;研究背景&quot;&gt;研究背景&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;在之前OLLVM项目的研究过程中，我们发现反调试技术对反混淆脚本有一定的干扰作用，如果可以在OLLVM的中间代码中自动化插入反调试代码，那么就可以给OLLVM的代码混淆增加一层保障。&lt;/p&gt;
&lt;h3&gt;&lt;
      
    
    </summary>
    
    
      <category term="project" scheme="https://life-extension.github.io/categories/project/"/>
    
    
      <category term="project" scheme="https://life-extension.github.io/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>答辩顺序抽签小程序</title>
    <link href="https://life-extension.github.io/2020/05/14/%E7%AD%94%E8%BE%A9%E9%A1%BA%E5%BA%8F%E6%8A%BD%E7%AD%BE%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>https://life-extension.github.io/2020/05/14/%E7%AD%94%E8%BE%A9%E9%A1%BA%E5%BA%8F%E6%8A%BD%E7%AD%BE%E5%B0%8F%E7%A8%8B%E5%BA%8F/</id>
    <published>2020-05-14T13:27:21.000Z</published>
    <updated>2020-05-14T14:18:21.222Z</updated>
    
    <content type="html"><![CDATA[<p>最近比较喜欢动手编写小程序和脚本。晚上有同学和我讨论对答辩队伍进行公平抽签的方案，所以打算编写一个很简单的小脚本，并做到尽量减少计算量。</p><h4><span id="脚本思路">脚本思路</span></h4><p>按照一定根据给各个队伍排序，然后初始化抽签序号池，每次随机获取池内的一个值，交给其中一支队伍，被使用的值从抽签序号池扔掉</p><h4><span id="代码">代码</span></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">team=<span class="number">100000</span></span><br><span class="line"></span><br><span class="line">numpool=[]</span><br><span class="line">orderpool=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,team+<span class="number">1</span>):</span><br><span class="line">    numpool.append(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(team):   </span><br><span class="line">    rand=random.randint(<span class="number">0</span>,team<span class="number">-1</span>)</span><br><span class="line">    orderpool.append(numpool[rand])</span><br><span class="line">    <span class="keyword">del</span> numpool[rand]</span><br><span class="line">    team-=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(orderpool)</span><br></pre></td></tr></table></figure><h4><span id="运行效果">运行效果</span></h4><p>可在5s内完成300000支队伍的排序。</p><h4><span id="感想">感想</span></h4><p>从python代码来看，我认为已经做到了最优化。但不知道del函数的实现方式会不会导致一些不必要的耗时。以后有机会当采用C语言来编写。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近比较喜欢动手编写小程序和脚本。晚上有同学和我讨论对答辩队伍进行公平抽签的方案，所以打算编写一个很简单的小脚本，并做到尽量减少计算量。&lt;/p&gt;
&lt;h4&gt;&lt;span id=&quot;脚本思路&quot;&gt;脚本思路&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;按照一定根据给各个队伍排序，然后初始化抽签序号池，
      
    
    </summary>
    
    
    
      <category term="project" scheme="https://life-extension.github.io/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>课堂记录小助手</title>
    <link href="https://life-extension.github.io/2020/05/07/%E8%AF%BE%E5%A0%82%E8%AE%B0%E5%BD%95%E5%B0%8F%E5%8A%A9%E6%89%8B/"/>
    <id>https://life-extension.github.io/2020/05/07/%E8%AF%BE%E5%A0%82%E8%AE%B0%E5%BD%95%E5%B0%8F%E5%8A%A9%E6%89%8B/</id>
    <published>2020-05-07T04:07:06.000Z</published>
    <updated>2020-05-20T03:51:12.755Z</updated>
    
    <content type="html"><![CDATA[<p>作为一名课代表，我需要每天记录同学在QQ群的签到和回答问题情况。开始我是直接把记录复制到word里面手动提取有用的消息，最后我决定解放双手编写一个自动化处理脚本。</p><h4><span id="这个脚本需要一些什么功能呢">这个脚本需要一些什么功能呢？</span></h4><p>1.最基础的，就是从漫长的聊天记录中提取专业，班级，姓名等信息。</p><p>2.然后就是要进行去重操作，要不老师一个个对照打勾会比较困难。</p><h4><span id="如何处理">如何处理？</span></h4><p>1.首先让同学们按照“专业-班级-姓名”的顺序修改好群名片以后，通过观察我发现他们的名片里面都有“170”这个字符串。所以可以提取到发言记录中人名的那一行。</p><p>2.若是发言记录，后面会附上一个10个字符的时间，把这个去掉即可。</p><p>3.对新记录进行存储，输出。若该记录和已有的内容重复则不输出。</p><h4><span id="代码">代码</span></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding=UTF-8-*-</span></span><br><span class="line"></span><br><span class="line">f=open(<span class="string">"record.txt"</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">output=[]</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"170"</span><span class="keyword">in</span> line:</span><br><span class="line">        subline=line[:<span class="number">-10</span>]</span><br><span class="line">        <span class="keyword">if</span>(subline <span class="keyword">not</span> <span class="keyword">in</span> output):</span><br><span class="line">            output.append(subline)</span><br><span class="line">            print(subline)</span><br></pre></td></tr></table></figure><h4><span id="todo">Todo:</span></h4><p>1.如果我能拿到班级名单的话，应该可以通过excel自动化生成到课情况和答疑情况，并进行适当标注。</p><p>2.存在一些错误的识别情况，例如“xxx撤回了一条消息”，“@xxx”。但是这些现象比较罕见，没必要为此提高计算复杂度。所以在最终记录后还需要少量人工处理。</p><h4><span id="519更新">5.19更新</span></h4><p>改进了错误识别情况，成功去掉“xxx撤回了一条消息”的“@xxx”的无效记录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding=UTF-8-*-</span></span><br><span class="line"></span><br><span class="line">f=open(<span class="string">"record.txt"</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">output=[]</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"170"</span><span class="keyword">in</span> line:</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">'@'</span> <span class="keyword">in</span> line):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">'撤回了一条消息'</span> <span class="keyword">in</span> line):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">':'</span> <span class="keyword">in</span> line):</span><br><span class="line">            subline=line[:<span class="number">-10</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            subline=line[:<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">if</span>(subline <span class="keyword">not</span> <span class="keyword">in</span> output):</span><br><span class="line">            output.append(subline)</span><br><span class="line">            print(subline)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为一名课代表，我需要每天记录同学在QQ群的签到和回答问题情况。开始我是直接把记录复制到word里面手动提取有用的消息，最后我决定解放双手编写一个自动化处理脚本。&lt;/p&gt;
&lt;h4&gt;&lt;span id=&quot;这个脚本需要一些什么功能呢&quot;&gt;这个脚本需要一些什么功能呢？&lt;/span&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="project" scheme="https://life-extension.github.io/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>基于门限方案的条形码保密及容错技术</title>
    <link href="https://life-extension.github.io/2020/04/30/%E5%9F%BA%E4%BA%8E%E9%97%A8%E9%99%90%E6%96%B9%E6%A1%88%E7%9A%84%E6%9D%A1%E5%BD%A2%E7%A0%81%E4%BF%9D%E5%AF%86%E5%8F%8A%E5%AE%B9%E9%94%99%E6%8A%80%E6%9C%AF/"/>
    <id>https://life-extension.github.io/2020/04/30/%E5%9F%BA%E4%BA%8E%E9%97%A8%E9%99%90%E6%96%B9%E6%A1%88%E7%9A%84%E6%9D%A1%E5%BD%A2%E7%A0%81%E4%BF%9D%E5%AF%86%E5%8F%8A%E5%AE%B9%E9%94%99%E6%8A%80%E6%9C%AF/</id>
    <published>2020-04-30T15:28:27.000Z</published>
    <updated>2020-05-06T11:07:50.603Z</updated>
    
    <content type="html"><![CDATA[<p>关键词：门限方案，条形码保密，条形码容错，条形码认证与防伪造。</p><p>经历过初期两个小项目的探索，我们项目团队积累了一定的项目研究经验，在老师和16级学长的帮助下，我们把研究方向转到了门限方案的实际应用上。结合市面上用9张合并的条形码提高条形码的容错能力的操作，我们在保留一定的容错能力的基础上提高条形码的安全性，具体而言就是条形码的保密性和容错能力。</p><h3><span id="背景">背景</span></h3><p>依托于信息技术和电子商务的发展，条码技术，作为当今十分流行的一种自动识别与数据采集技术，在商品流通领域被广泛应用。但是在身份识别等应用场景下，传统的条形码不仅易被他人伪造，而且容易导致信息泄露；在恶劣的生产环境中，传统的条形码极有可能因污染损坏导致误读甚至无法识别；此外，常有因传统条形码被覆盖、遮挡或内装物品的安放而造成的条形码弯曲，扫描器无法识别的情况。因此，传统条形码的保密性显得不足，可靠性受到考验。人们急需冗余度高且具有保密能力的条形码，以及在此基础上的自动化扫码系统的大规模使用。</p><h3><span id="主要问题">主要问题</span></h3><p>目前传统的一维条形码的使用范围依然很广。 一维条形码的应用可以提高信息录入的速度，减少差错率，而且标签简单实用易于制作，成本几乎为零。但是一维码的设计从未考虑到保密性和防伪造的问题，以至于所有的消息用手机一扫就明文可见，并且输入同样的明文就可以产生相同的条形码。而且，对于所有条形码而言，冗余度低，破损后无法识别的问题普遍存在。</p><p>同时，几乎所有的条形码都面临一个问题——冗余度为0，破损或污染以后即无法识别。</p><h3><span id="解决方案">解决方案</span></h3><p>针对传统一维条形码中存在的冗余度的问题，一些企业把条码重复拼接，以提高条形码的冗余度。这种做法的确大大的提高了条形码的冗余度和可靠性，值得肯定。但是在条码无一例外的重复的同时，我们是否能做一件手到拈来的事情呢？我们可以通过在重复的条形码中加入一些门限方案以及验证条形码，在保证条码可靠性的基础上，顺势达到保密性和防伪造的作用。</p><p>为解决以上问题，本团队结合 shamir 门限方案与信息隐藏技术，在保障信息安全的基础上提出了基于门限方案的条形码容错与保密技术，旨在解决破损条形码无法扫描识别与传统条形码保密性差、易被伪造等信息安全问题，并且设计制作了一整套生成高保密新型条形码、读码的客户端软件——SaferBar。</p><h3><span id="实现原理">实现原理</span></h3><p>本方案依托操作简易的手机APP——SaferBar，可以根据客户需求将传统条形码转换成不同冗余度的门限条形码，极大地提高了条形码的容错率与保密性。另外，我们在原有明文的基础上拼接条形码的认证密钥，以达到防止伪造的效果。而且，基于图像识别技术，它同时采集处理多个条形码信息，并同时识别含多个子条形码的新型条形码，提高扫码效率，实现传统条形码与新型条形码的无缝衔接，极大程度地提高了条形码的容错率，防止了信息泄露和信息伪造，保障了商品财产及信息安全。具体流程如下：</p><h4><span id="生成认证密钥">生成认证密钥</span></h4><p>APP为每一类商品都设置一个随机生成的认证密钥key，并上传存储在数据库中。通过字符串拼接在原有明文的基础上拼接条形码的认证密钥，以达到防止伪造的效果。解密的时候需要验证key的值是否正确，只有当key值正确时才连接数据库获取商品信息。  </p><h4><span id="编码与加密">编码与加密</span></h4><p>编码环节需要从多方面考虑来确定，如实际的信息量、所选条码的码数限制， 所载信息的可靠性与冗余量的相互取舍关系等。</p><p>在条形码选择上，采用 CODE 39 码。这是一种双向扫描的非定长码，即条形码字符个数不是固定的，编码信息可以是数字也可以是大写英文字母码并自带校验码。条形码由九条不同的排列线条编码而得。基于信息冗余提高数据可靠性的思想，每段条形码的最后一位均附带上此条形码的校验位。</p><p>生成门限条形码时，初始密钥x为原始的条形码编号。子密钥公式为：</p><p>f (x)=m+a<sub>1</sub>x+a<sub>2</sub>x<sub>2</sub>+…+a<sub>k-1</sub>x<sub>k-1</sub> mod p</p><p>以（5,9）型条形码为例：</p><p>由（5,9）门限方案可知要将条形码分割成由九块条形码组成的门限条形码，n=9。<br>扫描时只要扫描出5块完整内容就可能得到完整的数据，即门限值k=5。<br>把编码 x 代入，依次可算出8个门限值yi=f(i),i=1-9；利用条形码换算公式，将 y<sub>1</sub>-y<sub>9</sub> 换算成对应的条形码，形成由九部分组成的门限条形码。如图：</p><p><img src="/2020/04/30/%E5%9F%BA%E4%BA%8E%E9%97%A8%E9%99%90%E6%96%B9%E6%A1%88%E7%9A%84%E6%9D%A1%E5%BD%A2%E7%A0%81%E4%BF%9D%E5%AF%86%E5%8F%8A%E5%AE%B9%E9%94%99%E6%8A%80%E6%9C%AF/image-20200430220542949.png" alt="image-20200430220542949"></p><h4><span id="译码环节">译码环节</span></h4><p>机器扫描门限条形码的过程中，将未被损坏的部分子条形码识别出来，将这些门限值y<sub>i </sub>代入拉格朗日，根据Shamir 的门限秘密共享方案的性质可知，最终一定能得出拼接后的条形码 x，其中包括商品编号以及认证密钥。  </p><h4><span id="服务器验证与商品信息显示">服务器验证与商品信息显示</span></h4><p>在拼接后的条形码中获取认证密钥，发送到后端进行校验。服务器中数据库存储格式如下：</p><p><img src="/2020/04/30/%E5%9F%BA%E4%BA%8E%E9%97%A8%E9%99%90%E6%96%B9%E6%A1%88%E7%9A%84%E6%9D%A1%E5%BD%A2%E7%A0%81%E4%BF%9D%E5%AF%86%E5%8F%8A%E5%AE%B9%E9%94%99%E6%8A%80%E6%9C%AF/image-20200430224443914.png" alt="image-20200430224443914"></p><p>若校验成功，则连接数据库获取商品信息。</p><p><img src="/2020/04/30/%E5%9F%BA%E4%BA%8E%E9%97%A8%E9%99%90%E6%96%B9%E6%A1%88%E7%9A%84%E6%9D%A1%E5%BD%A2%E7%A0%81%E4%BF%9D%E5%AF%86%E5%8F%8A%E5%AE%B9%E9%94%99%E6%8A%80%E6%9C%AF/image-20200430224501556.png" alt="image-20200430224501556"></p><h3><span id="项目的意义">项目的意义</span></h3><p>项目创新性的提出了基于门限方案的条形码保密及容错方案，推出了一款集保密，防伪造，防污损等功能于一体的新型一维条形码。有以下几项重大意义：</p><p>1.解决了一维条形码没有任何保密性和冗余度的现状。</p><p>2.使得一维条形码可以在身份认证等应用场景流通。</p><p>3.只需其中若干子条形码完整,即可可靠识别出原条形码的信息。</p><p>4.可以一次性识别出多条条形码信息,即可一次识别出门限条形码,更加快捷。</p><p>5.推广价值。本方案不仅限于条形码,还可用于其他相似领域,如二维码。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关键词：门限方案，条形码保密，条形码容错，条形码认证与防伪造。&lt;/p&gt;
&lt;p&gt;经历过初期两个小项目的探索，我们项目团队积累了一定的项目研究经验，在老师和16级学长的帮助下，我们把研究方向转到了门限方案的实际应用上。结合市面上用9张合并的条形码提高条形码的容错能力的操作，我们
      
    
    </summary>
    
    
      <category term="project" scheme="https://life-extension.github.io/categories/project/"/>
    
    
      <category term="project" scheme="https://life-extension.github.io/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>2020新年原创脚本-其中的小把戏你清楚吗</title>
    <link href="https://life-extension.github.io/2020/04/26/2020%E6%96%B0%E5%B9%B4%E5%B0%8F%E5%8F%91%E6%98%8E/"/>
    <id>https://life-extension.github.io/2020/04/26/2020%E6%96%B0%E5%B9%B4%E5%B0%8F%E5%8F%91%E6%98%8E/</id>
    <published>2020-04-26T15:35:16.000Z</published>
    <updated>2020-05-20T11:28:35.820Z</updated>
    
    <content type="html"><![CDATA[<p>关键词：随机数素数生成，新年祝福小程序。</p><h3><span id="脚本创作">脚本创作</span></h3><p>这是我在大年三十写的一个程序，当时我正准备去伯克利交流，但由于疫情的缘故，出国变数增大，所以我就打算通过随机数“未卜先知”。以下就是我的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> 成功抵达伯克利<span class="params">()</span>:</span></span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    <span class="keyword">if</span>(p // q &lt; <span class="number">100000</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> 感染新冠肺炎<span class="params">()</span>:</span></span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    <span class="keyword">if</span>(p // q &gt; <span class="number">100000</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> 课程顺利完结<span class="params">()</span>:</span></span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    <span class="keyword">if</span>(p//q &lt; <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> 选择不去伯克利<span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(感染新冠肺炎()==<span class="number">0</span>):</span><br><span class="line">        print(<span class="string">"身体健康"</span>)</span><br><span class="line">        print(<span class="string">"万事如意"</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> 选择去伯克利<span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(成功抵达伯克利()):</span><br><span class="line">        print(<span class="string">"学业有成"</span>)</span><br><span class="line">    <span class="keyword">if</span>(感染新冠肺炎()==<span class="number">0</span>):</span><br><span class="line">        print(<span class="string">"身体健康"</span>)</span><br><span class="line">        <span class="keyword">if</span>(课程顺利完结()):</span><br><span class="line">            print(<span class="string">"万事如意"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> 今年我还能去伯克利吗<span class="params">()</span>:</span>        </span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    <span class="keyword">if</span>(p//q &gt; <span class="number">2</span>):</span><br><span class="line">        选择不去伯克利()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        选择去伯克利()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    今年我还能去伯克利吗()</span><br></pre></td></tr></table></figure><p>运行这个程序，按理说我们通过分支，最终将只有一定的概率能把“身体健康，万事如意，学业有成”三个词都输出，但是实际上的运行结果肯定是这样：</p><p><img src="/2020/04/26/2020%E6%96%B0%E5%B9%B4%E5%B0%8F%E5%8F%91%E6%98%8E/1.png" alt="img"></p><p>大家知道我耍了什么小把戏吗？那就是getPrime函数！</p><h3><span id="getprime函数的特性">getPrime函数的特性</span></h3><p>getPrime函数根据用户输入的需求生成相应位数的随机素数。需要注意的是，这个随机数是有范围的，那就是它的最高位肯定是1。那么如果我们采用的是getPrime(10)的话，得到的数就应该在2<sup>9</sup>~2<sup>10</sup>-1左右。</p><h3><span id="那么脚本用了什么小伎俩">那么脚本用了什么小伎俩？</span></h3><p>在脚本中，我的getPrime函数都是512位的，所以p,q都在2<sup>511</sup><del>2<sup>512</sup>之间。那么p//q就在(0.5</del>2)之间所以p//q&gt;=2或者p//q&lt;=0.5是不可能成立的。因此相关的分支为无效分支。代码最终只会执行今年我还能去伯克利吗-&gt; 选择去伯克利-&gt;成功抵达伯克利-&gt;(not)感染新冠肺炎-&gt;课程顺利完结的路径，最终的输出就是：身体健康，万事如意，学业有成。</p><hr><p>说个题外话，伯克利最终还是没有成行，疫情让我难得的出国游学的机会泡汤了，不过寒假我会再争取一次的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关键词：随机数素数生成，新年祝福小程序。&lt;/p&gt;
&lt;h3&gt;&lt;span id=&quot;脚本创作&quot;&gt;脚本创作&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;这是我在大年三十写的一个程序，当时我正准备去伯克利交流，但由于疫情的缘故，出国变数增大，所以我就打算通过随机数“未卜先知”。以下就是我的脚本：&lt;/
      
    
    </summary>
    
    
      <category term="project" scheme="https://life-extension.github.io/categories/project/"/>
    
    
      <category term="project" scheme="https://life-extension.github.io/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>基于CRT的物流信息安全处理方案</title>
    <link href="https://life-extension.github.io/2020/04/15/%E5%9F%BA%E4%BA%8ECRT%E7%9A%84%E7%89%A9%E6%B5%81%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%84%E7%90%86%E6%96%B9%E6%A1%88/"/>
    <id>https://life-extension.github.io/2020/04/15/%E5%9F%BA%E4%BA%8ECRT%E7%9A%84%E7%89%A9%E6%B5%81%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%A4%84%E7%90%86%E6%96%B9%E6%A1%88/</id>
    <published>2020-04-15T14:38:05.000Z</published>
    <updated>2020-05-06T09:36:00.554Z</updated>
    
    <content type="html"><![CDATA[<p>关键词：中国剩余定理，密钥分发技术，隐私保护。</p><h3><span id="引言">引言</span></h3><p>在2018年11月份的时候，段老师在密码学课上讲到了密钥分发协议，我当时就觉得这个协议很有意思也很有应用前景。后来老师还很主动地分享了一下它的idea，其中一部分就是有关物流单上的信息安全问题的。这个我深有感触，其实每次处理快递的时候，我都会把快递单撕得粉碎，然后倒进垃圾桶。但是物流过程中的信息泄露的确更让人担心。</p><p>老师向我们提出了她的愿景：通过洋葱路由或者密钥分发技术加密快递单上的消息，使得快递在配送的过程中只知道它的上一站和下一站。于是我搭档了两位学习很认真的女同学，打算对基于CRT的物流信息安全处理方案一探究竟。</p><h3><span id="实现过程">实现过程</span></h3><p>基于CRT的理论知识，我们采用二维码技术以及密钥分发技术，提出了一种物流过程信息安全处理方法。这种方法的实施过程如下（设寄件人为p，收件人为q，先后经过快递驿站或快递员A,B,C,D）：</p><ol><li><p><strong>寄件人p通过app填上寄件驿站代号（A）,收件人q的地址、姓名以及app号。</strong></p></li><li><p><strong>app终端立即自动生成快递单号以及最短路径，并分割形成相应密文。</strong></p><pre><code>App根据寄件驿站与目的地，用迪杰斯特拉算法生成最短路径(p-A-B-C-D-q)，并告知q寄件人的相关信息。然后把路径中除了初始驿站的每一个结点分割出来(B/C/D/收件人姓名和地址)，并一次对每一个文件随机产生一次性密钥(Ks1, Ks2, Ks3, Ks4)，并用AES算法进行加密（生成密文c1,c2,c3,c4）</code></pre></li><li><p><strong>同时，生成通过中转站私钥生成随机数R，使该站只能解密其下一个站点的信息。</strong></p><pre><code>若中转站的私钥为（Ka,Kb,Kc,Kd）： （1）A知道下一个地址是B，那么我们可以构造R1使得下列方程组成立:     R1=Ks1(mod Ka)     R1=0(mod Kb)     R1=0(mod Kc)     R1=0(mod Kd) （2）B知道下一个地址是C，那么我们可以构造R2使得下列方程组成立:     R2=0(mod Ka)     R2=Ks2(mod Kb)     R2=0(mod Kc)     R2=0(mod Kd) （3）C知道下一个地址是D，那么我们可以构造R3使得下列方程组成立:     R3=0(mod Ka)     R3=0(mod Kb)     R3=Ks3(mod Kc)     R3=0(mod Kd) （4）D知道下一个地址最终是用户q，那么我们可以构造R4下列方程组成立:     R4=0(mod Ka)     R4=0(mod Kb)     R4=0 (mod Kc)     R4= Ks4(mod Kd)</code></pre></li><li><p><strong>用二维码对所有密文（c1,c2,c3,c4）与随机数(R1,R2,R3,R4)以及快递单号进行封装</strong>。</p></li><li><p><strong>寄件。</strong></p><p>​       p到A驿站寄件时出示快递单号，系统就会自动把二维码打印出来，由工作人员贴在快递上。同时终端删除路径信息，只留下快递单号和收件人的app号。A驿站派件时，只需要扫描一下二维码查看下一个站点，此时终端自动通过快递号给收件人q发送一条“快递已经在A寄出，下一站是B” 的消息。</p></li><li><p><strong>中转。</strong></p><p>​       到达中转站时，分发人员只需要扫描一下二维码，就可以得到该包裹下一站的信息，但是却得不到其他任何信息。同时通过终端给收件人q发送一条“快递已经到达中转站xx（B/C），下一站是xx（C/D）”的信息</p></li><li><p><strong>到达。</strong></p><p>​       到达最后一个中转站D时，由于扫出的信息带有用户姓名，app自动给用户发送一条“请到D驿站取快递，取件码xxx（随机生成）”的消息。</p></li><li><p><strong>接收。</strong></p><p>​       用户取快递时，只需要通过取件码和姓名取快递即可。若为贵重物品，则只需要拿出app通过快递号验证即可。</p></li></ol><h3><span id="优点分析">优点分析</span></h3><p><strong>1.AES算法极大的简化了加密解密的时间，而且安全性也相对较好，资源消耗也较少。</strong></p><p><strong>2.基于CRT的密钥分发协议，简单易实现，而且计算代价为常数阶。</strong></p><p><strong>3.通过加密和密钥分发能充分达到保护用户隐私的要求。</strong><br>       由于通过二维码只可以得知快递单号，其余均是密文，不法分子无法从中得到任何有用的信息，所以用户大可抛弃快递单。<br>       不仅如此，对各中转站而言，他们也无法从中得到任何有用的信息，因为他们只知道快递的下一个中转站。而对于最后一站，他们尽管可以知道用户在app中的ID和姓名，但是没有电话号码，所以作用也不大。<br><strong>4.用户能够了解物流寄出与派送情况</strong><br>       用户可以通过app发出的消息，先后知道寄件人的信息，快递已经到达的中转站及其下一站，最后知道取件码等信息。所以出现问题也可以问责相关的物流站点。</p><h3><span id="讨论与质疑">讨论与质疑</span></h3><p>我们小组在项目实施过程中，对项目的应用前景提出了如下质疑：</p><p>1.流程中存在的漏洞：</p><p>​       在设计流程中，我们先让寄件人选择好寄件地址和收件地址，并由算法确定接下来邮件的路径，但这样可能会存在一些非预期问题。如果寄件人说好在A驿站寄件却去了其他驿站，是拒绝派送还是新生成一张存储A驿站信息的二维码，方法有待商榷。另外如果由于工作或者其他原因邮件被寄到了某个不在路径之内的中转站，又应该怎么处理？</p><p>2.密钥更新有关问题：</p><p>​       分析对中转站密钥穷举攻击的可能性，以及中转站是否需要更换密钥，多久更换密钥。</p><p>3.成本与性价比问题：</p><p>​       需要分析二维码加密和识别工具的制作成本以及攻击者的攻击成本和可能导致的信息泄露后果，以及加密对快递拣发效率的影响。以确定该方案的性价比是否足够的好。</p><h3><span id="总结与感想">总结与感想</span></h3><p>电子商务的快速发展使得个人信息的泄露问题已经成为公众生活的威胁之一，针对不法快递人员将快递信息用以市场交易，甚至直接威胁收件人、寄件人的生命财产安全，文章提出利用二维码技术与计算机技术相结合，基于二维码技术，采用分层加密技术，对物流信息进行分层加密后转储到二维码进行二次封装，并且不同等级授权机制解密相关信息，保护信息安全。</p><p>但是流程中存在某些漏洞，实际应用中可能带来比较大的麻烦，性价比方面还需要调查研究。所以这个项目有待优化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关键词：中国剩余定理，密钥分发技术，隐私保护。&lt;/p&gt;
&lt;h3&gt;&lt;span id=&quot;引言&quot;&gt;引言&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;在2018年11月份的时候，段老师在密码学课上讲到了密钥分发协议，我当时就觉得这个协议很有意思也很有应用前景。后来老师还很主动地分享了一下它的ide
      
    
    </summary>
    
    
      <category term="project" scheme="https://life-extension.github.io/categories/project/"/>
    
    
      <category term="project" scheme="https://life-extension.github.io/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>基于CRT的新型群文件共享系统</title>
    <link href="https://life-extension.github.io/2020/04/13/%E5%9F%BA%E4%BA%8ECRT%E7%9A%84%E6%96%B0%E5%9E%8B%E7%BE%A4%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E7%B3%BB%E7%BB%9F/"/>
    <id>https://life-extension.github.io/2020/04/13/%E5%9F%BA%E4%BA%8ECRT%E7%9A%84%E6%96%B0%E5%9E%8B%E7%BE%A4%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-04-13T13:45:15.000Z</published>
    <updated>2020-05-06T10:07:42.113Z</updated>
    
    <content type="html"><![CDATA[<p>关键词：隐私保护，权限管理，身份认证，中国剩余定理，密钥分发，密钥更新。</p><p>这个项目的是在2019年寒假期间进行的，4月份在中南大学信息安全作品赛答辩，但是由于功能只实现了主体部分，加之我在台上比较胆怯紧张，所以只获得团队三等奖，但是当时老师们还是对我们鼓励有加，说我们有实实在在在做项目。在此感谢两位搭档与我一起努力，共克难关。看着当时做的答辩PPT和项目代码，依然觉得感受良多。这的确是一次既有收获又有遗憾的项目经历。</p><h4><span id="选题背景">选题背景</span></h4><p>在密码学课程中，我们的指导老师段老师给了我们很多新颖的idea。其中一条是和群文件分级管理有关的，她分析了一个现象：目前在比较大的QQ群里，往往存在很严重的信息泄露情况。如果我们能在聊天群里面对文件进行分级管理，会不会有更好的效果？</p><p>的确，信息泄露现象已经屡见不鲜，前不久在学校举办的天梯赛里面就出现了这样的问题，<strong>组委会在公布参赛人员名单的时候竟然把所有参与者的姓名，学院，专业名称，班级，学号，QQ，邮箱和联系电话等资料统统泄露了出来，其中也包括我的资料。</strong>我对此感到不满，立即与发布这份名单的同学说清楚这样发布名单的危险。还好她很快认识到自己在隐私保护方面的不足，两三分钟后迅速地把这份报名表撤回了。</p><p><img src="/2020/04/13/%E5%9F%BA%E4%BA%8ECRT%E7%9A%84%E6%96%B0%E5%9E%8B%E7%BE%A4%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E7%B3%BB%E7%BB%9F/1.png" alt="被泄露的报名表"></p><p>虽然一份名单中的信息量不多，对不法分子而言可能还卖不出一份好价钱。但是如果人人都抱着这种随意和侥幸的心态，就有可能导致更多更重要的隐私被一次性泄露，从而带来非常大的危害。</p><h4><span id="作品功能">作品功能</span></h4><p>经过项目组的讨论和意见交换，分析上述情况出现的原因主要有以下三点：</p><p><strong>1.文件的发布者隐私保护意识不强。</strong></p><p><strong>2.群里人员鱼龙混杂。</strong></p><p><strong>3.群文件明文可见。</strong></p><p>对发布者的隐私保护意识的提升，光有宣传，效果是不大的，只有通过设计出一款人性化的软件来使他们在不知不觉中形成这种习惯。而群里人员鱼龙混杂，则主要归因于群成员缺乏身份认证。群文件明文可见，则是由于对群成员缺乏分层管理，导致可拓展性低。</p><p>为了保证群文件的安全，我们的应用程序打算做到以下几点：</p><p>1.群文件加密保存。</p><p>2.群成员实名认证。</p><p>3.对群成员进行分级权限管理。</p><p>4.提醒管理员注意群文件的安全。</p><p>这意味着需要实现如下功能：</p><p>1.通过<strong>权限分级</strong>实现<strong>权限管理</strong>，控制每个用户所能解密的文件等级，以保证保密级别较高的文件具有比较好的保密性。</p><p>2.通过<strong>基于CRT的密钥分发</strong>系统，具体实现文件的<strong>访问控制</strong>，使级别较低的人不能解密级别较高的文件</p><p>3.通过<strong>实名制与重名查询</strong>，实现辅助的<strong>身份认证</strong>。</p><p>4.当群成员退出或者权限降低后，<strong>密钥自动更新</strong>，使得退出群组的成员无法再解密群中的文件。</p><p>群成员的权限管理该采用什么模型呢？当时我在学操作系统安全，在寒假的预习过程中，我预习到了一种模型，叫做Biba模型，当看到这个模型的思路的什么，我就觉得，它正好可以用在我们项目组研制的软件中，根据Biba模型，我做出了一些调整，最终软件所能实现的分层管理功能就是：任何一个等级的群成员，只能浏览安全等级小于或者等于这个等级的群文件。例如，安全等级为4的用户可以得知安全等级为1,2,3,4的文件的密码(这个用户的私钥可以解密上述四种安全等级文件的会话密钥)，而安全等级为4的文件只可以被安全等级为4,5的用户查看(只要这些用户能通过解密相应信息或者这个文件的会话密钥)</p><p>而基于CRT的密钥分发技术则是在密码学课程中我十分感兴趣的技术。例如在一个交际系统中，A,B,C,D,E都有自己的私钥，若B,C,D需要在不透露自己的私钥的情况下进行沟通，那么可以生成一个会话密钥并通过CRT技术用B,C,D的私钥进行加密，B,C,D可以通过解密这条消息看到相应的会话密钥，而A,E则不行。这样就实现了一个小范围保密通信协议。</p><p>身份认证这方面，主要是重名查询。为免有人冒充群里已有的成员加入，每位成员加入的时候，系统会遍历一遍已有的群成员，如果已经存在该群成员，则系统会出现“Red Alert”，提醒管理员要十分注意核实该申请者的身份。同时每一位入群的成员都将被管理员设置成相应的安全级别。</p><p>故作品的关键流程与技术如下：</p><p><img src="/2020/04/13/%E5%9F%BA%E4%BA%8ECRT%E7%9A%84%E6%96%B0%E5%9E%8B%E7%BE%A4%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E7%B3%BB%E7%BB%9F/2.png" alt></p><p><img src="/2020/04/13/%E5%9F%BA%E4%BA%8ECRT%E7%9A%84%E6%96%B0%E5%9E%8B%E7%BE%A4%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E7%B3%BB%E7%BB%9F/3.png" alt></p><h4><span id="作品实现">作品实现</span></h4><p>作品最终实现了以下功能：群文件密钥分发，实名制，权限管理，密钥可更新，重名查询。</p><p>我的两位队友主要负责聊天软件的制作(Q群界面的模拟和身份认证功能的实现)，而我负责关键流程的算法设计和代码实现（权限管理，访问控制和密钥更新）。但是最后由于两部分的代码不太兼容，最后没调通，我就直接在eclipse上面展示关键代码的功能了。</p><p>关键代码部分（含注释）实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;<span class="comment">//用于支持java密钥的大数</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CRT</span> </span>&#123;</span><br><span class="line">;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">KEY []key=<span class="keyword">new</span> KEY[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">key[i]=<span class="keyword">new</span> KEY(<span class="number">32</span>);<span class="comment">//对话密钥一般比用户密钥少，用户密钥需要稍大</span></span><br><span class="line">System.out.println(<span class="string">"初始化用户密钥: key"</span>+(i+<span class="number">1</span>)+<span class="string">"="</span>+key[i].primekey);<span class="comment">//用户私钥</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> rank;<span class="comment">//文件等级</span></span><br><span class="line">MOD m=<span class="keyword">new</span> MOD();</span><br><span class="line">System.out.println(<span class="string">"自动生成模数:"</span>+m.primemod);</span><br><span class="line"><span class="keyword">try</span> &#123;Thread.sleep(<span class="number">1000</span>);&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception e) &#123;&#125;;</span><br><span class="line">Scanner cin=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="comment">//某用户传送文件</span></span><br><span class="line">KEY []Ks=<span class="keyword">new</span> KEY[<span class="number">5</span>];<span class="comment">//生成会话密钥</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">Ks[i]=<span class="keyword">new</span> KEY(<span class="number">30</span>);<span class="comment">//会话密钥要比普通密钥稍小</span></span><br><span class="line">System.out.println(<span class="string">"初始化会话密钥: ks"</span>+(i+<span class="number">1</span>)+<span class="string">"="</span>+Ks[i].primekey);<span class="comment">//+"="+Ks[i].primekey</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;Thread.sleep(<span class="number">500</span>);&#125;<span class="comment">//这一段是为了在答辩时老师能慢慢的看变化，看得更清楚</span></span><br><span class="line"><span class="keyword">catch</span>(Exception e) &#123;&#125;;</span><br><span class="line"><span class="comment">//System.out.println("系统内部生成文件加密密钥中");//测试</span></span><br><span class="line"></span><br><span class="line">KEY []Kr=<span class="keyword">new</span> KEY[<span class="number">5</span>];</span><br><span class="line">System.out.println(<span class="string">"根据文件等级生成传输密钥Kr"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//第i+1级文件的CRT</span></span><br><span class="line"><span class="comment">//System.out.println("根据文件等级生成传输密钥Kr"+(i+1));</span></span><br><span class="line">Kr[i]=Ks[i].CRT(key,m,i+<span class="number">1</span>);<span class="comment">//根据CRT生成总密钥Kr,Ks是对应会话密钥,m是模数,(i+1)是等级</span></span><br><span class="line">System.out.println(<span class="string">"Kr"</span>+(i+<span class="number">1</span>)+<span class="string">"="</span>+Kr[i].get());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;Thread.sleep(<span class="number">1000</span>);&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception e) &#123;&#125;;</span><br><span class="line">        <span class="comment">//展示CRT分级管理后的效果</span></span><br><span class="line">System.out.println(<span class="string">"测试：各等级用户能得到的密钥——请输入你想看的文件等级:"</span>);</span><br><span class="line">rank=cin.nextInt();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">BigInteger result=Kr[rank-<span class="number">1</span>].get().remainder(key[i].get());</span><br><span class="line">System.out.println(<span class="string">"第"</span>+(i+<span class="number">1</span>)+<span class="string">"级用户得到的会话密钥是"</span>+result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(k&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"新建用户"</span>);</span><br><span class="line">User a=<span class="keyword">new</span> User();</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"请输入你想看的文件级别:"</span>);</span><br><span class="line">rank=cin.nextInt();</span><br><span class="line">BigInteger result=Kr[rank-<span class="number">1</span>].get().remainder(key[a.rank-<span class="number">1</span>].get());</span><br><span class="line">System.out.println(<span class="string">"用户得到的密钥是"</span>+result);</span><br><span class="line">System.out.println(<span class="string">"测试：第"</span>+rank+<span class="string">"级文件会话密钥:"</span>+Ks[rank-<span class="number">1</span>].primekey);</span><br><span class="line"><span class="comment">//System.out.println("是否继续？除y之外任意键退出查看文件并注销用户。");</span></span><br><span class="line">j--;</span><br><span class="line"><span class="keyword">try</span> &#123;Thread.sleep(<span class="number">5000</span>);&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception e) &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用户注销，执行析构函数</span></span><br><span class="line">System.out.println(<span class="string">"用户注销，密钥将自动更新"</span>);</span><br><span class="line"><span class="keyword">int</span> userank=a.get();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;userank;i++)</span><br><span class="line">&#123;</span><br><span class="line">Ks[i]=<span class="keyword">new</span> KEY(<span class="number">30</span>);<span class="comment">//生成会话密钥</span></span><br><span class="line"><span class="comment">//System.out.println("会话密钥已更新");</span></span><br><span class="line">key[i]=<span class="keyword">new</span> KEY(<span class="number">32</span>);</span><br><span class="line"><span class="comment">//System.out.println("等级私钥已更新");</span></span><br><span class="line">System.out.println(<span class="string">"更新后的等级密钥: key"</span>+(i+<span class="number">1</span>)+<span class="string">"="</span>+key[i].primekey);</span><br><span class="line"><span class="keyword">try</span> &#123;Thread.sleep(<span class="number">300</span>);&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception e) &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//第i+1级文件的CRT</span></span><br><span class="line">System.out.println(<span class="string">"重新根据文件等级生成传输密钥Kr"</span>+(i+<span class="number">1</span>));</span><br><span class="line">Kr[i]=Ks[i].CRT(key,m,i+<span class="number">1</span>);<span class="comment">//根据CRT生成总密钥Kr,Ks是对应会话密钥,m是模数,(i+1)是等级</span></span><br><span class="line">System.out.println(<span class="string">"新的Kr"</span>+(i+<span class="number">1</span>)+<span class="string">"="</span>+Kr[i].get());</span><br><span class="line"><span class="keyword">try</span> &#123;Thread.sleep(<span class="number">100</span>);&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception e) &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*System.out.println("是否继续？除y之外任意键退出。");</span></span><br><span class="line"><span class="comment">String str=cin.toString();</span></span><br><span class="line"><span class="comment">str=cin.toString();</span></span><br><span class="line"><span class="comment">if(str.charAt(0)!='y')</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line">k--;</span><br><span class="line"><span class="keyword">try</span> &#123;Thread.sleep(<span class="number">3000</span>);&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception e) &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> rank;</span><br><span class="line"><span class="comment">//用户登录,输入密码,获得用户等级</span></span><br><span class="line">User()</span><br><span class="line">&#123;</span><br><span class="line">Scanner ci=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"请输入用户等级:"</span>);</span><br><span class="line">rank=ci.nextInt();<span class="comment">//测试用，手动输入用户等级,貌似有错误输入</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> rank;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MOD</span></span></span><br><span class="line"><span class="class">//生成模数</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">BigInteger primemod;</span><br><span class="line">MOD()</span><br><span class="line">&#123;</span><br><span class="line">Random rand=<span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">byte</span> []rand_byte=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">35</span>];</span><br><span class="line">rand.nextBytes(rand_byte);</span><br><span class="line">rand_byte[<span class="number">0</span>]=<span class="number">1</span>;<span class="comment">//为了让模数大于密码</span></span><br><span class="line">BigInteger a=<span class="keyword">new</span> BigInteger(rand_byte),b=<span class="keyword">new</span> BigInteger(rand_byte);</span><br><span class="line">primemod=a.multiply(b);</span><br><span class="line">primemod=primemod.nextProbablePrime();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BigInteger <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span>  primemod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KEY</span></span></span><br><span class="line"><span class="class">//密钥生成</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">BigInteger primekey;</span><br><span class="line">KEY()</span><br><span class="line">&#123;</span><br><span class="line">Random rand=<span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">byte</span> []rand_byte=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">32</span>];</span><br><span class="line">rand.nextBytes(rand_byte);</span><br><span class="line">BigInteger a=<span class="keyword">new</span> BigInteger(rand_byte);<span class="comment">//随机大正数</span></span><br><span class="line">a=a.abs();</span><br><span class="line">primekey=a.nextProbablePrime();</span><br><span class="line">&#125;</span><br><span class="line">KEY(<span class="keyword">int</span> i)</span><br><span class="line">&#123;</span><br><span class="line">Random rand=<span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">byte</span> []rand_byte=<span class="keyword">new</span> <span class="keyword">byte</span>[i];</span><br><span class="line">rand.nextBytes(rand_byte);</span><br><span class="line">BigInteger a=<span class="keyword">new</span> BigInteger(rand_byte);<span class="comment">//随机大正数</span></span><br><span class="line">a=a.abs();</span><br><span class="line">primekey=a.nextProbablePrime();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BigInteger <span class="title">get</span><span class="params">()</span><span class="comment">//输出</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span>  primekey;</span><br><span class="line">&#125;</span><br><span class="line">KEY(BigInteger a)</span><br><span class="line">&#123;</span><br><span class="line">primekey=a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(BigInteger b)</span><span class="comment">//修改</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">primekey=b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">KEY <span class="title">CRT</span><span class="params">(KEY key[],MOD m,<span class="keyword">int</span> rank)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">KEY Kr=<span class="keyword">new</span> KEY(BigInteger.ZERO);</span><br><span class="line">BigInteger []x=<span class="keyword">new</span> BigInteger[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)<span class="comment">//把密钥分发给需要的人</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;rank)<span class="comment">//比如等级是三级的文件，1，2级不能看，密钥填0</span></span><br><span class="line">&#123;</span><br><span class="line">x[i-<span class="number">1</span>]=BigInteger.ZERO;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">x[i-<span class="number">1</span>]=primekey;<span class="comment">//Ks[i]，即对应的会话密钥</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">BigInteger p=m.get();</span><br><span class="line">BigInteger Mn=BigInteger.ONE;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">Mn=Mn.multiply(key[i].get());</span><br><span class="line">&#125;</span><br><span class="line">BigInteger []W=<span class="keyword">new</span> BigInteger[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">W[i]=Mn.divide(key[i].get());</span><br><span class="line">&#125;</span><br><span class="line">BigInteger []T=<span class="keyword">new</span> BigInteger[<span class="number">5</span>];<span class="comment">//开辟了数组空间</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">T[i]=W[i].modInverse(key[i].get());</span><br><span class="line">&#125;</span><br><span class="line">BigInteger result=BigInteger.ZERO;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">result=result.add(x[i].multiply(W[i].multiply(T[i])));</span><br><span class="line">&#125;</span><br><span class="line">result=result.remainder(Mn);<span class="comment">//咋变成0了</span></span><br><span class="line"><span class="comment">//result=result.remainder(p);</span></span><br><span class="line">Kr.push(result);</span><br><span class="line"><span class="keyword">return</span> Kr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在测试中，我们的展示流程是这样的：</p><p>初始化群用户密钥并生成每类文件的会话密钥。</p><p><img src="/2020/04/13/%E5%9F%BA%E4%BA%8ECRT%E7%9A%84%E6%96%B0%E5%9E%8B%E7%BE%A4%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E7%B3%BB%E7%BB%9F/4.png" alt></p><p>自动生成每类等级文件密钥的加密信息。</p><p><img src="/2020/04/13/%E5%9F%BA%E4%BA%8ECRT%E7%9A%84%E6%96%B0%E5%9E%8B%E7%BE%A4%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E7%B3%BB%E7%BB%9F/5.png" alt></p><p>测试CRT定理对密钥分发的有效性：</p><p>每个级别的用户对于某个文件等级的文件，能获取到的密钥(样例文件等级为3)：</p><p><img src="/2020/04/13/%E5%9F%BA%E4%BA%8ECRT%E7%9A%84%E6%96%B0%E5%9E%8B%E7%BE%A4%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E7%B3%BB%E7%BB%9F/7.png" alt></p><p>用户入群后，随意访问文件密钥，但是只能看到安全等级比较低的文件，不能访问安全等级比自己等级高的文件。</p><p><img src="/2020/04/13/%E5%9F%BA%E4%BA%8ECRT%E7%9A%84%E6%96%B0%E5%9E%8B%E7%BE%A4%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E7%B3%BB%E7%BB%9F/6.png" alt></p><p>密钥更新部分，密钥更新产生了新的会话密钥，老用户不再能使用之前的密钥。(PPT没有截图，具体实现可以看代码)</p><h4><span id="质疑与争论">质疑与争论</span></h4><p><strong>我的质疑</strong>：</p><p>在答辩前，我写了一份有关这个项目的优势和劣势的一些分析并交予小组成员一起讨论，主要有如下几点：</p><p>1.在鱼龙混杂的qq群中，如果管理员真的愿意耐心的给每一个人和文件分配权限的话，那么权限比较低的人看不到权限比较高的文件。那么如果是权限比较高的人出了问题呢？比如管理员的号被盗了怎么办？</p><p>2.我们给他足够高的权限意味着我们足够相信他，但是泄密者不一定是本人，也不一定是前员工，如果只是qq号被攻击者窃取了，那么别人是可以在管理员不知情的情况下获取文件内容的。如果文件内容被获取，那么截图或者下载，总有可能是会泄露的。</p><p>3.如果我们实在担心文件的安全，为什么还一定要把文件上传到qq而不通过其他方式分享文件？</p><p>4.不可否认，通过入群的认证,离开群后更新密钥和分级管理是可以起到一定保护作用。但这种方式的性价比真的高吗，真的值得吗？</p><p>不可否认，我可能想得有点多，但是关于上述几个问题，的确值得商榷，最让我担心的还是项目的性价比和应用前景。</p><p><strong>团队总结的遗留问题：</strong></p><p>经过一番讨论，我们在答辩过程中提出了如下的不足之处和创新点：</p><p><img src="/2020/04/13/%E5%9F%BA%E4%BA%8ECRT%E7%9A%84%E6%96%B0%E5%9E%8B%E7%BE%A4%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E7%B3%BB%E7%BB%9F/8.png" alt></p><p><img src="/2020/04/13/%E5%9F%BA%E4%BA%8ECRT%E7%9A%84%E6%96%B0%E5%9E%8B%E7%BE%A4%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E7%B3%BB%E7%BB%9F/9.png" alt></p><p><strong>老师的质疑：</strong></p><p>项目答辩的时候，老师也问了这个项目的应用前景，他们觉得没有这个必要。因为完全可以建一个小一些的Q群，或者使用更安全的公司内部网络。他们建议，我们把这个问题上升到公司内部文件系统的安全上面去，不然看着觉得很好，但是想着又觉得又有点虚。</p><hr><p>2020.4.21随想</p><p>有时候人性的弱点带来的危险最大，我之前虽然会看入群验证但很少核实信息是否真实。所以我觉得一个应用，最主要的还是要解决人的问题，方便人的生活，同时自然就能保证安全了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关键词：隐私保护，权限管理，身份认证，中国剩余定理，密钥分发，密钥更新。&lt;/p&gt;
&lt;p&gt;这个项目的是在2019年寒假期间进行的，4月份在中南大学信息安全作品赛答辩，但是由于功能只实现了主体部分，加之我在台上比较胆怯紧张，所以只获得团队三等奖，但是当时老师们还是对我们鼓励有加
      
    
    </summary>
    
    
      <category term="project" scheme="https://life-extension.github.io/categories/project/"/>
    
    
      <category term="project" scheme="https://life-extension.github.io/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>对信息安全的全方位透视——读杨义先、钮心忻《安全简史》有感</title>
    <link href="https://life-extension.github.io/2020/04/07/%E5%AF%B9%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%9A%84%E5%85%A8%E6%96%B9%E4%BD%8D%E9%80%8F%E8%A7%86%E2%80%94%E2%80%94%E8%AF%BB%E6%9D%A8%E4%B9%89%E5%85%88%E3%80%81%E9%92%AE%E5%BF%83%E5%BF%BB%E3%80%8A%E5%AE%89%E5%85%A8%E7%AE%80%E5%8F%B2%E3%80%8B%E6%9C%89%E6%84%9F/"/>
    <id>https://life-extension.github.io/2020/04/07/%E5%AF%B9%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%9A%84%E5%85%A8%E6%96%B9%E4%BD%8D%E9%80%8F%E8%A7%86%E2%80%94%E2%80%94%E8%AF%BB%E6%9D%A8%E4%B9%89%E5%85%88%E3%80%81%E9%92%AE%E5%BF%83%E5%BF%BB%E3%80%8A%E5%AE%89%E5%85%A8%E7%AE%80%E5%8F%B2%E3%80%8B%E6%9C%89%E6%84%9F/</id>
    <published>2020-04-07T02:14:05.000Z</published>
    <updated>2020-05-19T02:23:49.666Z</updated>
    
    <content type="html"><![CDATA[<p>创作时间：2017-2018年寒假。</p><p>《安全简史》这本书，是我们班导师推荐读的。相比这个假期看的另外一本书《数学之美》，它们显然都是科普类读物。但和《数学之美》不同，它不是只从数学角度介绍计算机方面的知识，而是从各个角度去透析信息安全这个新兴学科，它的目的是通过这本“外行不觉深，内行不觉浅的书”来“抛砖引玉”，正如书中所强调，希望有人来填补信息安全XX方面的学科空白“为学科开通论”。</p><p>最近几天，总是听到学长和同学吐槽这本书，说它写作思路不清，语言啰嗦话题太分散，还有就是技术等“硬件”太少，只看了三十多页就不看了。可我却坚持读了下来，因为我深知，这本书之所以那么多“废话”，主要是为了让复杂的知识更加简单，然我们不至于疲乏。</p><p>而之所以说它没技术，是因为他们只看了前面几章，谁都知道，隐私是怎么产生的，谁都知道，大数据时代，人的隐私泄露的多么厉害；谁都知道，病毒无处不在，对于我们专业的学生而言，“震网病毒”“蠕虫病毒”更是早有耳闻；谁都知道，那一位位著名的黑客，与“伊朗核电站”被攻击的事件和“勒索病毒”等攻击事件；稍加预习也可以知道凯撒密码和维吉尼亚密码了。然而书中前五章，花了四章篇幅论述这些，不就是为了面对广大读者，拉近其与广大读者的距离嘛。这几章选取了很多生活场景，让文章本身更加“接地气”，虽然浅显，但是易懂，何尝不是好事？</p><p>这本书为了浅显易懂，还有一大显著的特点，就是跨学科。语文，数学，哲学，历史，物理，生物，社会学，经济学，管理学，乃至英语，化学，一切应有尽有。比如说到语文，先别说那些幽默的句子，首先说说每一节后面的那些改编汪国真，唐婉，苏轼等等小诗而做的章节小节吧。虽然那些诗确实被改编得让人有些啼笑皆非，不过这更刺激了我看这些大作原作的动力。看到唐婉的《钗头凤》，我忍不住记起了苏轼的另一首《钗头凤》，还有他们爱情的悲剧并查阅了相关资料；看到余光中的《乡愁》，我想起了这位刚刚逝世的伟大诗人，并期盼两岸早日统一，再说说书中引用的中外神话，从盘古开天到孙猴子取经归来；从人类被赶出伊甸园，到上帝创造语言阻止人类造“通天塔”。</p><p>后面的章节，就和前面的章节不大一样了，从第六章认证开始，话题开始逐步深入，从十一章灾备开始，话题开始变得复杂。而到了十八章“系统与安全”时，话题达到了“专业级”水平。文章花尽篇幅讲述了哲学上的“整体性”思想，还引用了大量的逻辑悖论，最后给出了整体性在系统安全中的应用。因此，对于我了解过得知识和过于专业的知识，我是一行一行地看的，但对于适合我的章节，我却是一个字一个字地看的，这本书中，最让我向往的两个章节，就是《安全管理学》和《安全心理学》。管理、心理和哲学，一直都是我想选修的课。这不能说是专业知识，只能说是人应该有的技能，而且是跨学科的，甚至有与理工科不同的“感性”。看了这两章，我觉得自己更加明确信息安全专业及相关企业对自己人格的要求，并且要促使自己去塑造自己的性格、锻炼自己的能力，成为一个合格的信安人。</p><p>为什么我会喜欢《安全管理学》呢？因为，第一，一个软件的开发乃至一个系统的安全开发，都是要靠整体的，这离不开管理。比如我日思夜想想完成某游戏的改进版，那么确立“把游戏完好地从脑海搬到屏幕”这个“管理的任务”，就要做到协调，比如这里，就是各个设计人员的协调。首先，要让他们采用相同的编程语言，这个是硬性要求；第二就是任务的分配，即每个人该完成什么任务，要分配好，这又有要求：不重复，不缺少，让合适的人做合适的工作，比如高效率的人做多几个任务，善于沉思的人突破难关。然后，尽管每个人的编程方式都不一样，但是要把这些人的程序合在一起，形成文件，而且要提前做好找bug的工作，现在的一些小游戏，明明bug很明显又很多却从来不修改，调试工作十分不到位。</p><p>其实书中这一章给我影响启发最大的，是那段动物们的“轮番表演”。它讲的，其实是哲学上的几个效应。第一个，蝴蝶效应，它告诉我们，一丁点管理的失误将会引发大事，现实意义大概就是，仔细检查程序，提高容错性，尽量减少bug的产生。边编程边编译。第二个，青蛙效应，它提醒我们不要积累问题，一些小bug如果积累，就像是基因突变，由量变最终变成质变。第三个，鳄鱼法则，它提醒我们，当危险发生，有时候，我们应当做出必要的牺牲，以保证剩余的部分完好无损，比如书中说到“网络隔离”等。第四，鲇鱼效应，这提醒我们要勇于承认漏洞的存在，做出检测并加以填补。第五，羊群效应，坚持自己心中的准则，做事要有原则，敢于质疑权威，特别是编程，不能使用不规范的语言和危险的关键字，比如C语言中经常出现的“goto”，在熟练采用其他算法后应尽量摒弃。第六，刺猬效应，它提醒我们，凡事要找到合适的平衡点，为安全投入的成本要和效益相匹配。第七，手表定律，提示我们，做一件事的时候，专心致志，不要一心二用；或者不要同时确立多个目标；或者，管理的时候要定统一的规则，比如采用统一的语言等等。第八，“破窗理论”，说明环境可以对人产生强烈的暗示性和诱导性，这告诉我的，如同“打扫干净房子再请客”，就是说，如果是在一个团队，一个共同的环境中，我应当以身作则，不能放纵自己，然后把这种不羁传染给别人。第九，二八定律，马太效应，它告诉我们，安全管理要抓住那关键的少数，比如说，重大的漏洞，极有可能被攻击的地方。第十，木桶理论，它告诉我们，补好系统的短板，因为那些地方最容易被黑客攻击，就算再先进的（乃至量子）系统，都一定会有它的缺陷，这些缺陷往往决定了一个系统的成败，所以系统设计是，该知道它的长处但更改防备它的短处。第十一，鸟笼逻辑，这是指由于惯性思维，人买了鸟笼就会养鸟，它告诉我们，我们不要被惯性思维所困，比如量子学家，不应该因为量子“测不准”原理就担保“量子计算机系统是绝对安全的”，说不定黑客们会发现其他弱点呢？第十二，责任分散效应，它告诉我们，安全管理要明确责任，把责任落实到具体的人身上。第十三，习得性无助效应，如果尝试了很多次依然度不过的难关，他就会产生无助感。所以我们要做好安全，特别是未来人工智能方面的安全，不能让用户悲观绝望。</p><p>安全心理学，主要研究网络空间建设者，破坏者，和使用者的“不安全”心理。而这其中最重要的，应该还是网络空间建设者的心理，这也是对我们信安人的要求。给我印象比较深的，是省能的心理，就是建设者们愿意投入的成本太小。比如我们现在编程的时候，不愿意投入太多的时间成本，使得程序的逻辑思维不严谨，容错性不高，要很多漏洞可寻；再比如公司投入的人力、物力不够多，导致信息安全领域的漏洞没有被充分检查。这提醒我们，要舍得投入时间和金钱到计算机系统乃至网络的建设中，问题解决的越早，成本就越少。还有就是“注意力”，这提醒我在日后的工作中，要劳逸结合，以最饱满的精神状态迎接工作，而且工作时要仔细小心，不放过任何一个漏洞。 </p><p>不利于安全的性格中，给我印象比较深深的，第一是性格孤僻，因为这种性格不善于交际，其实我也不能算孤僻，不过小的时候某些东西改变了我的价值观，让我有了很多“原则”，所以显得不太合群，大学学习的过程其实也是我努力摆脱自己这个性格缺陷的过程，我尝试和更多的同学玩在一起，不管是平时还是假期。第二是不易平静，其实我也不能算这种性格，因为在初中的时候我已经是一个很享受孤独的人，文三金老师的话给了我很大的影响，那就是“睡前多思考”，我喜欢在自然中，或在睡前的平静中，或听着轻音乐思考人生，然而这却给了我更多的不平静，也是我初中高中失眠的主要原因。到了大学，开朗了，失眠的症状好了，但是却少了一丝深入的思考与钻研的劲儿，看来两者之间，找个平衡点，也挺难的。</p><p>在提及的四个良好的意志品质方面，给我印象比较深的，莫过于“果断性”，我这方面还真的有点欠缺，所以18岁以后，我才让自己鼓起勇气，变得更加主动，而且我的高三舍友，我也特地挑了以为果断的学霸，尽管我们的性格时有碰撞，但是最终，我还是从他身上学到了很多，我们一直都还是很好的朋友，所以，在这里，我谢谢他啦！</p><p>遗憾的是，至今安全心理学和安全管理学还没有相关的教材，希望这方面的空缺能马上填补，在国家大力推崇信息安全的时候，希望他们可以加大这方面的投入。另外其他章节也给我提供了很多知识，比如让我了解了社会工程学，认证，信息隐藏，防火墙，灾备的过程；也提出了很多很专业的知识，比如赛博学，区块链，安全熵，虽然现在还不甚了解，但是，随着专业学习的深入，我一定还会在翻开重看的。</p><p>不得不说，《安全简史》是本好书，它从各个方面来描写信息安全，这样，各个领域的人，各个年龄层次和知识层次的人，都能找到自己喜欢的部分，可以说，它就是一部360度全景摄像机，让我们完整的领略了信息安全这个庞大的家族，更坚定了我学习信息安全的决心。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;创作时间：2017-2018年寒假。&lt;/p&gt;
&lt;p&gt;《安全简史》这本书，是我们班导师推荐读的。相比这个假期看的另外一本书《数学之美》，它们显然都是科普类读物。但和《数学之美》不同，它不是只从数学角度介绍计算机方面的知识，而是从各个角度去透析信息安全这个新兴学科，它的目的是通
      
    
    </summary>
    
    
      <category term="article" scheme="https://life-extension.github.io/categories/article/"/>
    
    
      <category term="article" scheme="https://life-extension.github.io/tags/article/"/>
    
  </entry>
  
  <entry>
    <title>极光实验室战队考核密码学部分考察点与题解</title>
    <link href="https://life-extension.github.io/2020/04/01/%E6%9E%81%E5%85%89%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%88%98%E9%98%9F%E8%80%83%E6%A0%B8%E5%AF%86%E7%A0%81%E5%AD%A6%E9%83%A8%E5%88%86%E8%80%83%E5%AF%9F%E7%82%B9%E4%B8%8E%E9%A2%98%E8%A7%A3/"/>
    <id>https://life-extension.github.io/2020/04/01/%E6%9E%81%E5%85%89%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%88%98%E9%98%9F%E8%80%83%E6%A0%B8%E5%AF%86%E7%A0%81%E5%AD%A6%E9%83%A8%E5%88%86%E8%80%83%E5%AF%9F%E7%82%B9%E4%B8%8E%E9%A2%98%E8%A7%A3/</id>
    <published>2020-04-01T13:36:17.000Z</published>
    <updated>2020-05-06T09:38:29.006Z</updated>
    
    <content type="html"><![CDATA[<p>关键词：DH密钥交换协议，Coppersmith攻击，混合密码通信，rsa及aes编程。</p><h4><span id="题目">题目</span></h4><p><img src="/2020/04/01/%E6%9E%81%E5%85%89%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%88%98%E9%98%9F%E8%80%83%E6%A0%B8%E5%AF%86%E7%A0%81%E5%AD%A6%E9%83%A8%E5%88%86%E8%80%83%E5%AF%9F%E7%82%B9%E4%B8%8E%E9%A2%98%E8%A7%A3/image-20200404204929407.png" alt="image-20200404204929407"></p><h4><span id="出题思路">出题思路</span></h4><p>由于是战队考核，这次的题目应出得相对综合，也更考验同学们的知识面和对各方面加密的理解和把握能力。同时，题目应当结合密码学的实际应用，有生动的背景和场景。</p><p>出题前，我在网上做了两三道rsa和aes的题目，觉得出题点还是比较单一，于是联想了一下之前做过的一些印象深刻的密码学题目，于是我想到了把密码学实验和aes，rsa结合起来，出一次改进版的中间人攻击，作为密码学实验的补充。之所以要和aes，rsa结合，是因为通过混合密码通信的安全性更高，效率也更好。我们段老师的PPT是这么说的：</p><p><img src="/2020/04/01/%E6%9E%81%E5%85%89%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%88%98%E9%98%9F%E8%80%83%E6%A0%B8%E5%AF%86%E7%A0%81%E5%AD%A6%E9%83%A8%E5%88%86%E8%80%83%E5%AF%9F%E7%82%B9%E4%B8%8E%E9%A2%98%E8%A7%A3/image-20200402112220312.png" alt="image-20200402112220312"></p><p>但是，如果rsa加密过程中存在某些问题呢？假如rsa私钥部分泄露呢？那面对中间人的攻击，这种通信方法也难以保证它的安全性。见如下<a href="王小云,刘明洁.格密码学研究[J].密码学报,2014,1(01):13-27.">参考论文</a>:</p><p><img src="/2020/04/01/%E6%9E%81%E5%85%89%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%88%98%E9%98%9F%E8%80%83%E6%A0%B8%E5%AF%86%E7%A0%81%E5%AD%A6%E9%83%A8%E5%88%86%E8%80%83%E5%AF%9F%E7%82%B9%E4%B8%8E%E9%A2%98%E8%A7%A3/.%5C%E6%9E%81%E5%85%89%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%88%98%E9%98%9F%E8%80%83%E6%A0%B8%E5%AF%86%E7%A0%81%E5%AD%A6%E9%83%A8%E5%88%86%E8%80%83%E5%AF%9F%E7%82%B9%E4%B8%8E%E9%A2%98%E8%A7%A3%5C7.png" alt="7"></p><p>在题目环境中，我就让私钥最低位的一半比特泄露出来，这是足够解对称密码私钥的了。根据等式：<br>$$<br>e * d == 1 mod phi(N)<br>$$<br>我们引入常数k，使得:<br>$$<br>e * d - k * phi(N) == 1<br>$$<br>由于e模phi的逆：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = gmpy2.invert(e,phi)</span><br></pre></td></tr></table></figure><p>所以对于上述等式，有：</p><p>$$<br>phi(N) &gt; d<br>$$</p><p>那么就有：<br>$$<br>k&lt;e<br>$$<br>由于e一般在16位以下（题目中不超过1024），所以k是可爆破的。</p><p>我们对等式两边都模上2的1050次方，并化简：<br>$$<br>(e * d - k * phi(N)) mod 2<strong>1050 == 1 mod 2</strong>1050<br>$$</p><p>$$<br>((e mod 2<strong>1050) * (d mod 2</strong>1050) - k * phi(N) ) mod 2<strong>1050 == 1 mod 2</strong>1050<br>$$</p><p>$$<br>(e * d0 - k<em>phi(N)) mod 2*</em>1050 == 1 mod 2**1050<br>$$</p><p>$$<br>e * d0 - k<em>phi(N) == 1 mod 2*</em>1050<br>$$</p><p>方程两边同乘q，并代入等式：<br>$$<br>phi(N)==(p-1)<em>(q-1)<br>$$<br>以及<br>$$<br>N==p<em>q<br>$$<br>可以得到：<br>$$<br>e</em>d0*p - k</em>(n<em>p-p</em>p-n+p) == p mod 2**1050<br>$$<br>所以只需要对k进行遍历，然后对每一个k通过sage解同余方程即可。</p><p>获取了对称密码的私钥以后，消息明文便不难获取了。同时，和密码学实验一样，我们假设中间人有着足够的能力完成近乎实时的通信，在没有认证机制的DH通信协议中，他就可以冒充通信双方进行欺骗。<em>这里为了保证实时性，本来应该进行时间限制的，这样大家就只能通过python的pwntools工具来进行交互了。但是考虑到考点比较综合，任务量大，在12小时之内能写出这么多脚本的可能性不太大，所以就不限制时间了。</em></p><h4><span id="考察点">考察点</span></h4><p>AES(CBC和ECB）加解密， 铜匠攻击，DH通信协议，中间人攻击，base64加解密</p><h4><span id="出题过程">出题过程</span></h4><p>首先，还是建立两个文件，Arica.py和conversation.py，保存一些不想公布的变量值:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Arica.py</span></span><br><span class="line">key=<span class="string">b'grzu7KTaDuiiBVWL'</span></span><br><span class="line">flag=<span class="string">b'ACTF&#123;You_have_got_the_flag!That_is_impossible!&#125;'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#conversation.py</span></span><br><span class="line">questions = [</span><br><span class="line">    <span class="string">b"Who are you?"</span>,</span><br><span class="line">    <span class="string">b"Oh my dear Brooke, I miss you so much!"</span>,</span><br><span class="line">    <span class="string">b"Brooke, I was so lonely during the outbreak of Novel coronavirus!"</span>,</span><br><span class="line">    <span class="string">b"Brooke, do you mind me asking you a few more question?"</span>,</span><br><span class="line">    <span class="string">b"What can I do for you?"</span>]</span><br><span class="line">answer = [</span><br><span class="line">    <span class="string">b"I'm Brooke."</span>,</span><br><span class="line">    <span class="string">b"I miss you too."</span>,</span><br><span class="line">    <span class="string">b"Me too! I wanna go out for dance!"</span>,</span><br><span class="line">    <span class="string">b"Not at all."</span>,</span><br><span class="line">    <span class="string">b"Nothing."</span>]</span><br><span class="line">fake_answer=<span class="string">b"I want to get my AES-key."</span></span><br><span class="line">saying_key=<span class="string">b"Here is the key: "</span></span><br></pre></td></tr></table></figure><p>然后在windows上写了针对key的加密函数(aes-cbc)和针对flag的加密函数(泄露私钥的rsa函数)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encryption.py</span></span><br><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Arica <span class="keyword">import</span> key,flag</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> (</span><br><span class="line">    bytes_to_long,</span><br><span class="line">    long_to_bytes,</span><br><span class="line">    str2long,</span><br><span class="line">    long2str,</span><br><span class="line">    getPrime</span><br><span class="line">)</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Random.random <span class="keyword">import</span> (</span><br><span class="line">    getrandbits,</span><br><span class="line">    randint</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">p = <span class="number">217534615279223294476101434763509239207</span></span><br><span class="line">g = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt_flag</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> flag</span><br><span class="line">    aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    flag = adaptmessage(flag)</span><br><span class="line">    c = aes.encrypt(flag)</span><br><span class="line">    print(<span class="string">"Here is the encrypted flag: "</span>+str(base64.b64encode(c)))</span><br><span class="line">    <span class="comment">#b'gTAmtDzEDIYdzs6j55csresodxpsKJlOVMOmzLq8/39Vm0lJZvnrGtPBW6IKUpML'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt_key</span><span class="params">()</span>:</span></span><br><span class="line">    e = <span class="number">1667</span></span><br><span class="line">    p = getPrime(<span class="number">700</span>)</span><br><span class="line">    q = getPrime(<span class="number">1400</span>) </span><br><span class="line">    n = p*q</span><br><span class="line">    print(<span class="string">"""+------------------------------------------------------+</span></span><br><span class="line"><span class="string">|Attension! Through soical engineering, you got this: |</span></span><br><span class="line"><span class="string">+------------------------------------------------------+"""</span>)</span><br><span class="line">    phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">    d = gmpy2.invert(e,phi)</span><br><span class="line">    print(<span class="string">"n = "</span>+str(n))</span><br><span class="line">    <span class="comment">#print(d)</span></span><br><span class="line">    print(<span class="string">"Brooke's partial d: "</span>+ str(int(d) % (<span class="number">2</span>**<span class="number">1050</span>)))</span><br><span class="line">    enc = pow(bytes_to_long(key), e, n)</span><br><span class="line">    <span class="keyword">return</span> enc</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateDH</span><span class="params">(exp)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> pow(g, exp, p)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">adaptmessage</span><span class="params">(message)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> message.ljust(<span class="number">16</span>-len(message)%<span class="number">16</span>+len(message), <span class="string">b"\x00"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aricaSay</span><span class="params">(*args)</span>:</span></span><br><span class="line">    print(<span class="string">"""+-------------------+</span></span><br><span class="line"><span class="string">|    Arica said:    |</span></span><br><span class="line"><span class="string">+-------------------+"""</span>)</span><br><span class="line">    print(<span class="string">" "</span>.join(map(str,args)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brookeSay</span><span class="params">(*args)</span>:</span></span><br><span class="line">    print(<span class="string">"""+--------------------+</span></span><br><span class="line"><span class="string">|    Brooke said:    |</span></span><br><span class="line"><span class="string">+--------------------+"""</span>)</span><br><span class="line">    print(<span class="string">" "</span>.join(map(str,args)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say2arica</span><span class="params">(*args)</span>:</span></span><br><span class="line">    print(<span class="string">"""+---------------------+</span></span><br><span class="line"><span class="string">|    Say to Arica:    |</span></span><br><span class="line"><span class="string">+---------------------+</span></span><br><span class="line"><span class="string">"""</span>+ <span class="string">" "</span>.join(map(str,args)), end=<span class="string">""</span>)</span><br><span class="line">    <span class="keyword">return</span> input()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say2brooke</span><span class="params">(*args)</span>:</span></span><br><span class="line">    print(<span class="string">"""+----------------------+</span></span><br><span class="line"><span class="string">|    Say to Brooke:    |</span></span><br><span class="line"><span class="string">+----------------------+</span></span><br><span class="line"><span class="string">"""</span> + <span class="string">" "</span>.join(map(str,args)), end=<span class="string">""</span>)</span><br><span class="line">    <span class="keyword">return</span> input()</span><br></pre></td></tr></table></figure><p>然后把DH通信的脚本和题目情景写好：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#server.py</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> encryption <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> conversation <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">banner = <span class="string">"""</span></span><br><span class="line"><span class="string">+--------------------------------------------------+</span></span><br><span class="line"><span class="string">|HELLO CHALLENGER!                                 |</span></span><br><span class="line"><span class="string">|                                                  |</span></span><br><span class="line"><span class="string">|Have you ever seen movies like MISSION IMPOSSIBLE?|</span></span><br><span class="line"><span class="string">|Unfortunately, You have got a mission that seemed |</span></span><br><span class="line"><span class="string">|impossible to finish!                             |</span></span><br><span class="line"><span class="string">|                                                  |</span></span><br><span class="line"><span class="string">|In the task, you are required to decrypt the      |</span></span><br><span class="line"><span class="string">|'Most secret' message of Arica, the bank clerk.   |</span></span><br><span class="line"><span class="string">|                                                  |</span></span><br><span class="line"><span class="string">|Fortunately, after social engineering you have    |</span></span><br><span class="line"><span class="string">|hacked in her communication with her boyfriend    |</span></span><br><span class="line"><span class="string">| Brooke and you have got Brooke's partial         |</span></span><br><span class="line"><span class="string">|RSA-private-key.                                  |</span></span><br><span class="line"><span class="string">|                                                  |</span></span><br><span class="line"><span class="string">|To get the message, you must first establish      |</span></span><br><span class="line"><span class="string">| communication with Arica through 'DH key exchange|</span></span><br><span class="line"><span class="string">| protocol', chat with her by saying what Brooke   |</span></span><br><span class="line"><span class="string">|said, but you need to send the message            |</span></span><br><span class="line"><span class="string">| "I want to get my AES-key." and the timestamp    |</span></span><br><span class="line"><span class="string">| after Arica said "What can I do for you?",       |</span></span><br><span class="line"><span class="string">|then she will give the AES-key encrypted with her |</span></span><br><span class="line"><span class="string">| RSA-public-key，this message should be start with|</span></span><br><span class="line"><span class="string">| "Here is the key:".                              |</span></span><br><span class="line"><span class="string">+--------------------------------------------------+</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(banner)</span><br><span class="line">    encrypt_flag()</span><br><span class="line">    enc = encrypt_key()</span><br><span class="line">    expA = getrandbits(<span class="number">128</span>)</span><br><span class="line">    expB = getrandbits(<span class="number">128</span>)</span><br><span class="line">    A = generateDH(expA)</span><br><span class="line">    B = generateDH(expB)</span><br><span class="line">    aricaSay(<span class="string">"A:"</span>, A)</span><br><span class="line">    AC = int(say2brooke(<span class="string">"A: "</span>))</span><br><span class="line">    brookeSay(<span class="string">"B:"</span>, B)</span><br><span class="line">    BC = int(say2arica(<span class="string">"B: "</span>))</span><br><span class="line">    keyC = pow(AC, expB, p)</span><br><span class="line">    keyS = pow(BC, expA, p)</span><br><span class="line">    keyC = long_to_bytes(keyC).rjust(<span class="number">16</span>, <span class="string">b"\x00"</span>)</span><br><span class="line">    keyS = long_to_bytes(keyS).rjust(<span class="number">16</span>, <span class="string">b"\x00"</span>)</span><br><span class="line">    cipherC = AES.new(keyC, AES.MODE_ECB)</span><br><span class="line">    cipherS = AES.new(keyS, AES.MODE_ECB)</span><br><span class="line">    <span class="keyword">for</span> _i <span class="keyword">in</span> range(<span class="number">5</span>):<span class="comment">#5</span></span><br><span class="line">        index=_i</span><br><span class="line">        randomnum = randint(<span class="number">0</span>, <span class="number">256</span>)</span><br><span class="line">        messageA = questions[index]</span><br><span class="line">        messageA = adaptmessage(messageA)</span><br><span class="line">        cS = bytes_to_long(cipherS.encrypt(messageA))</span><br><span class="line">        aricaSay(<span class="string">"A:"</span>, <span class="string">"&#123;:032x&#125;"</span>.format(cS))</span><br><span class="line">        s = int(say2brooke(<span class="string">"A: "</span>), <span class="number">16</span>)</span><br><span class="line">        s = long_to_bytes(s)</span><br><span class="line">        q = cipherC.decrypt(s)</span><br><span class="line">        <span class="keyword">if</span> q != messageA:</span><br><span class="line">            print(<span class="string">"Brooke does't get your words and realize something, U FAILED..."</span>)</span><br><span class="line">            exit(<span class="number">0</span>)</span><br><span class="line">        randomnum = randint(<span class="number">0</span>, <span class="number">256</span>)</span><br><span class="line">        messageB = answer[index]</span><br><span class="line">        messageB = adaptmessage(messageB)</span><br><span class="line">        cC = bytes_to_long(cipherC.encrypt(messageB))</span><br><span class="line">        brookeSay(<span class="string">"B:"</span>, <span class="string">"&#123;:032x&#125;"</span>.format(cC))</span><br><span class="line">        s = int(say2arica(<span class="string">"B: "</span>), <span class="number">16</span>)</span><br><span class="line">        s = long_to_bytes(s)</span><br><span class="line">        a = cipherS.decrypt(s)</span><br><span class="line">        <span class="keyword">if</span>(_i==<span class="number">4</span>):</span><br><span class="line">            messageB = fake_answer</span><br><span class="line">            messageB = adaptmessage(messageB)</span><br><span class="line">        <span class="keyword">if</span> a != messageB:</span><br><span class="line">            print(<span class="string">"Arica does't get your words and realize something, U FAILED..."</span>)</span><br><span class="line">            exit(<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">    randomnum = randint(<span class="number">0</span>, <span class="number">256</span>)</span><br><span class="line">    messageA = saying_key+long_to_bytes(enc)</span><br><span class="line">    messageA = adaptmessage(messageA)</span><br><span class="line">    cS = bytes_to_long(cipherS.encrypt(messageA))</span><br><span class="line">    aricaSay(<span class="string">"A:"</span>, <span class="string">"&#123;:032x&#125;"</span>.format(cS))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>在出题过程中，根据自己的测试又稍微对题目更改了一下。</p><p>首先，在对aes私钥进行rsa加密的时候，一开始的e比较大，在1500左右，在测试中发现对于不同的d0值和n值，脚本的运行时间需要10分钟-3个小时，而3个小时在12个小时比赛时间里面所占比例太大，所以把e限制在1024以内，且设置为动态可变的数值。但是为了不增加难度，aeskey是固定的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt_flag</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> flag</span><br><span class="line">    aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    flag = adaptmessage(flag)</span><br><span class="line">    c = aes.encrypt(flag)</span><br><span class="line">    print(<span class="string">"Here is the encrypted flag: "</span>+str(base64.b64encode(c)))</span><br><span class="line">    <span class="comment">#b'gTAmtDzEDIYdzs6j55csresodxpsKJlOVMOmzLq8/39Vm0lJZvnrGtPBW6IKUpML'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt_key</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#e = 1667</span></span><br><span class="line">    p = getPrime(<span class="number">700</span>)</span><br><span class="line">    q = getPrime(<span class="number">1400</span>) </span><br><span class="line">    n = p*q</span><br><span class="line">    print(<span class="string">"""+------------------------------------------------------+</span></span><br><span class="line"><span class="string">|Attension! Through soical engineering, you got this: |</span></span><br><span class="line"><span class="string">+------------------------------------------------------+"""</span>)</span><br><span class="line">    phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        e=getPrime(<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">if</span>(phi%e!=<span class="number">0</span>):</span><br><span class="line">            print(<span class="string">"e = "</span>+str(e))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    d = gmpy2.invert(e,phi)</span><br><span class="line">    print(<span class="string">"n = "</span>+str(n))</span><br><span class="line">    <span class="comment">#print(d)</span></span><br><span class="line">    print(<span class="string">"Brooke's partial d: "</span>+ str(int(d) % (<span class="number">2</span>**<span class="number">1050</span>)))<span class="comment">#d有问题</span></span><br><span class="line">    enc = pow(bytes_to_long(key), e, n)</span><br><span class="line">    <span class="keyword">return</span> enc</span><br></pre></td></tr></table></figure><p>另外由于DH的g为2，所以公钥应当为大于0的整数(不管你是1或者g**y%p，都不可能是0)，所以加入了一段代码检验：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#之所以要做出这个判断，是因为公钥真的不可能为0或负数</span></span><br><span class="line"><span class="keyword">if</span>(AC &lt;=<span class="number">0</span>):</span><br><span class="line">    brookeSay(<span class="string">"You are not Arica! Her public key should not be:"</span>, AC)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line">brookeSay(<span class="string">"B:"</span>, B)</span><br><span class="line">BC = int(say2arica(<span class="string">"B: "</span>))</span><br><span class="line"><span class="keyword">if</span>(BC &lt;=<span class="number">0</span>):</span><br><span class="line">    aricaSay(<span class="string">"You are not Brooke! His public key should not be:"</span>, BC)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>另外，为了考察大家有没有细读message里面的内容，我在每条message后面都附带一个随机timestamp。每一次都需要更改这个timestamp，使得newtimestamp = (oldtimestamp+1)%256，程序里加上相应举例与提示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+---------------------------------------------------------+</span><br><span class="line">| PS:                                                     |</span><br><span class="line">| All message should be followed <span class="keyword">with</span> new timestamp!!!    |</span><br><span class="line">| newtimestamp = (oldtimestamp+<span class="number">1</span>)%<span class="number">256</span>                     |</span><br><span class="line">| Please don<span class="string">'t stuck with it:(                            |</span></span><br><span class="line"><span class="string">| For example, when you decrypt what Arica said like this:|</span></span><br><span class="line"><span class="string">| +--------------------+                                  |</span></span><br><span class="line"><span class="string">| |    Brooke said:    |                                  |</span></span><br><span class="line"><span class="string">| +--------------------+                                  |</span></span><br><span class="line"><span class="string">| I'</span>m Brooke.                                             |</span><br><span class="line">| timestamp:<span class="number">112</span>                                           |</span><br><span class="line">| You should encrypt this message to Arica:               |</span><br><span class="line">| +---------------------+                                 |</span><br><span class="line">| |    Say to Arica:    |                                 |</span><br><span class="line">| +---------------------+                                 |</span><br><span class="line">| I<span class="string">'m Brooke.                                             |</span></span><br><span class="line"><span class="string">| timestamp:113                                           |</span></span><br><span class="line"><span class="string">+---------------------------------------------------------+</span></span><br></pre></td></tr></table></figure><p>请大家不要太纠结timestamp的意义，这个机制是Arica和Brooke确保不被中间人攻击的机制，假设Arica和Brooke的时戳是同步的，对话中每次附加一个时戳值，通过验证时戳与当前时间是否相同来过关。但是如果是采用真正的时间的话，攻击成功的概率就更小了，所以简化一下，就生成一个固定的256位随机数。同时，中间人修改信息需要时间，并把修改后的时间替换发给另一方。这时候我们假设中间人接收并重发消息的时间代价为1s，所以我们要将时戳加一。举例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#server.py</span></span><br><span class="line">messageA = questions[index]+<span class="string">b"\ntimestamp:"</span>+bytes(str((randomnum+<span class="number">1</span>)%<span class="number">256</span>),encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">messageA = adaptmessage(messageA)</span><br></pre></td></tr></table></figure><h4><span id="writeup样例">Writeup样例</span></h4><p>首先，改编server.py为client.py，和服务器进行交互。这里由于交互程序变动较大，我直接通过手动输入把Arica和Brooke的密文信息传进去，等到解出明文以后手动修改timestamp。另外为了方便起见，我传递过去的公钥为1(即私钥为0)，这样的话和Brooke以及Alice的会话密钥都是1，就比较简单了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> encryption <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    keyC = <span class="number">1</span></span><br><span class="line">    keyS = <span class="number">1</span></span><br><span class="line">    keyC = long_to_bytes(keyC).rjust(<span class="number">16</span>, <span class="string">b"\x00"</span>)</span><br><span class="line">    keyS = long_to_bytes(keyS).rjust(<span class="number">16</span>, <span class="string">b"\x00"</span>)</span><br><span class="line">    cipherC = AES.new(keyC, AES.MODE_ECB)</span><br><span class="line">    cipherS = AES.new(keyS, AES.MODE_ECB)</span><br><span class="line">    <span class="keyword">for</span> _i <span class="keyword">in</span> range(<span class="number">0</span>):<span class="comment">#5</span></span><br><span class="line">        <span class="comment">#Arica说话了</span></span><br><span class="line">        s = int(say2brooke(<span class="string">"A: "</span>), <span class="number">16</span>)<span class="comment">#输入Arica说的话</span></span><br><span class="line">        s = long_to_bytes(s)</span><br><span class="line">        q = cipherC.decrypt(s)</span><br><span class="line">        print(q)</span><br><span class="line">        <span class="comment">#这里还是直接从外头输入吧</span></span><br><span class="line">        messageA = bytes(input(),encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        messageA += <span class="string">b"\n"</span></span><br><span class="line">        messageA += bytes(input(),encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        messageA = adaptmessage(messageA)</span><br><span class="line"></span><br><span class="line">        s=cipherC.encrypt(messageA)</span><br><span class="line">        print(hex(bytes_to_long(s))[<span class="number">2</span>:])<span class="comment">#对Brooke说的话</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#Brooke说话了</span></span><br><span class="line">        s = int(say2arica(<span class="string">"B: "</span>), <span class="number">16</span>)<span class="comment">#输入Brooke说的话</span></span><br><span class="line">        s = long_to_bytes(s)</span><br><span class="line">        a = cipherS.decrypt(s)</span><br><span class="line">        print(a)</span><br><span class="line">        <span class="comment">#这里还是直接从外头输入吧</span></span><br><span class="line">        messageB = bytes(input(),encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        messageB += <span class="string">b"\n"</span></span><br><span class="line">        messageB += bytes(input(),encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        messageB = adaptmessage(messageB)</span><br><span class="line">        </span><br><span class="line">        s=cipherS.encrypt(messageB)</span><br><span class="line">        print(hex(bytes_to_long(s))[<span class="number">2</span>:])<span class="comment">#对Arica说的话</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    <span class="comment">#Arica说出key了</span></span><br><span class="line">    s = int(say2brooke(<span class="string">"A: "</span>), <span class="number">16</span>)<span class="comment">#输入Arica说的话</span></span><br><span class="line">    s = long_to_bytes(s)</span><br><span class="line">    q = cipherC.decrypt(s)</span><br><span class="line">    key = q[<span class="number">17</span>:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range (len(key)):</span><br><span class="line">        <span class="keyword">if</span>(key[i:i+<span class="number">10</span>]==<span class="string">b'\ntimestamp'</span>):</span><br><span class="line">            key=key[:i]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    print(q)</span><br><span class="line">    print(key)</span><br><span class="line">    print(bytes_to_long(key))<span class="comment">#key</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>然后开始运行，运行截图如下：</p><p>首先收到服务器的消息:</p><p><img src="/2020/04/01/%E6%9E%81%E5%85%89%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%88%98%E9%98%9F%E8%80%83%E6%A0%B8%E5%AF%86%E7%A0%81%E5%AD%A6%E9%83%A8%E5%88%86%E8%80%83%E5%AF%9F%E7%82%B9%E4%B8%8E%E9%A2%98%E8%A7%A3/1.png" alt></p><p>这些就是rsa的公钥，模数和泄露的私钥，先保存住，然后开始通信。</p><p>首先，传递的公钥都为1。然后把Arica said的内容decryption，修改timestamp后把输出给回say to Brooke。</p><p>服务器端界面：</p><p><img src="/2020/04/01/%E6%9E%81%E5%85%89%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%88%98%E9%98%9F%E8%80%83%E6%A0%B8%E5%AF%86%E7%A0%81%E5%AD%A6%E9%83%A8%E5%88%86%E8%80%83%E5%AF%9F%E7%82%B9%E4%B8%8E%E9%A2%98%E8%A7%A3/2.png" alt="2"></p><p>decryption.py运行界面：</p><p><img src="/2020/04/01/%E6%9E%81%E5%85%89%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%88%98%E9%98%9F%E8%80%83%E6%A0%B8%E5%AF%86%E7%A0%81%E5%AD%A6%E9%83%A8%E5%88%86%E8%80%83%E5%AF%9F%E7%82%B9%E4%B8%8E%E9%A2%98%E8%A7%A3/image-20200402131956740.png" alt="image-20200402131956740"></p><p>一直运行下去：</p><p><img src="/2020/04/01/%E6%9E%81%E5%85%89%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%88%98%E9%98%9F%E8%80%83%E6%A0%B8%E5%AF%86%E7%A0%81%E5%AD%A6%E9%83%A8%E5%88%86%E8%80%83%E5%AF%9F%E7%82%B9%E4%B8%8E%E9%A2%98%E8%A7%A3/3.png" alt="3"></p><p>直到最后得到key:</p><p><img src="/2020/04/01/%E6%9E%81%E5%85%89%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%88%98%E9%98%9F%E8%80%83%E6%A0%B8%E5%AF%86%E7%A0%81%E5%AD%A6%E9%83%A8%E5%88%86%E8%80%83%E5%AF%9F%E7%82%B9%E4%B8%8E%E9%A2%98%E8%A7%A3/4.png" alt="4"></p><p>把key的部分截取下来，转换为数字，然后根据已有的e，n，partial d来解出aeskey：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">e=<span class="number">863</span></span><br><span class="line">n = <span class="number">100518394843898371534434468452366727877002363101196571557097132988734353726584916462381290904798733002716305256677572628142627545744681541293793069726231800754314572981168235829239563613754713724345581918566947492170647540708428013292098065584617876680109166595710006367308500341766024651457023537770009981295726110940010220082434490215229951191714998895277291076151298363584672162765486380515325199053994651202708865071379999942193926154807059329464291992287421875356468218685095369057734586073271903432589401520355996027480658214090147502829069822606753125953586123331154015992246394834867237734405963056883227552074835515815968441</span></span><br><span class="line">c=<span class="number">86032824638305503499105979004374728344861493802341583733786447138684660694449673826205271902766363026345759436852747743967254218765160248630402258125202844303276381357264903281385470521070161164325276902001627351570675438339067652784355957225763207341000628151024518554862922220201109512940053316358078220681816224518400117972877854801506805929902506832781106133167532327833813179558969694268634413548545525533605595649634856393268111552838570383386406869870266457914799472663817890880697043874427042958587244568923338441053981863674366842769379075373006984522023718553749977766836594738859315852333132093474709715377682153430675891</span></span><br><span class="line">d0=<span class="number">8429433927120666131169351623736961178529851960373209550653840828920672665447032524933438956407503522388445988812739437427277858013428300926608147855795349674824173869269407061090165202002106353884034590344852857623737262477675587193006629765892565228448265429521617733861051151345083787592170864896543517637252788111</span></span><br><span class="line"></span><br><span class="line">d = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">0</span>,e):</span><br><span class="line">    <span class="keyword">print</span> k</span><br><span class="line">    X = var(<span class="string">'X'</span>)</span><br><span class="line">    results = solve_mod([e*d0*X - k*(n*X-X*X-n+X) == X], <span class="number">2</span>**<span class="number">1050</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> results:</span><br><span class="line">        p0 = ZZ(x[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> is_prime(p0) <span class="keyword">and</span> gcd(n,p0)!=<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">print</span> p0</span><br><span class="line">            q0 = n//p0</span><br><span class="line">            phi=(q0<span class="number">-1</span>)*(p0<span class="number">-1</span>)</span><br><span class="line">            d = inverse_mod(e,phi)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span>(d!=<span class="number">0</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> d</span><br><span class="line">m = pow(c,d,n)</span><br><span class="line"><span class="keyword">print</span> m</span><br></pre></td></tr></table></figure><p>运行结果如图：</p><p><img src="/2020/04/01/%E6%9E%81%E5%85%89%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%88%98%E9%98%9F%E8%80%83%E6%A0%B8%E5%AF%86%E7%A0%81%E5%AD%A6%E9%83%A8%E5%88%86%E8%80%83%E5%AF%9F%E7%82%B9%E4%B8%8E%E9%A2%98%E8%A7%A3/5.png" alt="5"></p><p>得到aeskey以后解密flag，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> (</span><br><span class="line">    bytes_to_long,</span><br><span class="line">    long_to_bytes,</span><br><span class="line">)</span><br><span class="line">key_in_num = <span class="number">137504889148498708381160600835355727692</span></span><br><span class="line">encryptedflag = <span class="string">b'gTAmtDzEDIYdzs6j55csresodxpsKJlOVMOmzLq8/39Vm0lJZvnrGtPBW6IKUpML'</span></span><br><span class="line">c = base64.b64decode(encryptedflag)</span><br><span class="line">key = long_to_bytes(key_in_num)</span><br><span class="line">print(key)</span><br><span class="line">aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">flag = aes.decrypt(c)</span><br><span class="line">print(<span class="string">"Here is the decrypted flag: "</span>+str(flag))</span><br></pre></td></tr></table></figure><p>最终得到flag</p><p><img src="/2020/04/01/%E6%9E%81%E5%85%89%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%88%98%E9%98%9F%E8%80%83%E6%A0%B8%E5%AF%86%E7%A0%81%E5%AD%A6%E9%83%A8%E5%88%86%E8%80%83%E5%AF%9F%E7%82%B9%E4%B8%8E%E9%A2%98%E8%A7%A3/6.png" alt="6"></p><h6><span id="参考资料">参考资料：</span></h6><p>[1]王小云,刘明洁.格密码学研究[J].密码学报,2014,1(01):13-27.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关键词：DH密钥交换协议，Coppersmith攻击，混合密码通信，rsa及aes编程。&lt;/p&gt;
&lt;h4&gt;&lt;span id=&quot;题目&quot;&gt;题目&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/2020/04/01/%E6%9E%81%E5%85%89%E5%AE%9E%E9%
      
    
    </summary>
    
    
      <category term="auroralab" scheme="https://life-extension.github.io/categories/auroralab/"/>
    
    
      <category term="project" scheme="https://life-extension.github.io/tags/project/"/>
    
      <category term="competition" scheme="https://life-extension.github.io/tags/competition/"/>
    
      <category term="auroralab" scheme="https://life-extension.github.io/tags/auroralab/"/>
    
  </entry>
  
  <entry>
    <title>Coppersmith攻击方式小结</title>
    <link href="https://life-extension.github.io/2020/03/29/Coppersmith%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F%E5%B0%8F%E7%BB%93/"/>
    <id>https://life-extension.github.io/2020/03/29/Coppersmith%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F%E5%B0%8F%E7%BB%93/</id>
    <published>2020-03-29T14:54:22.000Z</published>
    <updated>2020-05-06T09:43:44.066Z</updated>
    
    <content type="html"><![CDATA[<p>关键词：rsa，coppersmith攻击。</p><p>CopperSmith攻击的种类真的很多，以下是我归纳的几种常见形式：</p><h4><span id="一道新的例题p的高位和地位泄露">一道新的例题——p的高位和地位泄露</span></h4><p>摘自：Securinets CTF Quals 2020 - Destruction</p><p>题目中提及MSB寓意即最高比特位，LSB即最低比特位，根据铜匠攻击即可,sage脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">size = <span class="number">512</span></span><br><span class="line">sizep=<span class="number">256</span></span><br><span class="line">knownbits= <span class="number">134</span></span><br><span class="line">N=<span class="number">14086160291425342283520344380411983364812792954622400251334758082442316624175006850950987254617679940795136231914925367368535278968830499182004816257654049</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#we need to define an polynomial == 0 (mod p) that gives us the missing part (x)</span></span><br><span class="line"><span class="comment"># f_p(x) = x*2**(knownbits/2) + p_msb + p_lsb</span></span><br><span class="line"><span class="comment"># it's not monic so we need to divide by 2**(knownbits/2)</span></span><br><span class="line"><span class="comment"># set R = 2**(knownbits/2) and invert it modulo N</span></span><br><span class="line"></span><br><span class="line">R = <span class="number">2</span>**(knownbits/<span class="number">2</span>)<span class="comment">#从第68位开始测试</span></span><br><span class="line">invR = inverse_mod(R,N)</span><br><span class="line"><span class="comment">#补齐两边</span></span><br><span class="line">p_msb = <span class="number">251000163339563476196</span> &lt;&lt; (sizep-knownbits/<span class="number">2</span><span class="number">-1</span>)</span><br><span class="line">p_lsb=int(<span class="string">'2567fcb8c35e6dc63'</span>,<span class="number">16</span>)</span><br><span class="line"><span class="comment">#setup coppersmith</span></span><br><span class="line">F.&lt;x&gt; = PolynomialRing(Zmod(N))</span><br><span class="line"><span class="comment">#define the poly in x modulo p</span></span><br><span class="line">f = x + (p_msb+p_lsb)*invR</span><br><span class="line"><span class="comment">#solve it</span></span><br><span class="line">x0 = f.small_roots(X=<span class="number">2</span>^(sizep-knownbits)<span class="number">-1</span>, beta=<span class="number">0.44</span>, epsilon=<span class="number">1</span>/<span class="number">64</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"reconstructed p: &#123;:x&#125;"</span>.format(Integer(x0*R)+p_msb+p_lsb))</span><br></pre></td></tr></table></figure><p>在这道题目中，p的高位和地位比特都被泄露，可以解出rsa明文。</p><h4><span id="引申与补充">引申与补充</span></h4><p>除了上述例题所述的情况外，我目前至少见过四种coppersmith攻击模式。</p><h4><span id="2019强网杯-rsa-coppersmith">2019强网杯-RSA-Coppersmith</span></h4><p>1.challenge 1</p><p><strong>已知明文的高位，是Stereotyped messages攻击 或 Lattice based attacks</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="comment">#输入n  </span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">m = randrange(n)</span><br><span class="line">c = pow(m, e, n)</span><br><span class="line">beta = <span class="number">1</span></span><br><span class="line">epsilon = beta^<span class="number">2</span>/<span class="number">7</span></span><br><span class="line">nbits = n.nbits()</span><br><span class="line">kbits = floor(nbits*(beta^<span class="number">2</span>/e-epsilon))</span><br><span class="line">mbar = m &amp; (<span class="number">2</span>^nbits<span class="number">-2</span>^kbits)</span><br><span class="line">c = <span class="number">0x1f6f6a8e61f7b5ad8bef738f4376a96724192d8da1e3689dec7ce5d1df615e0910803317f9bafb6671ffe722e0292ce76cca399f2af1952dd31a61b37019da9cf27f82c3ecd4befc03c557efe1a5a29f9bb73c0239f62ed951955718ac0eaa3f60a4c415ef064ea33bbd61abe127c6fc808c0edb034c52c45bd20a219317fb75</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> <span class="string">"upper %d bits (of %d bits) is given"</span> % (nbits-kbits, nbits)</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = (mbar + x)^e - c </span><br><span class="line"><span class="keyword">print</span> m</span><br><span class="line"> </span><br><span class="line">x0 = f.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">1</span>)[<span class="number">0</span>]  <span class="comment"># find root &lt; 2^kbits with factor = n1</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> mbar + x0</span><br></pre></td></tr></table></figure><p>2.challenge 2</p><p><strong>已知p的高位，Factoring with High Bits Known</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">0x5894f869d1aecee379e2cb60ff7314d18dbd383e0c9f32e7f7b4dc8bd47535d4f3512ce6a23b0251049346fede745d116ba8d27bcc4d7c18cfbd86c7d065841788fcd600d5b3ac5f6bb1e111f265994e550369ddd86e20f615606bf21169636d153b6dfee4472b5a3cb111d0779d02d9861cc724d389eb2c07a71a7b3941da7dL</span></span><br><span class="line">p_fake = <span class="number">0x5d33504b4e3bd2ffb628b5c447c4a7152a9f37dc4bcc8f376f64000fa96eb97c0af445e3b2c03926a4aa4542918c601000000000000000000000000000000000L</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#pbits = 2048</span></span><br><span class="line">pbits = p_fake.nbits()</span><br><span class="line"><span class="comment">#kbits = 900</span></span><br><span class="line">kbits = <span class="number">128</span>  <span class="comment">#p失去的低位</span></span><br><span class="line">pbar = p_fake &amp; (<span class="number">2</span>^pbits<span class="number">-2</span>^kbits)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"upper %d bits (of %d bits) is given"</span> % (pbits-kbits, pbits)</span><br><span class="line"> </span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x + pbar</span><br><span class="line"> </span><br><span class="line">x0 = f.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.4</span>)[<span class="number">0</span>]  <span class="comment"># find root &lt; 2^kbits with factor &gt;= n^0.3</span></span><br><span class="line">p= x0 + pbar</span><br><span class="line"><span class="keyword">print</span> p</span><br></pre></td></tr></table></figure><p>3.challenge 3</p><p><strong>已知私钥的512位的低位 Partial Key Exposure Attack(部分私钥暴露攻击)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partial_p</span><span class="params">(p0, kbits, n)</span>:</span></span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    nbits = n.nbits()</span><br><span class="line">    f = <span class="number">2</span>^kbits*x + p0 </span><br><span class="line">    f = f.monic()</span><br><span class="line">    roots = f.small_roots(X=<span class="number">2</span>^(nbits//<span class="number">2</span>-kbits), beta=<span class="number">0.3</span>)  <span class="comment"># find root &lt; 2^(nbits//2-kbits) with factor &gt;= n^0.3</span></span><br><span class="line">    <span class="keyword">if</span> roots:</span><br><span class="line">        x0 = roots[<span class="number">0</span>]</span><br><span class="line">        p = gcd(<span class="number">2</span>^kbits*x0 + p0, n)</span><br><span class="line">        <span class="keyword">return</span> ZZ(p)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_p</span><span class="params">(d0, kbits, e, n)</span>:</span></span><br><span class="line">    X = var(<span class="string">'X'</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> xrange(<span class="number">1</span>, e+<span class="number">1</span>):</span><br><span class="line">        results = solve_mod([e*d0*X - k*X*(n-X+<span class="number">1</span>) + k*n == X], <span class="number">2</span>^kbits)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> results:</span><br><span class="line">            p0 = ZZ(x[<span class="number">0</span>])</span><br><span class="line">            p = partial_p(p0, kbits, n)</span><br><span class="line">            <span class="keyword">if</span> p:</span><br><span class="line">                <span class="keyword">return</span> p</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n = <span class="number">0xd463feb999c9292e25acd7f98d49a13413df2c4e74820136e739281bb394a73f2d1e6b53066932f50a73310360e5a5c622507d8662dadaef860b3266222129fd645eb74a0207af9bd79a9794f4bd21f32841ce9e1700b0b049cfadb760993fcfc7c65eca63904aa197df306cad8720b1b228484629cf967d808c13f6caef94a9</span></span><br><span class="line">    e = <span class="number">3</span></span><br><span class="line">    d = <span class="number">0x603d033f2ef6c759aec839f132a45215fc8a635b757f3951a731fe60bc6729b3bcf819b57abfcaba3a93e9edef766c0d499cad3f7adb306bcf1645cfb63400e3</span></span><br><span class="line">    beta = <span class="number">0.5</span></span><br><span class="line">    epsilon = beta^<span class="number">2</span>/<span class="number">7</span></span><br><span class="line">    nbits = n.nbits()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"nbits:%d:"</span>%(nbits) </span><br><span class="line">    <span class="comment">#kbits = floor(nbits*(beta^2+epsilon))</span></span><br><span class="line">    kbits = nbits - d.nbits()<span class="number">-1</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"kbits:%d"</span>%(kbits)</span><br><span class="line">    d0 = d &amp; (<span class="number">2</span>^kbits<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"lower %d bits (of %d bits) is given"</span> % (kbits, nbits)</span><br><span class="line">    p = find_p(d0, kbits, e, n </span><br><span class="line">    <span class="keyword">print</span> <span class="string">"found p: %d"</span> % p</span><br><span class="line">    q = n//p</span><br><span class="line">    <span class="keyword">print</span> d</span><br><span class="line"><span class="keyword">print</span> inverse_mod(e, (p<span class="number">-1</span>)*(q<span class="number">-1</span>))</span><br></pre></td></tr></table></figure><h4><span id="私钥泄露">私钥泄露</span></h4><p>这部分学习的是在<a href="https://ctftime.org/tasks/?tags=crypto&hidden-tags=crypto" target="_blank" rel="noopener">网上</a>看到的一道题目的一篇<a href="https://github.com/p4-team/ctf/tree/master/2019-09-21-dragonctf/rsachained" target="_blank" rel="noopener">wp</a>写的，都说密钥时现代密码的弱点，所以rsa私钥部分泄露原来也可以导致对rsa的铜匠攻击！这部分的方程倒不难推算，因此我也出了一道和私钥泄露有关的题目,<a href="../极光实验室战队考核密码学部分考察点与题解">题解</a>也在博客里。这里把sage脚本也放出来吧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">e=<span class="number">863</span></span><br><span class="line">n = <span class="number">100518394843898371534434468452366727877002363101196571557097132988734353726584916462381290904798733002716305256677572628142627545744681541293793069726231800754314572981168235829239563613754713724345581918566947492170647540708428013292098065584617876680109166595710006367308500341766024651457023537770009981295726110940010220082434490215229951191714998895277291076151298363584672162765486380515325199053994651202708865071379999942193926154807059329464291992287421875356468218685095369057734586073271903432589401520355996027480658214090147502829069822606753125953586123331154015992246394834867237734405963056883227552074835515815968441</span></span><br><span class="line">c=<span class="number">86032824638305503499105979004374728344861493802341583733786447138684660694449673826205271902766363026345759436852747743967254218765160248630402258125202844303276381357264903281385470521070161164325276902001627351570675438339067652784355957225763207341000628151024518554862922220201109512940053316358078220681816224518400117972877854801506805929902506832781106133167532327833813179558969694268634413548545525533605595649634856393268111552838570383386406869870266457914799472663817890880697043874427042958587244568923338441053981863674366842769379075373006984522023718553749977766836594738859315852333132093474709715377682153430675891</span></span><br><span class="line">d0=<span class="number">8429433927120666131169351623736961178529851960373209550653840828920672665447032524933438956407503522388445988812739437427277858013428300926608147855795349674824173869269407061090165202002106353884034590344852857623737262477675587193006629765892565228448265429521617733861051151345083787592170864896543517637252788111</span></span><br><span class="line"></span><br><span class="line">d = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">0</span>,e):</span><br><span class="line">    <span class="keyword">print</span> k</span><br><span class="line">    X = var(<span class="string">'X'</span>)</span><br><span class="line">    results = solve_mod([e*d0*X - k*(n*X-X*X-n+X) == X], <span class="number">2</span>**<span class="number">1050</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> results:</span><br><span class="line">        p0 = ZZ(x[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> is_prime(p0) <span class="keyword">and</span> gcd(n,p0)!=<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">print</span> p0</span><br><span class="line">            q0 = n//p0</span><br><span class="line">            phi=(q0<span class="number">-1</span>)*(p0<span class="number">-1</span>)</span><br><span class="line">            d = inverse_mod(e,phi)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span>(d!=<span class="number">0</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> d</span><br><span class="line">m = pow(c,d,n)</span><br><span class="line"><span class="keyword">print</span> m</span><br></pre></td></tr></table></figure><h4><span id="其他题目">其他题目</span></h4><p>除此以外，印象中还存在另外一些coppersmith题目，印象中我把所有解方程有关的题目都当成coppersmith了。我新人赛的时候也心血来潮自创了一题，打算放到校赛用。反正最基础的办法就是：<strong>找齐足够的方程，代入消元求解。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关键词：rsa，coppersmith攻击。&lt;/p&gt;
&lt;p&gt;CopperSmith攻击的种类真的很多，以下是我归纳的几种常见形式：&lt;/p&gt;
&lt;h4&gt;&lt;span id=&quot;一道新的例题p的高位和地位泄露&quot;&gt;一道新的例题——p的高位和地位泄露&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;摘自：S
      
    
    </summary>
    
    
      <category term="auroralab" scheme="https://life-extension.github.io/categories/auroralab/"/>
    
    
      <category term="exploration" scheme="https://life-extension.github.io/tags/exploration/"/>
    
  </entry>
  
  <entry>
    <title>安卓反混淆软件探索-deobf</title>
    <link href="https://life-extension.github.io/2020/03/19/%E5%AE%89%E5%8D%93%E5%8F%8D%E6%B7%B7%E6%B7%86%E8%BD%AF%E4%BB%B6%E6%8E%A2%E7%B4%A2-deobf/"/>
    <id>https://life-extension.github.io/2020/03/19/%E5%AE%89%E5%8D%93%E5%8F%8D%E6%B7%B7%E6%B7%86%E8%BD%AF%E4%BB%B6%E6%8E%A2%E7%B4%A2-deobf/</id>
    <published>2020-03-19T13:48:03.000Z</published>
    <updated>2020-05-18T14:24:59.295Z</updated>
    
    <content type="html"><![CDATA[<p>关键词：代码混淆，代码反混淆及其原理，代码反混淆软件测试与性能对比。</p><h2><span id="前言">前言</span></h2><p>我们的大创项目其实是分两方面进行的，一方面，我们从代码混淆的角度比较各种软件对安卓程序的加固能力；另一方面，我们着重针对OLLVM进行反混淆测试。OLLVM集成了代码混淆的几种最基本的方法：控制流平坦化，虚假控制流，指令替代等三种方式；其中控制流平坦化和虚假控制流可以混淆各个基本块之间的执行顺序，使得程序的执行流程更难读懂，但是它们有一个致命的攻破方法——符号执行。这不仅成为了每一位资深逆向人员必备的技能，而且也逐渐被开发成了自动化反混淆工具。目前市面上开源的自动化反混淆工具很少，有一款是<a href="https://github.com/CalebFenton/simplify" target="_blank" rel="noopener">针对安卓应用的simplify</a> ，另外我在github上面搜寻了OLLVM的反混淆软件，排除大部分无用的项目，最终只发现了这两个有实际价值的项目。</p><h4><span id="ollvm_de_fla"></span></h4><p>针对控制流平坦化的反混淆工具，不足之处就是只适用于带thumb2指令的ios macho格式文件，因此它的平台普适性不高，应用范围极其窄。 该项目于两年前便停止更新。</p><h4><span id="deobf"></span></h4><p>deobf主要也是针对控制流平坦化这种主流的代码混淆方式。相比ollvm_de_fla，deobf的优势多很多。首先，这是一个新兴项目，创建于大约四个月前，在四天前还曾发布了重大更新。另外，这个项目适用于linux和windows等大众平台，可以不限于thumb指令的使用，有着广泛的应用前景。在项目的说明文档中，很清楚的说明了项目的拷贝方法，安装方法和运行参数。<strong>不仅可以反混淆一般的so文件，也可以针对性的处理抖音的libcms.so文件。</strong></p><p>但是这个项目依然有着自己的不足，只适用于python3.7版本，更低级的版本不能兼容。</p><h2><span id="下载与安装">下载与安装</span></h2><p>由于deobf需要python3.7环境支持，所以需要下载python3.7，在linux下默认的环境没有python3.7，升级步骤可以参考一篇不错的<a href="https://blog.csdn.net/u014775723/article/details/85213793" target="_blank" rel="noopener">文章</a> 。后来在windows下也安装了一个，按照<a href="https://github.com/maiyao1988/deobf" target="_blank" rel="noopener">项目链接</a>下第二步的详细做法完成即可。但是这里建议把32位和64位的keystone都下下来（当然32位的比较重要）。如果运行报错很有可能是dll的原因，两个dll混搭着用应该就没有问题。</p><h2><span id="deobf反混淆原理初探">deobf反混淆原理初探</span></h2><h4><span id="基于ollvm的反混淆框架的实现">基于OLLVM的反混淆框架的实现</span></h4><p>一般的反混淆软件都会有以下几个模块:</p><p>1）<strong>基本块识别模块</strong> ：识别出有用块和无用块。经 OLLVM 控制流平展化混 淆的程序中会增加很多无用的基本块以混淆程序逻辑，这就 需要设计有效的基本块识别算法，找出有用的基本块和无用 的基本块。</p><p> 2）<strong>与程序执行流程相关模块</strong> ：确定有用块之间的前后关系，得到真实有效的程序执行路径，因为混淆程序中的很多基本块跳转逻辑并不是程序的实际执行流程。 一般采用符号执行技术。</p><p>3）<strong>指令修复模块</strong> ：修复二进制程序。在使用 NOP 指令填充无用基本块 后，为使程序正常运行，我们需要对跳转指令的跳转偏移量 进行修正；同时，还需要将 cmov 条件传送指令改写成相应 的条件跳转指令，并在其后添加一条 jmp 指令，使其跳向另 一分支。 </p><p><em>参考文献</em></p><p><em>[1]肖顺陶,周安民,刘亮,贾鹏,刘露平.<a href="http://kns.cnki.net/kcms/detail/51.1307.TP.20180319.1531.012.html." target="_blank" rel="noopener">基于符号执行的OLLVM反混淆框架</a>[J/OL].计算机应用:1-6[2020-03-22].</em></p><p><em>[2]肖顺陶,周安民,刘亮,贾鹏,刘露平.基于符号执行的底层虚拟机混淆器反混淆框架[J].计算机应用,2018,38(06):1745-1750.</em></p><h4><span id="通过ida调试确定基本块的前后关系">通过IDA调试确定基本块的前后关系</span></h4><p>这是deobf的一个突出特点，它是根据一个IDA-python脚本直接对软件执行调试，通过这里确定程序的执行流程。<a href="**https://github.com/maiyao1988/IDAScripts/blob/master/trace.py**">参考脚本 </a>。</p><p>这也就意味着，和传统采用的符号执行不同，<strong>deobf不需要虚拟执行的结果，而是实打实的进行了调试。但是这样的缺点就是不能抗反动态调试。万一一个程序加入了很多的动态调试函数，那么讲给deobf的运行效果带来很大的挑战。</strong></p><h2><span id="deobf反混淆效果">deobf反混淆效果</span></h2><h4><span id="参考">参考</span></h4><p>由于deobf的软件的基本框架和上述论文中的反混淆框架在思路上完全一致，除了确定基本块以外其他方面的实现方案上大致相同，因此在这里先引用一下论文中有关混淆效果的数据，如下：</p><p><img src="/2020/03/19/%E5%AE%89%E5%8D%93%E5%8F%8D%E6%B7%B7%E6%B7%86%E8%BD%AF%E4%BB%B6%E6%8E%A2%E7%B4%A2-deobf/image-20200322231048178.png" alt="image-20200322231048178"></p><p><img src="/2020/03/19/%E5%AE%89%E5%8D%93%E5%8F%8D%E6%B7%B7%E6%B7%86%E8%BD%AF%E4%BB%B6%E6%8E%A2%E7%B4%A2-deobf/image-20200322231036631.png" alt="image-20200322231036631"></p><h4><span id="验证">验证</span></h4><p>为了验证OLLVM的反混淆效果是否真的和论文一致，我使用项目中提供给测试使用的so文件进行混淆，这个项目运用了</p><p>ida查看混淆后的控制流图，十分复杂庞大：</p><p><img src="/2020/03/19/%E5%AE%89%E5%8D%93%E5%8F%8D%E6%B7%B7%E6%B7%86%E8%BD%AF%E4%BB%B6%E6%8E%A2%E7%B4%A2-deobf/image-20200320000323204.png" alt="image-20200320000323204"></p><p>而反编译后的伪C代码如下，十分复杂，出现多个嵌套的while循环和if分支语句：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">JNI_OnLoad</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v2; <span class="comment">// r6</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// r11</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v4; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">bool</span> v5; <span class="comment">// zf</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// [sp+8h] [bp-30h]</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// [sp+Ch] [bp-2Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// [sp+10h] [bp-28h]</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// [sp+14h] [bp-24h]</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// [sp+18h] [bp-20h]</span></span><br><span class="line"></span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  v1 = (*(<span class="keyword">int</span> (**)(<span class="keyword">void</span>))(*(_DWORD *)a1 + <span class="number">24</span>))();</span><br><span class="line">  v2 = <span class="number">189500648</span>;</span><br><span class="line">  v8 = v1;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_3:</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v3 = v1;</span><br><span class="line">      v4 = v2;</span><br><span class="line">      <span class="keyword">if</span> ( v2 &gt; <span class="number">941059666</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v2 &gt; <span class="number">-526232813</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v2 == <span class="number">-526232812</span> )</span><br><span class="line">        &#123;</span><br><span class="line">LABEL_2:</span><br><span class="line">          v2 = <span class="number">1535406375</span>;</span><br><span class="line">          v1 = <span class="number">-1</span>;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v2 == <span class="number">189500648</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v2 = <span class="number">2058077166</span>;</span><br><span class="line">          <span class="keyword">if</span> ( v8 )</span><br><span class="line">            v2 = <span class="number">1482189424</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v2 = <span class="number">1535406375</span>;</span><br><span class="line">        v1 = <span class="number">65540</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v4 == <span class="number">-1125020146</span> )</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        v5 = v4 == <span class="number">-724953770</span>;</span><br><span class="line">LABEL_10:</span><br><span class="line">        v1 = v3;</span><br><span class="line">        v2 = v4;</span><br><span class="line">        <span class="keyword">if</span> ( v5 )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_2;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v2 &lt;= <span class="number">1535406374</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v2 == <span class="number">941059667</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v11 = (*(<span class="keyword">int</span> (__fastcall **)(<span class="keyword">int</span>, <span class="keyword">const</span> <span class="keyword">char</span> *))(*(_DWORD *)v9 + <span class="number">24</span>))(v9, <span class="string">"com/douyu/lib/http/JniMakeUrl"</span>);</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">1448204801</span>; ; i = <span class="number">1422645221</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v2 = <span class="number">-1125020146</span>;</span><br><span class="line">          <span class="keyword">if</span> ( i &gt; <span class="number">1398646745</span> )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_36;</span><br><span class="line">LABEL_33:</span><br><span class="line">          <span class="keyword">while</span> ( i == <span class="number">193258894</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v5 = (*(<span class="keyword">int</span> (__fastcall **)(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">char</span> **, <span class="keyword">signed</span> <span class="keyword">int</span>))(*(_DWORD *)v9 + <span class="number">860</span>))(v9, v11, off_45004, <span class="number">7</span>) == <span class="number">0</span>;</span><br><span class="line">            i = <span class="number">-686378191</span>;</span><br><span class="line">            <span class="keyword">if</span> ( !v5 )</span><br><span class="line">              i = <span class="number">-986576434</span>;</span><br><span class="line">            <span class="keyword">if</span> ( i &gt; <span class="number">1398646745</span> )</span><br><span class="line">            &#123;</span><br><span class="line">LABEL_36:</span><br><span class="line">              <span class="keyword">while</span> ( <span class="number">2</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="keyword">while</span> ( i == <span class="number">1448204801</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                  i = <span class="number">193258894</span>;</span><br><span class="line">                  <span class="keyword">if</span> ( !v11 )</span><br><span class="line">                    i = <span class="number">1398646746</span>;</span><br><span class="line">                  <span class="keyword">if</span> ( i &lt;= <span class="number">1398646745</span> )</span><br><span class="line">                    <span class="keyword">goto</span> LABEL_33;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ( i == <span class="number">1398646746</span> )</span><br><span class="line">                &#123;</span><br><span class="line">LABEL_32:</span><br><span class="line">                  i = <span class="number">1422645221</span>;</span><br><span class="line">                  v2 = <span class="number">-724953770</span>;</span><br><span class="line">                  <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> ( i == <span class="number">1422645221</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                v1 = v3;</span><br><span class="line">                <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">LABEL_47:</span><br><span class="line">                ;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> ( i == <span class="number">-986576434</span> )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_32;</span><br><span class="line">          <span class="keyword">if</span> ( i != <span class="number">-686378191</span> )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_47;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      v5 = v2 == <span class="number">1482189424</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_10;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v2 != <span class="number">2058077166</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v2 = <span class="number">941059667</span>;</span><br><span class="line">    v9 = v10;</span><br><span class="line">    <span class="keyword">if</span> ( !v10 )</span><br><span class="line">      v2 = <span class="number">-526232812</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v2 != <span class="number">1535406375</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_3;</span><br><span class="line">  result = _stack_chk_guard - v12;</span><br><span class="line">  <span class="keyword">if</span> ( _stack_chk_guard == v12 )</span><br><span class="line">    result = v3;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行如下反混淆指令，反混淆其中的JNI_Onload函数：</p><p><code>python deobf.py libmakeurl2.4.9.so url.so ins-url.trc 0x0000342C 0x00003668 1</code></p><p>以下是对各个参数的注释：</p><p>待处理的混淆文件：libmakeurl2.4.9.so</p><p>反混淆后输出的文件：url.so</p><p> 通过ida调试时产生的目标函数的跟踪文件（可以跟踪关键指令或函数） ：ins-url.trc</p><p>混淆代码段起始部分偏移：0x0000342C（JNI_Onload函数开头）</p><p>混淆代码段结束部分偏移：0x00003668（JNI_Onload函数结尾）</p><p>目标函数是否是thumb：是</p><p>反混淆后的控制流图，程序执行流程变得十分清晰：</p><p><img src="/2020/03/19/%E5%AE%89%E5%8D%93%E5%8F%8D%E6%B7%B7%E6%B7%86%E8%BD%AF%E4%BB%B6%E6%8E%A2%E7%B4%A2-deobf/image-20200320000158559.png" alt="image-20200320000158559"></p><p>反混淆后的函数也变得简短易懂：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">JNI_OnLoad</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// r11</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// ST0C_4</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [sp+10h] [bp-28h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [sp+14h] [bp-24h]</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [sp+18h] [bp-20h]</span></span><br><span class="line"></span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  (*(<span class="keyword">void</span> (**)(<span class="keyword">void</span>))(*(_DWORD *)a1 + <span class="number">24</span>))();</span><br><span class="line">  v2 = v4;</span><br><span class="line">  v5 = (*(<span class="keyword">int</span> (__fastcall **)(<span class="keyword">int</span>))(*(_DWORD *)v4 + <span class="number">24</span>))(v4);</span><br><span class="line">  (*(<span class="keyword">int</span> (__fastcall **)(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">char</span> **, <span class="keyword">signed</span> <span class="keyword">int</span>))(*(_DWORD *)v2 + <span class="number">860</span>))(v2, v5, off_45004, <span class="number">7</span>);</span><br><span class="line">  result = _stack_chk_guard - v6;</span><br><span class="line">  <span class="keyword">if</span> ( _stack_chk_guard == v6 )</span><br><span class="line">    result = v1;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="其他ollvm反混淆软件常用技术">其他OLLVM反混淆软件常用技术</span></h2><h4><span id="符号执行">符号执行</span></h4><p>deobf的反混淆主要借助与符号执行技术，符号执行技术的核心思想是使用符号值来表示程序的输入数据，并将程序的运算过程逐指令或逐语句地转换为数学表达式，在CFG的基础上生成符号执行树，并为每一条路径建立一系列以输入数据为变量的符号表达式。在符号执行过程中，每当遇到判断与跳转语句时，deobf便会将当前执行路径的路径约束收集到该路径的约束集合中。通过使用约束求解器对约束集合进行求解，可以得到该条路径的可达性：如果约束求解的结果有解，表示该条路径可达，否则表示该条路径不可达，在时间与计算资源足够的理想情况下，符号执行能够遍历目标程序的所有路径并判断其可达性。</p><p>其中，路径约束是指程序分支指令中与输入符号相关的分支条件的取值，是一系列不具有量词的布尔型公式。而路径约束集合则被用来存储每一条程序路径上收集到的约束，用“与”操作进行连接。</p><p>借用软件安全课程的图片，对于下图示例程序1：</p><p><img src="/2020/03/19/%E5%AE%89%E5%8D%93%E5%8F%8D%E6%B7%B7%E6%B7%86%E8%BD%AF%E4%BB%B6%E6%8E%A2%E7%B4%A2-deobf/image-20200319232030997.png" alt="image-20200319232030997"></p><p>首先画出控制流图，切割基本块。然后计算得函数外部的输入变量数为2，我们只需要设置两个输入变量X,Y。程序中的所有都用与X,Y相关的式子代替。</p><p><img src="/2020/03/19/%E5%AE%89%E5%8D%93%E5%8F%8D%E6%B7%B7%E6%B7%86%E8%BD%AF%E4%BB%B6%E6%8E%A2%E7%B4%A2-deobf/image-20200319233648011.png" alt="image-20200319233648011"></p><p>然后进入函数顺序执行第2-4行，不出现分叉，在第五行代码时，由于是判断语句，符号执行树出现分支，满足分支条件的作为左子树，不满足的作为右子树，左右子树又继续根据路径约束进一步细化，出现更多分支。最终扩展出的符号执行树如图：</p><p><img src="/2020/03/19/%E5%AE%89%E5%8D%93%E5%8F%8D%E6%B7%B7%E6%B7%86%E8%BD%AF%E4%BB%B6%E6%8E%A2%E7%B4%A2-deobf/image-20200319233036906.png" alt="image-20200319233036906"></p><p>最后，通过将X、Y变量代入，计算叶子节点的约束集合是否为真，则可以知道哪些路径是可达的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关键词：代码混淆，代码反混淆及其原理，代码反混淆软件测试与性能对比。&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;前言&quot;&gt;前言&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;我们的大创项目其实是分两方面进行的，一方面，我们从代码混淆的角度比较各种软件对安卓程序的加固能力；另一方面，我们着重针对OLL
      
    
    </summary>
    
    
      <category term="project" scheme="https://life-extension.github.io/categories/project/"/>
    
    
      <category term="project" scheme="https://life-extension.github.io/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>记一次安卓代码加固软件的测试过程</title>
    <link href="https://life-extension.github.io/2020/03/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%89%E5%8D%93%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E7%A0%94%E7%A9%B6%E8%BF%87%E7%A8%8B/"/>
    <id>https://life-extension.github.io/2020/03/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%89%E5%8D%93%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E7%A0%94%E7%A9%B6%E8%BF%87%E7%A8%8B/</id>
    <published>2020-03-13T03:53:13.000Z</published>
    <updated>2020-05-06T10:02:38.746Z</updated>
    
    <content type="html"><![CDATA[<p>关键词：代码加固，软件测试，原理分析，过程分析。</p><p>在大创项目的实践中，我们对市面上的一些安卓代码加固软件进行了采集，经过搜集，发现了几类代码加固方法并分组进行研究。我发现很多代码加固软件都是对java字节码进行混淆与加固，另外一些则选择对原生语言和so文件进行加固，而我打算研究的这一款软件，则是对资源文件进行加固，它就是<a href="https://github.com/shwenzhang/AndResGuard/blob/master/README.zh-cn.md" target="_blank" rel="noopener">AndResGuard</a>。</p><h3><span id="混淆原理">混淆原理</span></h3><p>大致上来说就是apk在调用资源的时候不是通过资源名来调用的，而是通过一个资源ID值来调用的，因此资源名和资源ID存在一种映射关系，保存在 resources.arsc 中。而由于资源名是一种相对独立的存在方式，仅仅是为了源码的易读性，所以可以用用更短的资源名取代，从而减少apk文件的体积；而新的代号没有任何语义上的可读性，所以可以达到混淆的目的。而且由于这种映射关系是独立于安卓编译过程的，所以我们可以在整个apk的基础上进行操作，通过实现对apk的解压并修改资源文件和 resources.arsc 进行混淆。</p><p>项目贡献者的说明文章见<a href="https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&mid=208135658&idx=1&sn=ac9bd6b4927e9e82f9fa14e396183a8f#rd" target="_blank" rel="noopener">这里</a>。</p><h3><span id="混淆过程">混淆过程</span></h3><p>为了统一研究对象，采用的混淆软件是我第六次安卓作业后生成的apk文件:</p><p><img src="/2020/03/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%89%E5%8D%93%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E7%A0%94%E7%A9%B6%E8%BF%87%E7%A8%8B/1.png" alt></p><p>下载完整个项目以后，最重要的文件是箭头所指的jar文件，这个其实就是源码编译以后的可执行文件了：</p><p><img src="/2020/03/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%89%E5%8D%93%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E7%A0%94%E7%A9%B6%E8%BF%87%E7%A8%8B/2.png" alt></p><p>不过还需要输入一些参数才可以运行，包括待混淆apk，混淆配置文件，输出路径，甚至可以加入签名库的路径。</p><h4><span id="配置">配置</span></h4><p>输入参数前，先更改一下混淆配置文件，打开config.xml后，我根据实际研究的情况作了如下更改。</p><p>1.<strong>设置不采用7z压缩。</strong>显然，7z压缩是这个软件集成的外部功能，一方面能更加减小程序的空间，另一方面也可以提高程序表观上的复杂程度。但是需要指出的是，7z压缩在AndResGuard中是一个比较独立的组成部分，首先在技术原理和实现方式上就有很大的不同，而且7z压缩更像是对混淆后资源文件的一种打包技术，就像是把安卓源码混淆后再进行打包一样，有着独立的压缩和解压方法，并不涉及任何混淆的思想，也不需要任何的反混淆技术。而如果采用7z压缩后再进行分析，就相当于采用两种技术加固软件后和其他采用一种技术加固软件的方法进行优劣比较，这种方法是不合理的。</p><p><img src="/2020/03/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%89%E5%8D%93%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E7%A0%94%E7%A9%B6%E8%BF%87%E7%A8%8B/3.png" alt></p><p>2.<strong>设置不采用签名。</strong>由于混淆前的软件没有采用签名技术，因此作为对照组，混淆后的软件也不应该采用签名技术。</p><p><img src="/2020/03/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%89%E5%8D%93%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E7%A0%94%E7%A9%B6%E8%BF%87%E7%A8%8B/4.png" alt></p><h4><span id="混淆">混淆</span></h4><p>AndResGuard的混淆是针对整个文件进行的，只需要输入如下参数即可：</p><p><img src="/2020/03/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%89%E5%8D%93%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E7%A0%94%E7%A9%B6%E8%BF%87%E7%A8%8B/5.png" alt></p><p>耗时不到5秒即完成。</p><h4><span id="混淆效果测试">混淆效果测试</span></h4><p>混淆后，从程序体积，代码可读性等两方面分析混淆效果，主要出现了如下变化：</p><p>1.<strong>体积变小。</strong>混淆后生成了另一个apk，把两个apk放在一起，可以明显的看到混淆后的apk文件体积变小，从2511kb变为2104kb。</p><p><img src="/2020/03/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%89%E5%8D%93%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E7%A0%94%E7%A9%B6%E8%BF%87%E7%A8%8B/6.png" alt></p><p>2.<strong>资源文件的可读性变复杂，资源名的失去了原有的语义。</strong>采用apk-tool对混淆前后的apk文件进行反编译。这款软件的优势在于可以把apk的文件转变为smali中间代码和资源文件源码，把 resources.arsc还原为原来的res文件夹。通过Android Studio对比整个res文件夹的结构，我们可以发现如下变化：</p><p>(1)资源名称出现变化</p><p>资源文件总量不变，名称被更短的代号取代。</p><p>以Layout文件夹为例，混淆前的前四个资源文件名称如下：</p><p><img src="/2020/03/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%89%E5%8D%93%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E7%A0%94%E7%A9%B6%E8%BF%87%E7%A8%8B/7.png" alt></p><p>而混淆后的资源文件名则被更简短的代号取代。以Layout文件夹为例，混淆后的前四个资源文件名称如下：</p><p><img src="/2020/03/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%89%E5%8D%93%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E7%A0%94%E7%A9%B6%E8%BF%87%E7%A8%8B/8.png" alt></p><p>点击混淆前和混淆后最上方的文件，发现文件的内容已经不再对应，所以可以认为这是一种无规律的命名，打乱了各个资源文件名的对应关系。</p><p>（2）资源文件中所有的引用名都被修改</p><p>在res文件夹下所有的所有资源引用中，资源名都被更改，以res\values\attrs.xml为例，混淆前我们可以获取完整的资源名称，如图：</p><p><img src="/2020/03/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%89%E5%8D%93%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E7%A0%94%E7%A9%B6%E8%BF%87%E7%A8%8B/9.png" alt></p><p>而混淆后，所有的资源名都变为了简短的代号。</p><p><img src="/2020/03/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%89%E5%8D%93%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E7%A0%94%E7%A9%B6%E8%BF%87%E7%A8%8B/10.png" alt></p><p>3.<strong>值得注意的是，源代码中所有的内容都不曾被改变，这说明AndResGuard不依赖于smali代码和编译过程。</strong>首先把apk的后缀改为rar并解压，取出dex文件采用dex2jar进行反编译，再使用jd-gui打开生成的jar文件，我们可以发现，混淆前的jar包和混淆后的jar包是完全一致的，以MainActivity为例，混淆前后完全看不出任何区别。混淆前代码如下：</p><p><img src="/2020/03/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%89%E5%8D%93%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E7%A0%94%E7%A9%B6%E8%BF%87%E7%A8%8B/11.png" alt></p><p>混淆后代码如下：</p><p><img src="/2020/03/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%89%E5%8D%93%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E7%A0%94%E7%A9%B6%E8%BF%87%E7%A8%8B/12.png" alt></p><h4><span id="运行性能测试">运行性能测试</span></h4><p>首次运行混淆后的程序时，出现如下报错：</p><p><img src="/2020/03/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%89%E5%8D%93%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E7%A0%94%E7%A9%B6%E8%BF%87%E7%A8%8B/13.png" alt></p><p>查阅<a href="https://blog.csdn.net/almosti/article/details/88586873" target="_blank" rel="noopener">资料</a>后猜测报错原因.</p><p>但测试了一遍ARM框架的软件还是不行，那么我推测，报错的原因很有可能是因为资源文件被打乱，导致虚拟机无法识别。我尝试用华为手机下载，里面的报错是：该安装包未包含任何证书，因此我可能需要考虑一下运行参数的问题了。但是在测试了除了签名之外的参数后，发现依然无法运行。但是用.android目录下的debug.keystore签名时出现报错，报错情况如下：</p><p><img src="/2020/03/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%89%E5%8D%93%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E7%A0%94%E7%A9%B6%E8%BF%87%E7%A8%8B/14.png" alt></p><p>目前暂不知错误，正在分析中。<strong>希望大家可以帮帮我！</strong>不知道是否需要其他什么文件呢。</p><h3><span id="总结">总结</span></h3><p>其实AndResGuard就是对apk包的资源 resources.arsc进行更改，使得原有的资源文件中的资源名变得更加简短而不可读。这增加了安卓逆向人员的分析难度，实现了代码混淆。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关键词：代码加固，软件测试，原理分析，过程分析。&lt;/p&gt;
&lt;p&gt;在大创项目的实践中，我们对市面上的一些安卓代码加固软件进行了采集，经过搜集，发现了几类代码加固方法并分组进行研究。我发现很多代码加固软件都是对java字节码进行混淆与加固，另外一些则选择对原生语言和so文件进行
      
    
    </summary>
    
    
      <category term="project" scheme="https://life-extension.github.io/categories/project/"/>
    
    
      <category term="project" scheme="https://life-extension.github.io/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>对OLLVM代码加固技术的改进</title>
    <link href="https://life-extension.github.io/2020/03/08/%E5%AF%B9OLLVM%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E6%8A%80%E6%9C%AF%E7%9A%84%E6%94%B9%E8%BF%9B/"/>
    <id>https://life-extension.github.io/2020/03/08/%E5%AF%B9OLLVM%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E6%8A%80%E6%9C%AF%E7%9A%84%E6%94%B9%E8%BF%9B/</id>
    <published>2020-03-08T03:41:07.000Z</published>
    <updated>2020-05-20T03:47:12.845Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="1反静态调试">1．反静态调试</span></h3><p>反静态调试可以通过花指令，代码加密，代码加壳等方式实现。</p><p>请看图1所示的一段反调试代码：</p><p><img src="/2020/03/08/%E5%AF%B9OLLVM%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E6%8A%80%E6%9C%AF%E7%9A%84%E6%94%B9%E8%BF%9B/clip_image002.jpg" alt="img"></p><p>​                                                          <center>图1 花指令代码</center></p><p>这段代码无论如何都会跳转到bb的位置，但是加入0x80以后，会让IDA产生错误的分析，从而无法还原正确的汇编代码和整个函数，在使用IDA查看汇编代码后，结果如图2：</p><p><img src="/2020/03/08/%E5%AF%B9OLLVM%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E6%8A%80%E6%9C%AF%E7%9A%84%E6%94%B9%E8%BF%9B/clip_image004.jpg" alt="img"></p><p>​           <center>图2 加入花指令代码后干扰了逆向工具对汇编代码的分析</center></p><h3><span id="2反动态调试">2．反动态调试</span></h3><p>请看图3的代码：</p><p><img src="/2020/03/08/%E5%AF%B9OLLVM%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E6%8A%80%E6%9C%AF%E7%9A%84%E6%94%B9%E8%BF%9B/clip_image006.jpg" alt="img"></p><p>​                                                     <center>图3 反动态调试代码示例</center></p><p>在这个函数中，通过CheckRemoteDebuggerPresent函数观察程序是否是在被调试状态。也可以通过INT 3达成类似功能。另外还可以通过signal函数，在程序未被响应的一定时间后跳出执行。</p><h3><span id="3反虚拟机">3．反虚拟机</span></h3><p>请看如下代码：</p><p><img src="/2020/03/08/%E5%AF%B9OLLVM%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E6%8A%80%E6%9C%AF%E7%9A%84%E6%94%B9%E8%BF%9B/clip_image008.jpg" alt="img"></p><p>​                                                  <center> 图4 反虚拟机代码示例</center></p><p>该代码利用虚拟机CPU时间周期比物理机时间周期长的特点，其中rdtsc指令读取CPU 时钟周期数，一句 cmp $0x16,%eax 的指令就是来把所处环境的时钟周期与正常物理机的时钟周期进行比较的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;1反静态调试&quot;&gt;1．反静态调试&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;反静态调试可以通过花指令，代码加密，代码加壳等方式实现。&lt;/p&gt;
&lt;p&gt;请看图1所示的一段反调试代码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/03/08/%E5%AF%B9OLLVM%
      
    
    </summary>
    
    
      <category term="project" scheme="https://life-extension.github.io/categories/project/"/>
    
    
      <category term="project" scheme="https://life-extension.github.io/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>安卓开发中遇到的坑坑洼洼</title>
    <link href="https://life-extension.github.io/2020/03/01/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91%E5%9D%91%E6%B4%BC%E6%B4%BC(%E6%8C%81%E6%9B%B4%E4%B8%AD)/"/>
    <id>https://life-extension.github.io/2020/03/01/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91%E5%9D%91%E6%B4%BC%E6%B4%BC(%E6%8C%81%E6%9B%B4%E4%B8%AD)/</id>
    <published>2020-03-01T14:18:54.000Z</published>
    <updated>2020-05-06T10:06:51.200Z</updated>
    
    <content type="html"><![CDATA[<p>关键词：安卓开发，软件测试，错误排查。</p><p>大三下学期选修了十分重要的安卓开发课程，老师让我们编写编译书中的程序并完成书后的挑战练习。但是由于Android Studio的版本问题和gradle脚本以及主程序的命名与书中不同，这次编程还是遇到了一点坑，这迫使我上网查资料，并且认真研读资源目录和gradle的源代码，以找到出错的地方。以下是我的一些发现和遇到的一些坑：</p><h4><span id="版本要匹配">版本要匹配</span></h4><p>千万不要随便改变项目根目录和app目录下的build.gradle，我更改了几个参数，导致编译通过后打包失败：</p><p>1.项目根目录下的插件版本“build:gradle:3.4.1”，这个版本号不能随便改，原因是你的AS版本不一定支持对应的gradle版本和插件版本，当然，当AS更新以后，可能旧项目中的版本不能被支持，这个时候你就需要去更改以下几个地方：</p><p>（1）项目根目录下的插件版本号，这个和AS的版本应该是一致的</p><p>（2）gradle-wrapper.properties下的distributionUrl，一定要找到这个插件版本号对应的Gradle版本号，具体参考 <a href="https://blog.csdn.net/sqf251877543/article/details/101281308" target="_blank" rel="noopener">这里</a></p><p>（3）下载对应的gradle版本，网址就是distributionUrl的地址。</p><p>2.在app目录下的build.gradle也涉及到一些版本的问题，一是compileSdkVersion不能小于某个值，否则会报错；二是minSdkVersion的更改可能会导致在某些手机上不适配，我曾经把minSdkVersion由16改为”R”,结果在虚拟机上就不能运行了，据网上资料说，只要把minSdkVersion值设为19以下，就可以适配95%以上的安卓手机。</p><p>3.版本不匹配会出现如下报错:</p><p>(1)Invalid escape sequence at line 1 column xx path $[0].name</p><p>(2)gradle project sync failed</p><p>(3)Could not find method google() for arguments [] on repository container</p><p>4.但是有时候报上述第3点的第（1）条错误时不一定是版本问题，若版本正确仍出现如上问题，应当考虑 开File-&gt;Setting-&gt;找到instant run（或者搜索）-&gt;取消Enable instant run。然后应用即可。 </p><p>5.同样的，<strong>虚拟机版本的不同</strong>也可能导致一些问题。比如对于第三章，有的手机屏幕旋转了以后会改变设备配置，从而改变Activity生命周期，但有些却不行。在测试中，Nexus 5 API 29(Android 9+)旋转不会改变Activity生命周期，也不会改变设备配置，但Nexus 5 API 27(Android 8)会。</p><h4><span id="提示无法执行">提示无法执行</span></h4><p>1.遇到了一个问题，当我使用Log.d的时候安卓提示要导入android.util.log，但是无法点击，手动输入也不行，后来发现util下面用的是Log这个包，所以有时候提示也是不正确的。</p><h4><span id="类名的对应">类名的对应</span></h4><p>1.在主控制器中，private static final String TAG这个字符串对应的值应该和主控制器名称对应，虽然在第一第二章的时候问题不大，但是使用logcat测试后会发现有很严重的异常报错。</p><h4><span id="覆盖override">覆盖@Override</span></h4><p>1.必须调用父类的同名方法，否则报错：</p><blockquote><p>Overriding method should call super.onActivityResult less… (Ctrl+F1)<br>Inspection info:Some methods, such as View#onDetachedFromWindow, require that you also call the super implementation as part of your method.  Issue id: MissingSuperCall</p></blockquote><h4><span id="中文路径">中文路径</span></h4><p>1.安卓虚拟机最好不要放在有中文的路径下，否则录屏出现如下报错：</p><blockquote><p> Emulator: emulator: ERROR: FfmpegRecorder.cpp:267: Could not open [C:\Users?????.android\avd\Nexus_5_API_27.avd\tmp.webm]: Invalid argument </p></blockquote><p>这些问号就是中文字符</p><h4><span id="android-studio平台的一些问题">Android Studio平台的一些问题</span></h4><p>1.虚拟机默认装C盘，我刚刚清出的一点空间，开了三个虚拟机，结果全满了，占了我C盘一半的空间！<a href="https://blog.csdn.net/geekqian/article/details/60145357" target="_blank" rel="noopener">解决方法</a></p><p>2.新版的Android Studio找不到DDMS, 如果只是需要查看文件，可以在View-&gt;Tools WIndows下选Device File Explorer.</p><h4><span id="logcat过滤关键词">LogCat过滤关键词</span></h4><p>1.关键错误：FATAL EXCEPTION</p><h4><span id="空指针问题">空指针问题</span></h4><p>在水平方向上运行安卓没问题，竖直方向运行安卓的时候程序终止，明显是布局的问题。LogCat报错如下：</p><blockquote><p>2020-03-07 18:49:45.296 3434-3434/com.example.geoquiz E/AndroidRuntime: FATAL EXCEPTION: main<br>    Process: com.example.geoquiz, PID: 3434<br>    java.lang.RuntimeException: Unable to start activity ComponentInfo{com.example.geoquiz/com.example.geoquiz.MainActivity}: java.lang.NullPointerException: Attempt to invoke virtual method ‘void android.widget.Button.setOnClickListener(android.view.View$OnClickListener)’ on a null object reference<br>    ……<br>    Caused by: java.lang.NullPointerException: Attempt to invoke virtual method ‘void android.widget.Button.setOnClickListener(android.view.View$OnClickListener)’ on a null object reference<br>        at com.example.geoquiz.MainActivity.onCreate(MainActivity.java:54)<br>       ……</p></blockquote><p>上网查资料，<a href="https://blog.csdn.net/qq_42618969/article/details/81141895" target="_blank" rel="noopener">参考文章</a></p><p>先去看看布局文件里面有没有id，很有可能是因为这样导致的空指针，结果发现 不知道为什么两个button的布局代码没了， 所以找不到按钮的地址 ， 形成了空指针  。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关键词：安卓开发，软件测试，错误排查。&lt;/p&gt;
&lt;p&gt;大三下学期选修了十分重要的安卓开发课程，老师让我们编写编译书中的程序并完成书后的挑战练习。但是由于Android Studio的版本问题和gradle脚本以及主程序的命名与书中不同，这次编程还是遇到了一点坑，这迫使我上网
      
    
    </summary>
    
    
      <category term="study" scheme="https://life-extension.github.io/categories/study/"/>
    
    
      <category term="study" scheme="https://life-extension.github.io/tags/study/"/>
    
  </entry>
  
  <entry>
    <title>OLLVM代码加固机制分析</title>
    <link href="https://life-extension.github.io/2020/02/24/OLLVM%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/"/>
    <id>https://life-extension.github.io/2020/02/24/OLLVM%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/</id>
    <published>2020-02-24T03:17:46.000Z</published>
    <updated>2020-05-20T03:49:08.981Z</updated>
    
    <content type="html"><![CDATA[<p>我们通过自己编写测试代码，再用OLLVM的不同指令进行加固，并逆向查看加固效果，加深对代码加固机理的了解。OLLVM目前提供的功能包括控制流平坦化（fla指令），指令替代（sub指令），代码虚拟化（bcf指令）以及虚假控制流（obf指令），接下来,我们团队对各个指令的机理进行详细的分析。</p><h3><span id="1控制流平坦化">1．控制流平坦化</span></h3><p>控制流平坦化的主要思想，就是把原本顺序执行的代码变成一个一个的基本块，并复杂化各个代码块之间的关系，使得代码的执行流程不再清晰。</p><p>OLLVM的控制流平坦化功能实现于Flattening.cpp中，主要有以下两个步骤。 </p><p>第一步：判断是否能够平展。若可以，则跳入flatten方法中执行。在函数开始，使用LowerSwitchPass去除switch，将switch结构换成if结构。保存所有的基本代码块，如果只有一个基本代码块，则不进行处理；如果第一个基本块的末尾是有条件的跳转指令，那么需要将它分割开，并且将它保存到origBB。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Lower switch</span></span><br><span class="line">  FunctionPass *lower = createLowerSwitchPass();</span><br><span class="line">          lower-&gt;runOnFunction(*f);</span><br></pre></td></tr></table></figure><p>第二步：创建两个基本块，存放循环头和尾的指令。然后将first bb移到到loopEntry的前面，并且创建一条跳转指令，从first bb跳到loopEntry。紧接着创建了一条从loopEnd跳到loopEntry的指令。最后，创建了switch指令和switch default块，并且创建相应的跳转。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create main loop</span></span><br><span class="line">  loopEntry = BasicBlock::Create(f-&gt;getContext(), <span class="string">"loopEntry"</span>, f, insert);</span><br><span class="line">  loopEnd = BasicBlock::Create(f-&gt;getContext(), <span class="string">"loopEnd"</span>, f, insert);</span><br><span class="line">  load = <span class="keyword">new</span> LoadInst(switchVar, <span class="string">"switchVar"</span>, loopEntry);</span><br><span class="line">  <span class="comment">// Move first BB on top</span></span><br><span class="line">  insert-&gt;moveBefore(loopEntry);</span><br><span class="line">  BranchInst::Create(loopEntry, insert);</span><br><span class="line">  <span class="comment">// loopEnd jump to loopEntry</span></span><br><span class="line">  BranchInst::Create(loopEntry, loopEnd);</span><br><span class="line">  BasicBlock *swDefault =</span><br><span class="line">      BasicBlock::Create(f-&gt;getContext(), <span class="string">"switchDefault"</span>, f, loopEnd);</span><br><span class="line">  BranchInst::Create(loopEnd, swDefault);</span><br><span class="line">  <span class="comment">// Create switch instruction itself and set condition</span></span><br><span class="line">  switchI = SwitchInst::Create(&amp;*f-&gt;<span class="built_in">begin</span>(), swDefault, <span class="number">0</span>, loopEntry);</span><br><span class="line">  switchI-&gt;setCondition(load);</span><br></pre></td></tr></table></figure><p>第三步，删除first bb的跳转指令，改为跳转到loopEntry,将所有的基本块加入switch结构.接下来是根据原先的跳转来计算switch变量。</p><p>（1）若为没有后继（return BB）的基本块，直接跳过。</p><p>（2）若为只有一个后继的基本块，首先删除跳转指令，并且通过后继基本块来搜索对应的switch case，根据case创建一条存储指令，达到跳转的目的。</p><p>（3）两个后继的情况跟一个后继的处理方法相似，不同的是，创建一条select指令，根据条件的结果来选择分支。</p><p>为了测试控制流平坦化混淆的效果，我们编写了如下代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (n&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i%<span class="number">16</span>]&gt;<span class="number">0x60</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ........................</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ........................</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a[i%<span class="number">16</span>]&gt;<span class="number">0x70</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ........................</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ........................</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">if</span>(a[i%<span class="number">16</span>]&gt;<span class="number">0x80</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ........................</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ........................</span><br><span class="line">        &#125;</span><br><span class="line">    ........................</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将该代码编译成exe文件，逆向后主函数的控制流程图如图1：</p><p><img src="/2020/02/24/OLLVM%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/clip_image002.gif" alt="1573125852244"></p><p>​                                    <center> 图1 源程序逆向后主函数的控制流程图</center></p><p>可以看出，除了内嵌的几个选择结构以外，总体来说，程序的结构都是顺序结构，这样代码分析就十分容易，例如从while循环代码逆向后，我们仍然可以清晰的看到代码的执行原理，如图2所示：</p><p><img src="/2020/02/24/OLLVM%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/clip_image004.gif" alt="1573126048613"></p><p>​                                  <center> 图2 源程序逆向所得C代码</center></p><p>除了变量名有所不同以外，我们能轻易的看到各个条件分支的选择条件，以及各条异或操作代码的先后顺序。</p><p>而被混淆后，代码的执行流程就完全不同了，所有代码块的先后顺序都被打乱，代之以各种分发器决定代码执行的先后顺序，如图3所示：</p><p><img src="/2020/02/24/OLLVM%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/clip_image006.gif" alt="1573126374237"></p><p>​                                   <center>图3 控制流平坦化混淆后的控制流程图</center></p><p>具体到代码上，可以看到很多的while循环。而一个while循环内，各基本块之间也变成了平行关系，并通过一个分发器进行分发，如图4：</p><p><img src="/2020/02/24/OLLVM%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/clip_image008.gif" alt="1573126820484"></p><p>​                                            <center> 图4 混淆后逆向所得C代码</center></p><p>从图中看出，变量v17控制整个执行流程，执行完一个基本块后通过改变v17的值跳到下一个基本块，例如图中标黄的v17==-1882529108，那么下一个块就是最上面的++v20,–v21。所以控制流平坦化主要是打乱代码块的先后顺序，让代码的执行流程没有这么明显、直接。</p><h3><span id="2指令替代">2．指令替代</span></h3><p>通过把简单的指令变为更加复杂的指令，我们可以把汇编代码换为许多相似的指令，我们写了另一个类似的程序，并对其用指令替代进行混淆。这次，我们把重点放在以下几条C代码上：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">........................</span><br><span class="line">a[(i+<span class="number">1</span>)%<span class="number">16</span>]^=<span class="keyword">char</span>(<span class="number">0x52</span>);</span><br><span class="line">........................</span><br></pre></td></tr></table></figure><p>对于异或语句，逆向后的汇编代码如图5：</p><p><img src="/2020/02/24/OLLVM%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/clip_image010.gif" alt="1573130730912"></p><p>​                                     <center>图5 指令替代之前异或语句汇编代码</center></p><p>F5为C代码，如图6：</p><p><img src="/2020/02/24/OLLVM%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/clip_image012.gif" alt="1573130812706"></p><p>​                                     <center>图6 指令替代之前异或语句反汇编代码</center></p><p>进行指令替代后语句汇编代码如图7：</p><p><img src="/2020/02/24/OLLVM%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/clip_image014.gif" alt="1573130921334"></p><p>​                                       <center>图7 指令替代之后异或语句汇编代码</center></p><p>F5为C代码，如图8：</p><p><img src="/2020/02/24/OLLVM%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/clip_image016.gif" alt="1573130948253"></p><p>​                                    <center>图8 指令替代之后异或语句反汇编代码</center></p><p>可以看到，整个代码的逻辑变得比较复杂，并不能看出来是异或0x52，给整个逆向分析带来了很大困难。</p><h3><span id="3虚假控制流">3．虚假控制流</span></h3><p>和控制流平坦化类似，混淆控制流也是通过混淆控制流程以达到干扰程序分析的目的。但和控制流平坦化不一样，虚假控制流其实是通过增加一些完全无用的分支跳转以达到混淆控制流程的目的，在对上述程序进行修改后，我们首先在不加混淆的情况下进行逆向，得到的控制流图如图9：</p><p><img src="/2020/02/24/OLLVM%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/clip_image018.gif" alt="1573216331690"></p><p>​                                          <center>图9 虚假控制流操作前的控制流程图</center></p><p>可以看到，整个程序的结构十分清晰，这样逆向分析起来也是十分容易的。</p><p>现在我们对其进行虚假控制流混淆，混淆后的程序流程图如图10：</p><p><img src="/2020/02/24/OLLVM%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/clip_image020.gif" alt="1573216442789"></p><p>​                                       <center>图10 虚假控制流操作后的控制流程图</center></p><p>可以看出，混淆后的程序不仅有了更多更复杂的分支，代码块也更加碎片化。图11中是反汇编为C语言后的代码：</p><p><img src="/2020/02/24/OLLVM%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%9B%BA%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/clip_image022.gif" alt="1573216604570"></p><p>​                     <center>图11虚假控制流操作后的反汇编代码</center></p><p> 看到具体代码，我们可以发现这里面加了很多的标签（LABEL），还有不少的goto语句，正是这些跳转，使得程序流程更加复杂。而整个while循环和if语句的执行条件，更是加大了逆向分析的难度。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们通过自己编写测试代码，再用OLLVM的不同指令进行加固，并逆向查看加固效果，加深对代码加固机理的了解。OLLVM目前提供的功能包括控制流平坦化（fla指令），指令替代（sub指令），代码虚拟化（bcf指令）以及虚假控制流（obf指令），接下来,我们团队对各个指令的机理进
      
    
    </summary>
    
    
      <category term="project" scheme="https://life-extension.github.io/categories/project/"/>
    
    
      <category term="project" scheme="https://life-extension.github.io/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>对音频缓存加密的探讨</title>
    <link href="https://life-extension.github.io/2020/02/17/%E5%AF%B9%E9%9F%B3%E9%A2%91%E7%BC%93%E5%AD%98%E5%8A%A0%E5%AF%86%E7%9A%84%E6%8E%A2%E8%AE%A8/"/>
    <id>https://life-extension.github.io/2020/02/17/%E5%AF%B9%E9%9F%B3%E9%A2%91%E7%BC%93%E5%AD%98%E5%8A%A0%E5%AF%86%E7%9A%84%E6%8E%A2%E8%AE%A8/</id>
    <published>2020-02-17T10:41:30.000Z</published>
    <updated>2020-05-06T10:06:13.808Z</updated>
    
    <content type="html"><![CDATA[<p>关键词：缓存解密，批量自动执行脚本，版权保护相关建议。</p><p><img src="/2020/02/17/%E5%AF%B9%E9%9F%B3%E9%A2%91%E7%BC%93%E5%AD%98%E5%8A%A0%E5%AF%86%E7%9A%84%E6%8E%A2%E8%AE%A8/1.png" alt="img"></p><p>前段时间，某音乐被爆其缓存文件只使用了简单的异或加密，且容易得到加密密钥为0xa3。<a href="https://forum.90sec.com/t/topic/38/9" target="_blank" rel="noopener">原文链接点击这里</a>。以下是我的延伸探讨。</p><h2><span id="1对音频缓存的批量解密攻击">1.对音频缓存的批量解密攻击</span></h2><p>抱着好奇的心理，我把手机里面该音乐的缓存转到了电脑上面，如图：</p><p><img src="/2020/02/17/%E5%AF%B9%E9%9F%B3%E9%A2%91%E7%BC%93%E5%AD%98%E5%8A%A0%E5%AF%86%E7%9A%84%E6%8E%A2%E8%AE%A8/2.jpg" alt="img"></p><p>据分析这些UC！文件就是加密后的MP3文件。</p><p>用010editor打开其中一个文件，发现存在很多0xa3的字符，如果我们断定网易云用的是异或加密，那么极有可能原文就是0x00，那么异或的密钥就是0xa3。还原得到可以被qq音乐播放的mp3文件：</p><p><img src="/2020/02/17/%E5%AF%B9%E9%9F%B3%E9%A2%91%E7%BC%93%E5%AD%98%E5%8A%A0%E5%AF%86%E7%9A%84%E6%8E%A2%E8%AE%A8/3.jpg" alt="img"></p><p>通过010editor逐一分析，发现加密密钥的确都是0xa3。既然加密密钥都是同一个，那么用010editor手改上百个文件就太难受了，能否写一个脚本或者程序来跑一下呢？</p><p>由于我刚学了java，觉得java文件流很不错，于是我就用java编写以下脚本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> FileInputStream fis;</span><br><span class="line">    <span class="keyword">static</span>  FileOutputStream fos;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   <span class="comment">// write your code here</span></span><br><span class="line">        String path = <span class="string">"*********"</span>;</span><br><span class="line">        travelfolder(path);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">travelfolder</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            File[] files = file.listFiles();</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != files) &#123;</span><br><span class="line">                <span class="keyword">for</span> (File file2 : files) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (file2.isDirectory()) &#123;<span class="comment">//文件夹</span></span><br><span class="line">                        System.out.println(<span class="string">"进入文件夹:"</span> + file2.getAbsolutePath());</span><br><span class="line">                        travelfolder(file2.getAbsolutePath());<span class="comment">//深度优先遍历算法</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//普通文件</span></span><br><span class="line">                        <span class="keyword">if</span>(file2.getName().substring(file2.getName().length()-<span class="number">3</span>).equals(<span class="string">"mp3"</span>))</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">//这些是已经改好的文件，不必修改</span></span><br><span class="line">                            System.out.println(<span class="string">"MP3文件:"</span> + file2.getAbsolutePath());</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(file2.getName().substring(file2.getName().length()-<span class="number">3</span>).equals(<span class="string">"uc!"</span>))</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">//这些文件还没修改</span></span><br><span class="line">                            System.out.println(<span class="string">"UC!文件:"</span> + file2.getAbsolutePath());</span><br><span class="line">                            fis = <span class="keyword">new</span> FileInputStream(file2);</span><br><span class="line">                            File newfile = <span class="keyword">new</span> File(file2.getName().substring(<span class="number">0</span>,file2.getName().length()-<span class="number">4</span>));<span class="comment">//把uc!文件变为mp3文件</span></span><br><span class="line">                            fos = <span class="keyword">new</span> FileOutputStream(path+<span class="string">"\\"</span>+newfile);</span><br><span class="line">                            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];<span class="comment">//缓冲区</span></span><br><span class="line">                            <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">                            <span class="keyword">while</span>((length = fis.read(buf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)</span><br><span class="line">                                &#123;</span><br><span class="line">                                    buf[i]^=<span class="number">0xa3</span>;<span class="comment">//还原</span></span><br><span class="line">                                &#125;</span><br><span class="line">                                fos.write(buf);</span><br><span class="line">                            &#125;</span><br><span class="line">                            fis.close();</span><br><span class="line">                            fos.close();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"文件不存在!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是开始运行这段代码：</p><p><img src="/2020/02/17/%E5%AF%B9%E9%9F%B3%E9%A2%91%E7%BC%93%E5%AD%98%E5%8A%A0%E5%AF%86%E7%9A%84%E6%8E%A2%E8%AE%A8/4.jpg" alt="img"></p><p>运行后就得到了我们想要的mp3文件啦！</p><p><img src="/2020/02/17/%E5%AF%B9%E9%9F%B3%E9%A2%91%E7%BC%93%E5%AD%98%E5%8A%A0%E5%AF%86%E7%9A%84%E6%8E%A2%E8%AE%A8/5.jpg" alt="img"></p><h2><span id="2音频缓存加密过于简单的原因">2.音频缓存加密过于简单的原因</span></h2><p>当然，音频的缓存文件是不可能太过于复杂的，我们听音频的时候，是很讲求时效性的，如果使用太复杂的加密方式，那么可能会导致播放器卡顿。使用异或的加密方式，虽然不太安全，但是还原起来还是很容易的。有时候，安全和性能往往会相互牵制，因此对产品开发者来说，需要把握好安全和性能间的平衡。当然，该音乐应用对安全的把握其实是不太好的，因为解密一首音乐，甚至可以不用写脚本。</p><h2><span id="3对音频缓存加密方式的建议">3.对音频缓存加密方式的建议</span></h2><p>其实该音乐应用可以改进加密算法，提高密钥空间的分析。</p><p>市面上目前也有很多音乐应用，使用了比较好的加密算法。</p><p>例如qq音乐采用了tea加密。如果tea加密比较复杂的话，我认为用维吉尼亚加密也可以，但是注意密钥要稍微长一些，不然通过对文件头的分析是可以把密钥给重新还原的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关键词：缓存解密，批量自动执行脚本，版权保护相关建议。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/02/17/%E5%AF%B9%E9%9F%B3%E9%A2%91%E7%BC%93%E5%AD%98%E5%8A%A0%E5%AF%86%E7%9A%84%E6%8E%A
      
    
    </summary>
    
    
      <category term="project" scheme="https://life-extension.github.io/categories/project/"/>
    
    
      <category term="project" scheme="https://life-extension.github.io/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>ACTF新人赛密码学部分考察点与题解</title>
    <link href="https://life-extension.github.io/2020/02/16/ACTF%E6%96%B0%E4%BA%BA%E8%B5%9B%E5%AF%86%E7%A0%81%E5%AD%A6%E9%83%A8%E5%88%86wp/"/>
    <id>https://life-extension.github.io/2020/02/16/ACTF%E6%96%B0%E4%BA%BA%E8%B5%9B%E5%AF%86%E7%A0%81%E5%AD%A6%E9%83%A8%E5%88%86wp/</id>
    <published>2020-02-16T10:56:33.000Z</published>
    <updated>2020-06-05T11:58:36.929Z</updated>
    
    <content type="html"><![CDATA[<p>关键词：密码学，CTF出题，题解。</p><p>具体的题目，考点，题解请见<a href="https://github.com/CSUAuroraLab/ACTF_Junior_2020" target="_blank" rel="noopener">项目链接</a>。</p><p>新生赛是我进入实验室以来参与出题的第一场比赛。为了这个比赛，我在平时还是做了一些积累，只有有灵感，我就着手开始写出题脚本和解题脚本，然后有一道自己完成不了的题目就麻烦DJ学长帮我写了一下，在这里感谢DJ学长啦！第二次在gitea上协作完成项目，无论是实验室的同学，学长，学弟还是河北师范的同学都给予了我很大的帮助。这次我吸取了之前密码学实验项目的教训，对于分支，调试，校对，发布的流程有了更多的了解。另外这次出题，在苏洋同学的帮助下我终于开始用git bash了，这也为我后面自学开博客打下了基础。最后，这次我也格外注重了文档的规范性，每一道题目都提前按格式把出题方向，题解，源代码，发布的题目，提示，题干，hint给写好了。<img src="/2020/02/16/ACTF%E6%96%B0%E4%BA%BA%E8%B5%9B%E5%AF%86%E7%A0%81%E5%AD%A6%E9%83%A8%E5%88%86wp/1.png" alt="出题文件层次分明"><br>说起这次题目的遗憾，就是有两道稍微有难度而又很有意思的题目没有放上来。看了大家的做题情况，密码学的题目基本上都还是几位同学在做。所以对于更加复杂的两道题目，我认为没有必要这么早放上来了，等到校赛吧，等着你们成长。我看到同学们也努力了，比如某位同学，辛辛苦苦终于解出了一道维吉尼亚，当然他一开始对维吉尼亚有些误解，也问了我，最后独立的把题目解了出来。我觉得不管能不能解出题目，只要题目足够有意思，大家足够享受这个过程，就够了。还有一个比较悲剧的，就是没想到杂项出题的学长会和我出了同一个考点，面对着90%以上的题目相似度，我觉得学长题目内容的确更简洁一些，而我的题干更好一些，于是我就放弃了我的那道题目，把自己的题干放到了杂项的那道题目那里。杂项密码学也有千丝万缕的联系呢，少一道也不亏。以下是同学们的完成状况：<br><img src="/2020/02/16/ACTF%E6%96%B0%E4%BA%BA%E8%B5%9B%E5%AF%86%E7%A0%81%E5%AD%A6%E9%83%A8%E5%88%86wp/2.png" alt="2"> <img src="/2020/02/16/ACTF%E6%96%B0%E4%BA%BA%E8%B5%9B%E5%AF%86%E7%A0%81%E5%AD%A6%E9%83%A8%E5%88%86wp/3.png" alt="3"> <img src="/2020/02/16/ACTF%E6%96%B0%E4%BA%BA%E8%B5%9B%E5%AF%86%E7%A0%81%E5%AD%A6%E9%83%A8%E5%88%86wp/4.png" alt="4"> <img src="/2020/02/16/ACTF%E6%96%B0%E4%BA%BA%E8%B5%9B%E5%AF%86%E7%A0%81%E5%AD%A6%E9%83%A8%E5%88%86wp/5.png" alt="5"> <img src="/2020/02/16/ACTF%E6%96%B0%E4%BA%BA%E8%B5%9B%E5%AF%86%E7%A0%81%E5%AD%A6%E9%83%A8%E5%88%86wp/6.png" alt="密码学题目完成情况"> <img src="/2020/02/16/ACTF%E6%96%B0%E4%BA%BA%E8%B5%9B%E5%AF%86%E7%A0%81%E5%AD%A6%E9%83%A8%E5%88%86wp/7.png" alt="杂项题目完成情况"><br>从同学们的完成状况来看，密码学的确没有杂项，逆向和web那么受欢迎，究其原因，应该是密码学的就业面没这么大，而且理论相对深奥，难度较大。但是我认为密码学一直都是挺有意思的存在，多了解一些密码学的知识点总是好的，如果的确有能力，可以做做密码学的研究；觉得自己能力不够的话，退而研究算法，或者在信息安全的其他方面引入密码学的知识，活学活用也很不错。好了，接下来就是这次的wp，我觉得自己这次的题目还是偏简单了一些，和CTF有比较大的差别，另外为了使一道题目有更多的考点，也更加有趣，我的确准备了很多的压缩包密码，所以遭到了一些吐槽。不过也没关系啦，继续完善一下自己，争取校赛能提供更好的题目！</p><h2><span id="classic0">classic0</span></h2><h4><span id="题干">题干</span></h4><p>小Z用C语言编写了一个最简单的密码系统，里面都采用的是最简单的古典加密。但是他的源程序不幸泄露，聪明的你能否解读他采用的算法并进行解密？flag格式为actf{***}</p><h4><span id="考察点">考察点</span></h4><p>凯撒，异或，编程能力，生日字典</p><h4><span id="hint">hint</span></h4><p>字典</p><h4><span id="writeup">writeup</span></h4><p>题目给出了密文还有一个生日字典加密后的加密脚本压缩包。如果你够厉害，当然你可以直接根据密文来解啦，不过就是两种加密合在一起，不是简单凯撒，所以有一定难度。</p><p>不过如果你知道生日字典攻击的话，不妨拿个工具跑一下，那么很快就可以得到结果了，最后写出解题代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">25</span>] = &#123;<span class="string">"Ygvdmq[lYate[elghqvakl&#125;"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">25</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">flag[i] ^= <span class="number">0x7</span>;</span><br><span class="line">        flag[i] += <span class="number">3</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,flag[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，有个地方的字符不是空格也不是’.’！不过你是可以用winhex或者010editor看到它具体的值的，这个值是7f。</p><h4><span id="附加密源代码">附：加密源代码</span></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">25</span>] = &#123;<span class="string">"actf&#123;my_naive_encrytion&#125;"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">25</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">flag[i] -= <span class="number">3</span>;</span><br><span class="line">flag[i] ^= <span class="number">0x7</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,flag[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="classic1">classic1</span></h2><h4><span id="题干">题干</span></h4><p>维吉尼亚加密是极其经典的古典密码，flag格式为actf{}，明文中的字母均为小写</p><h4><span id="考察点">考察点</span></h4><p>键盘密码，维吉尼亚密码</p><h4><span id="hint">hint</span></h4><p>1.谜底就在谜面上</p><h4><span id="writeup">writeup</span></h4><p>压缩包密码是一个键盘密码，稍微熟悉键盘的同学低下头看看，然后再看到密文里面“,.;”这一连串字符，应该会有些感觉。这些密文里面都是一个圈这样围在一起的，里面那个就是明文。key为circle。</p><p>这里的维吉尼亚密码，由于密文比较短，频率分析不管用，看一下题干，flag的格式已经给出，稍微尝试一下，得到加密密钥的值为sp，然后即可解决。</p><h4><span id="附加密源代码">附：加密源代码</span></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CYPHERLEN 31 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEYLEN 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[CYPHERLEN]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> key[<span class="number">3</span>]=<span class="string">"sp"</span>; </span><br><span class="line"><span class="keyword">int</span> i; </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;CYPHERLEN;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;str[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;CYPHERLEN;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">isupper</span>(str[i])||<span class="built_in">islower</span>(str[i]))</span><br><span class="line">&#123;</span><br><span class="line">str[i]=<span class="built_in">toupper</span>(str[i]);</span><br><span class="line">str[i]-=<span class="string">'A'</span>;</span><br><span class="line">str[i]+=(key[i%KEYLEN]-<span class="string">'a'</span>);</span><br><span class="line">str[i]%=<span class="number">26</span>;</span><br><span class="line">str[i]+=<span class="string">'A'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;CYPHERLEN;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,str[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2><span id="des-mailbox">des-mailbox</span></h2><h4><span id="题干">题干</span></h4><p>小Z自创了一套DES加密方法。他悄悄告诉你，这是你们传递秘密的信箱，所以想要获得他的秘密很简单，动动小脑袋瓜和小手指头就可以啦！flag格式为actf{***}</p><h4><span id="考察点">考察点</span></h4><p>C语言强制转换，DES相关编程</p><h4><span id="hints">hints</span></h4><p>1.type casting<br>2.In fact, that is not completely how DES work. We divided the process into several steps.<br>3.the keys are just overthere.</p><h4><span id="writeup">writeup</span></h4><p>首先要知道这个是一个强制转换，把字符转为浮点数，我们用puts即可把浮点数转换为字符，解出key。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">float</span> f[]=&#123;</span><br><span class="line"><span class="number">72143238992041641000000.000000</span>,</span><br><span class="line">    <span class="number">77135357178006504000000000000000.000000</span>,</span><br><span class="line">    <span class="number">1125868345616435400000000.000000</span>,</span><br><span class="line">    <span class="number">67378029765916820000000.000000</span>,</span><br><span class="line">    <span class="number">75553486092184703000000000000.000000</span>,</span><br><span class="line">    <span class="number">4397611913739958700000.000000</span>,</span><br><span class="line">    <span class="number">76209378028621039000000000000000.000000</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="built_in">puts</span>((<span class="keyword">char</span>*)f);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>然后就可以看到des.py，里面子密钥都给出了，解密不就只是安装一个密码学包然后再用回密钥解密就行了嘛。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyDes</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> FLAG <span class="keyword">import</span> flag</span><br><span class="line">deskey = <span class="string">"********"</span></span><br><span class="line">DES = pyDes.des(deskey)</span><br><span class="line">DES.setMode(<span class="string">'ECB'</span>)</span><br><span class="line">DES.Kn = [</span><br><span class="line">[<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>], </span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>], </span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">]</span><br><span class="line">cipher_list = <span class="string">b'vrkgBqeK7+h7mPyWujP8r5FqH5yyVlqv0CXudqoNHVAVdNO8ML4lM4zgez7weQXo'</span></span><br><span class="line">print(DES.decrypt(base64.b64decode(cipher_list)))</span><br></pre></td></tr></table></figure><h4><span id="出题源代码">出题源代码</span></h4><p><strong>强制类型转换</strong>（这个思路要感谢DJ学长，最初的出处请见afctf第一届初赛，我在此基础上对代码做了一些调整）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">32</span>]=<span class="string">"Interestring Idea to encrypt"</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">7</span>;++i)</span><br><span class="line">&#123;        </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%20f\n"</span>,*(<span class="keyword">float</span>*)(flag+i*<span class="number">4</span>));    </span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%20f\n"</span>,*(<span class="keyword">float</span>*)(<span class="string">""</span>))  ; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>des加密代码</strong>（这个思路主要来自于湖湘杯2019）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyDes</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> FLAG <span class="keyword">import</span> flag</span><br><span class="line">deskey = <span class="string">"********"</span></span><br><span class="line">DES = pyDes.des(deskey)</span><br><span class="line">DES.setMode(<span class="string">'ECB'</span>)</span><br><span class="line">DES.Kn = [</span><br><span class="line">[<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>], </span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>], </span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">]</span><br><span class="line">cipher_list = base64.b64encode(DES.encrypt(flag))</span><br><span class="line"><span class="comment">#b'vrkgBqeK7+h7mPyWujP8r5FqH5yyVlqv0CXudqoNHVAVdNO8ML4lM4zgez7weQXo'</span></span><br></pre></td></tr></table></figure><h2><span id="music">music</span></h2><p>注：由于考察点重复，最后关头我把题目去掉了</p><h4><span id="题干">题干</span></h4><p>小Z喜欢听音乐，可是他不是VIP，也不想花钱下载音乐，可是你却在无意中发现了他拥有大量的音乐资源。试问，他是怎么做到的？flag格式为actf{***}</p><h4><span id="考察点">考察点</span></h4><p>音频解密（接近于杂项）</p><p>灵感来源于学长分享的一片文章，我还对这篇文章提出了一些改进（即批量音频解密），然后把原文和改进后的文章一起发到了公众号“中南极光网安实验室”上。</p><h4><span id="hint">hint</span></h4><p>1.当你欣赏音乐的时候，记得打开文件看看哦</p><h4><span id="writeup">writeup</span></h4><p>这道题其实是出自我的那篇推送文章的。自从XX音乐被爆只采用简单的异或加密以后，我就获得和很多首好听的歌曲。当然，这次的密钥不是0xa3，但分析方法一样。用010editor等十六进制编辑工具打开文件，看到文件里面大部分值为0x36，所以考虑到密钥的值为0x36，所以异或一下。</p><p>flag不在音频里面，为了表彰一下大家，只需要去文件里面搜一下字符串即可。然后在文章结尾找到的是一串base64，解密一下即可。</p><h4><span id="题目源代码">题目源代码</span></h4><p>本次题目的编写没有用脚本，用的是010editor自带的异或功能。不过想要看批量解密的话，可以去公众号看，博客已经在路上了。</p><h2><span id="rsa0">rsa0</span></h2><h4><span id="题干">题干</span></h4><p>看看rsa的资料，学学python吧，这种简单题绝对不卡你！flag格式为actf{***}</p><h4><span id="考察点">考察点</span></h4><p>压缩包伪加密，RSA基础知识与参数</p><h4><span id="hint">hint</span></h4><p>1.搞清楚各个参数的意义</p><h4><span id="writeup">writeup</span></h4><p>都说了是压缩包伪加密，解决一下应该不难。</p><p>然后里面是最简单的rsa了，看一下资料应该能解决。</p><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> *</span><br><span class="line">p = <span class="number">9018588066434206377240277162476739271386240173088676526295315163990968347022922841299128274551482926490908399237153883494964743436193853978459947060210411</span></span><br><span class="line">q = <span class="number">7547005673877738257835729760037765213340036696350766324229143613179932145122130685778504062410137043635958208805698698169847293520149572605026492751740223</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">50996206925961019415256003394743594106061473865032792073035954925875056079762626648452348856255575840166640519334862690063949316515750256545937498213476286637455803452890781264446030732369871044870359838568618176586206041055000297981733272816089806014400846392307742065559331874972274844992047849472203390350</span></span><br><span class="line">phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">n = p*q</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = pow(c,d,n)</span><br><span class="line"><span class="keyword">print</span> (long_to_bytes(m))</span><br></pre></td></tr></table></figure><h4><span id="出题源代码">出题源代码</span></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">FLAG=<span class="comment">#hidden, please solve it</span></span><br><span class="line">flag=int.from_bytes(FLAG,byteorder = <span class="string">'big'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p=getPrime(<span class="number">512</span>)</span><br><span class="line">q=getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">print(p)</span><br><span class="line">print(q)</span><br><span class="line">N=p*q</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">enc = pow(flag,e,N)</span><br><span class="line"><span class="keyword">print</span> (enc)</span><br></pre></td></tr></table></figure><h2><span id="baby-aes">baby-aes</span></h2><h4><span id="题干">题干</span></h4><p>AES是一种十分高效安全的对称加密方式，在现代密码学中有着举足轻重的地位。小Z对此很放心，于是就写了一个脚本用AES加密，你能获得他的明文嘛？flag格式为actf{***}</p><h4><span id="考察点">考察点</span></h4><p>aes中的弱点（密钥），密钥、iv的作用，爆破</p><h4><span id="hint">hint</span></h4><p>1.现代密码的薄弱点在哪里</p><h4><span id="writeup">writeup</span></h4><p>注意一下，这里的key和iv，虽说key是32字节，但是存在很多重复的现象。而且为了降低运算复杂度，我把key和iv的异或值给了处理。所以，我们只需要爆破即可，时间复杂度为256的二次方=65526次</p><p>脚本如下（时间不长，就懒得写break了）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    enc_flag=<span class="string">b'\x8c-\xcd\xde\xa7\xe9\x7f.b\x8aKs\xf1\xba\xc75\xc4d\x13\x07\xac\xa4&amp;\xd6\x91\xfe\xf3\x14\x10|\xf8p'</span></span><br><span class="line">    xornum=<span class="number">91144196586662942563895769614300232343026691029427747065707381728622849079757</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">256</span>):      </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">256</span>):</span><br><span class="line">             num=i*<span class="number">256</span>+j</span><br><span class="line">             subkey=long_to_bytes(num).ljust(<span class="number">2</span>,<span class="string">b'\x00'</span>)</span><br><span class="line">             key=subkey*<span class="number">16</span></span><br><span class="line">             iv=long_to_bytes(bytes_to_long(key)^xornum)[<span class="number">-16</span>:].ljust(<span class="number">16</span>,<span class="string">b'\x00'</span>)</span><br><span class="line">             aes=AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">             flag = aes.decrypt(enc_flag)</span><br><span class="line">             <span class="keyword">if</span>(flag[:<span class="number">4</span>]==<span class="string">b'actf'</span>):</span><br><span class="line">                 print(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4><span id="出题源代码">出题源代码</span></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> FLAG</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    key=os.urandom(<span class="number">2</span>)*<span class="number">16</span></span><br><span class="line">    iv=os.urandom(<span class="number">16</span>)</span><br><span class="line">    print(bytes_to_long(key)^bytes_to_long(iv))</span><br><span class="line">    aes=AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">    enc_flag = aes.encrypt(FLAG)</span><br><span class="line">    print(key)</span><br><span class="line">    print(iv)</span><br><span class="line">    print(enc_flag)</span><br><span class="line"><span class="comment">#91144196586662942563895769614300232343026691029427747065707381728622849079757</span></span><br><span class="line"><span class="comment">#b'\xc9\x81\xc9\x81\xc9\x81\xc9\x81\xc9\x81\xc9\x81\xc9\x81\xc9\x81\xc9\x81\xc9\x81\xc9\x81\xc9\x81\xc9\x81\xc9\x81\xc9\x81\xc9\x81'</span></span><br><span class="line"><span class="comment">#b'\x87lQbI0\xfc\xe6\xaa\x05P\xb1\x01\xd1pL'</span></span><br><span class="line"><span class="comment">#b'\x8c-\xcd\xde\xa7\xe9\x7f.b\x8aKs\xf1\xba\xc75\xc4d\x13\x07\xac\xa4&amp;\xd6\x91\xfe\xf3\x14\x10|\xf8p'</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2><span id="rsa3">rsa3</span></h2><h4><span id="题干">题干</span></h4><p>安全的密码算法，往往找不到任何的规律和联系。小Z由于学艺不精，无意中设计了一套极其危险的密码算法，你能帮忙破解一下这个密码算法中的秘密嘛？flag格式为actf{***}</p><h4><span id="考察点">考察点</span></h4><p>经典费马分解</p><h4><span id="hint">hint</span></h4><p>1.RSA常见的攻击方式</p><h4><span id="writeup">writeup</span></h4><p>其实这道题和省赛拿到没做出来的题目考点是一样的，所以那次省赛我已经有脚本了，但是省赛题目不应该这么出，怎么到了最后变成了电脑性能的较量。。</p><p>我觉得要考费马分解应该这样出：大家可以看到，题目中的两个素数之间相隔很近，这就给费马分解提供了机会（虽然我不知道网上有没有像我一样用这个next_prime这个函数的，但是意思应该也会相近），大家可以上网查查相关资料，省赛的时候一个学弟的脚本挺不错的，还多线程。但是我当时候的脚本和他写得不一样，当然也能解出来，不过哪时间复杂度可能稍慢一些，现在给出我的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> *</span><br><span class="line">n=<span class="number">177606504836499246970959030226871608885969321778211051080524634084516973331441644993898029573612290095853069264036530459253652875586267946877831055147546910227100566496658148381834683037366134553848011903251252726474047661274223137727688689535823533046778793131902143444408735610821167838717488859902242863683</span></span><br><span class="line">c=<span class="number">1457390378511382354771000540945361168984775052693073641682375071407490851289703070905749525830483035988737117653971428424612332020925926617395558868160380601912498299922825914229510166957910451841730028919883807634489834128830801407228447221775264711349928156290102782374379406719292116047581560530382210049</span></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">10000</span>):</span><br><span class="line">    a=gmpy2.iroot(n+b*b,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span>(a*a-b*b==n):</span><br><span class="line">        p=a+b</span><br><span class="line">        q=a-b</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">assert</span>(p*q==n)</span><br><span class="line">phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = pow(c,d,n)</span><br><span class="line"><span class="keyword">print</span> (long_to_bytes(m))</span><br></pre></td></tr></table></figure><p>我通过修改学弟的脚本也可以解决这道题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isqrt</span><span class="params">(n)</span>:</span></span><br><span class="line">    x = n</span><br><span class="line">    y = (x + n // x) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> y &lt; x:</span><br><span class="line">      x = y</span><br><span class="line">      y = (x + n // x) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Fermat</span><span class="params">(num, x)</span>:</span></span><br><span class="line">    y2 = x*x - num;</span><br><span class="line">    y = isqrt(y2);</span><br><span class="line">    <span class="keyword">if</span> y*y == y2:</span><br><span class="line">        print([x+y, x-y]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    num = int(input(<span class="string">'n='</span>))</span><br><span class="line">    x = isqrt(num)</span><br><span class="line">    <span class="keyword">if</span> x*x &lt; num:</span><br><span class="line">        x += <span class="number">1</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt; <span class="number">1e20</span>):</span><br><span class="line">        threads = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">40</span>):</span><br><span class="line">            t = threading.Thread(target = Fermat, args = (num, x))</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            x += <span class="number">1</span></span><br><span class="line">            threads.append(t)</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">            t.start()</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">            t.join()</span><br></pre></td></tr></table></figure><p>用这段代码可以在短时间内解出p,q。</p><h4><span id="出题源代码">出题源代码</span></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> FLAG</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = int(gmpy2.next_prime(p))</span><br><span class="line">n = p*q</span><br><span class="line">m = bytes_to_long(FLAG)</span><br><span class="line">c = pow(m,e,n)</span><br><span class="line">print(n)</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure><h2><span id="tinyspnby-dj学长">TinySPN(by )</span></h2><p>注：出题方向是我提出的，但是这里面的题干，源代码和解题脚本都是<a href="https://csuwangj.github.io/" target="_blank" rel="noopener">DJ学长</a> 写的，我只负责把它放到服务器上，并且写出交互代码。</p><h4><span id="题干">题干</span></h4><p>SPN is a classical design patter in cryptography.</p><p>nc 47.103.117.169 10003</p><p>flag格式为flag{***}</p><h4><span id="考察点">考察点</span></h4><p>线性/差分密码分析，交互</p><h4><span id="hint">hint</span></h4><ol><li>what is SBOX?</li><li>why can’t we replace SBOX in cipher?</li></ol><h4><span id="writeup">writeup</span></h4><h6><span id="tldr">TL;DR</span></h6><p>attack simple SPN by chosen-plaintext attack, use linear cryptanalysis or differential cryptanalysis will break it. <a href="exp.py">exp</a> use linear cryptanalysis.</p><h6><span id="detail">Detail</span></h6><p>because this SPN cipher is so simple, so we just need following steps.</p><ol><li>get LAT, like <a href="lat.py">example</a>(Linear Approximation Table).</li><li>find one path with high bias.</li><li>collecting enough plaintext-cipher pairs.</li><li>extracting key from pairs.(check exp for more details).(<a href="linear_cryptanalysis.py">linear_cryptanalysis.py</a> is a example of this step, but code is like a shit so you’d better forget it.)</li><li>decrypt flag.</li></ol><p><a href="test.py">test.py</a> is my test data, ignore it.</p><p>if SBOX is so good that can’t break it, record it and replay exp~</p><p><a href="mailto:CSUwangj@protonmail.com">send me</a> this SBOX so that I can post it~</p><h6><span id="exp">exp</span></h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List, Tuple</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="comment"># import test</span></span><br><span class="line"><span class="comment"># import pysnooper</span></span><br><span class="line"><span class="keyword">from</span> util <span class="keyword">import</span> doxor, doin, trans_inv, SZ</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> unhexlify</span><br><span class="line"><span class="keyword">from</span> codecs <span class="keyword">import</span> encode</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pwn</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maskeq</span><span class="params">(a: int, b: int)</span> -&gt; bool:</span></span><br><span class="line">    c: int = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> b &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> b&amp;<span class="number">1</span>:</span><br><span class="line">            c ^= (a&amp;<span class="number">1</span>)</span><br><span class="line">        b //= <span class="number">2</span></span><br><span class="line">        a //= <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> c==<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">LAT</span><span class="params">(sbox: List[int])</span> -&gt; List[List[int]]:</span></span><br><span class="line">    count = []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> tqdm(range(<span class="number">256</span>), desc=<span class="string">"compute LAT"</span>):</span><br><span class="line">        count.append([])</span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">            cnt = <span class="number">-128</span></span><br><span class="line">            bitmask = (row &lt;&lt; <span class="number">8</span>) | col</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">                <span class="keyword">if</span> maskeq((i &lt;&lt; <span class="number">8</span>) | sbox[i],  bitmask):</span><br><span class="line">                    cnt += <span class="number">1</span></span><br><span class="line">            count[row].append(abs(cnt))</span><br><span class="line">        count[row].append(row)</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(num: int, bitmask: int)</span> -&gt; bool:</span></span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> bitmask &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> bitmask &amp; <span class="number">1</span> == <span class="number">1</span>:</span><br><span class="line">            a ^= num &amp; <span class="number">1</span></span><br><span class="line">        bitmask //= <span class="number">2</span></span><br><span class="line">        num //= <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> a == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_key</span><span class="params">(text_pairs: List[Tuple[int, int]], sbox: List[int], key: int, mask: int)</span> -&gt; int:</span></span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> text_pair <span class="keyword">in</span> text_pairs:</span><br><span class="line">        (plain, cipher) = text_pair</span><br><span class="line">        mid = cipher ^ key</span><br><span class="line">        mid = sbox[mid] </span><br><span class="line">        <span class="keyword">if</span> check((plain &lt;&lt; <span class="number">8</span>) | mid, mask):</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> cnt</span><br><span class="line"></span><br><span class="line"><span class="comment"># @pysnooper.snoop()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(sbox, sboxi, ct, k)</span>:</span></span><br><span class="line">    pt = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(ct), SZ):</span><br><span class="line">        res = decrypt_block(sbox, sboxi, ct[i:i+SZ], k)</span><br><span class="line">        pt += <span class="string">''</span>.join(map(chr, res))</span><br><span class="line">    <span class="keyword">return</span> pt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt_block</span><span class="params">(sbox, sboxi, pt, ks)</span>:</span></span><br><span class="line">    cur = doxor(pt, ks[SZ:])</span><br><span class="line">    cur = list(map(<span class="keyword">lambda</span> x:sbox[x], cur))</span><br><span class="line">    cur = trans_inv(cur)</span><br><span class="line">    cur = list(map(<span class="keyword">lambda</span> x:sboxi[x], cur))</span><br><span class="line">    cur = doxor(cur, ks[:SZ])</span><br><span class="line">    <span class="keyword">return</span> cur</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_frontkey</span><span class="params">(sbox, sboxi, pt: List[int], ct: List[int], lastkey: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">    cur = doxor(ct, lastkey)</span><br><span class="line">    cur = list(map(<span class="keyword">lambda</span> x:sbox[x], cur))</span><br><span class="line">    cur = trans_inv(cur)</span><br><span class="line">    cur = list(map(<span class="keyword">lambda</span> x:sboxi[x], cur))</span><br><span class="line">    <span class="keyword">return</span> doxor(cur, pt)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doin</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(unhexlify(x))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doout</span><span class="params">(x)</span>:</span></span><br><span class="line">    tmp = <span class="string">''</span>.join(map(chr, x))</span><br><span class="line">    <span class="keyword">return</span> (encode(tmp.encode(), <span class="string">'hex'</span>)).decode()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># pwn.context.log_level = "DEBUG"</span></span><br><span class="line">    <span class="comment"># io = pwn.remote("192.168.16.128", 9999)</span></span><br><span class="line">    io = pwn.process(<span class="string">"../src/server.py"</span>)</span><br><span class="line">    sbox_str = io.readline()</span><br><span class="line">    sbox: List[int] = list(map(int, sbox_str[<span class="number">1</span>:<span class="number">-2</span>].split(<span class="string">b","</span>)))</span><br><span class="line">    sboxi: List[int] = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        sboxi.append(sbox.index(i))</span><br><span class="line">    <span class="comment"># print(sbox)</span></span><br><span class="line">    flag_ct = doin(io.readline().strip())</span><br><span class="line">    <span class="comment"># print(flag_ct)</span></span><br><span class="line">    pts: List[str] = []<span class="comment">#test.pt</span></span><br><span class="line">    cts: List[str] = []<span class="comment">#test.ct</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(range(<span class="number">2048</span>), desc=<span class="string">"collect plaintext-cipher paits"</span>):</span><br><span class="line">        pt = random.randint(<span class="number">0</span>, (<span class="number">1</span>&lt;&lt;<span class="number">64</span>)<span class="number">-1</span>)</span><br><span class="line">        pt = <span class="string">"&#123;:016x&#125;"</span>.format(pt)</span><br><span class="line">        io.sendline(pt)</span><br><span class="line">        ct = io.readline().strip()</span><br><span class="line">        pts.append(pt)</span><br><span class="line">        cts.append(ct)</span><br><span class="line">    <span class="comment"># print("pt0: &#123;&#125;".format(pts[0]))</span></span><br><span class="line">    <span class="comment"># print("ct0: &#123;&#125;".format(cts[0]))</span></span><br><span class="line">    lat = LAT(sbox)</span><br><span class="line">    ptx = list(map(<span class="keyword">lambda</span> x:(int(x[<span class="number">0</span>:<span class="number">2</span>], <span class="number">16</span>)), pts))</span><br><span class="line">    key = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        ctx = list(map(<span class="keyword">lambda</span> x:(int(x[i*<span class="number">2</span>:i*<span class="number">2</span>+<span class="number">2</span>], <span class="number">16</span>)), cts))</span><br><span class="line">        lat.sort(key=<span class="keyword">lambda</span> x:x[(<span class="number">1</span>&lt;&lt;(<span class="number">7</span>-i))], reverse=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># print("&#123;&#125;th byte is for LT&#123;&#125;".format(i, lat[0][256]))</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> tqdm(range(<span class="number">256</span>), desc=<span class="string">"compute &#123;&#125;th byte of key"</span>.format(i+<span class="number">9</span>)):</span><br><span class="line">            res.append((k, abs(check_key(zip(ptx, ctx), sbox, k, (lat[<span class="number">0</span>][<span class="number">256</span>]&lt;&lt;<span class="number">8</span>) |<span class="number">0b10000000</span>)-(len(pts)//<span class="number">2</span>))))</span><br><span class="line">        res.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">        key.append(res[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># print(res)</span></span><br><span class="line">        <span class="comment"># print("&#123;&#125;th key is &#123;:02x&#125;".format(i+9, res[0][0]))</span></span><br><span class="line">    pt1 = doin(pts[<span class="number">0</span>])</span><br><span class="line">    ct1 = doin(cts[<span class="number">0</span>])</span><br><span class="line">    key = compute_frontkey(sbox, sboxi, pt1, ct1, key) + key</span><br><span class="line">    print(<span class="string">"computed key: &#123;&#125;"</span>.format(doout(key)))</span><br><span class="line">    <span class="comment"># print(key)</span></span><br><span class="line">    ans = decrypt(sbox, sboxi, flag_ct, key)</span><br><span class="line">    <span class="keyword">if</span> ord(ans[<span class="number">-1</span>]) &lt; <span class="number">9</span>:</span><br><span class="line">        ans = ans[:-ord(ans[<span class="number">-1</span>])]</span><br><span class="line">    print(ans)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4><span id="题目源代码">题目源代码</span></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> hexlify, unhexlify</span><br><span class="line"><span class="keyword">import</span> Crypto.Random.random <span class="keyword">as</span> random</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">SZ = <span class="number">8</span></span><br><span class="line"></span><br><span class="line">sbox = list(range(<span class="number">256</span>))</span><br><span class="line">random.shuffle(sbox)</span><br><span class="line">sboxi = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">    sboxi.append(sbox.index(i))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doxor</span><span class="params">(l1,l2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [x[<span class="number">0</span>]^x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> zip(l1,l2)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trans</span><span class="params">(blk)</span>:</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">0</span>, SZ, <span class="number">8</span>):</span><br><span class="line">        bits = [bin(x)[<span class="number">2</span>:].rjust(<span class="number">8</span>,<span class="string">'0'</span>) <span class="keyword">for</span> x <span class="keyword">in</span> blk[k:k+<span class="number">8</span>]]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">            res.append(int(<span class="string">''</span>.join([x[i] <span class="keyword">for</span> x <span class="keyword">in</span> bits]),<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt_block</span><span class="params">(pt, ks)</span>:</span></span><br><span class="line">    cur = doxor(pt, ks[:SZ])</span><br><span class="line">    cur = [sbox[x] <span class="keyword">for</span> x <span class="keyword">in</span> cur]</span><br><span class="line">    cur = trans(cur)</span><br><span class="line">    cur = [sboxi[x] <span class="keyword">for</span> x <span class="keyword">in</span> cur]</span><br><span class="line">    cur = doxor(cur, ks[SZ:])</span><br><span class="line">    <span class="keyword">return</span> cur</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(pt, k)</span>:</span></span><br><span class="line">    x = <span class="number">0</span> <span class="keyword">if</span> len(pt)%SZ==<span class="number">0</span> <span class="keyword">else</span> (SZ-len(pt)%SZ)</span><br><span class="line">    pt += [x]*x</span><br><span class="line">    ct = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(pt), SZ):</span><br><span class="line">        res = encrypt_block([x <span class="keyword">for</span> x <span class="keyword">in</span> pt[i:i+SZ]], k)</span><br><span class="line">        ct += <span class="string">''</span>.join([<span class="string">"&#123;:02x&#125;"</span>.format(xx) <span class="keyword">for</span> xx <span class="keyword">in</span> res])</span><br><span class="line">    <span class="keyword">return</span> ct</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doout</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(x) % <span class="number">16</span>:</span><br><span class="line">        x = (<span class="number">16</span> - len(x) % <span class="number">16</span>) * <span class="string">"0"</span> + x</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doin</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(unhexlify(x))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">genkeys</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(os.urandom(<span class="number">2</span>*SZ))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(sbox)</span><br><span class="line">    key = genkeys()</span><br><span class="line">    ct = encrypt(flag, key)</span><br><span class="line">    print(ct)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        pt = doin(input())</span><br><span class="line">        print(doout(encrypt(pt, key)))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关键词：密码学，CTF出题，题解。&lt;/p&gt;
&lt;p&gt;具体的题目，考点，题解请见&lt;a href=&quot;https://github.com/CSUAuroraLab/ACTF_Junior_2020&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;项目链接&lt;/a&gt;。
      
    
    </summary>
    
    
      <category term="auroralab" scheme="https://life-extension.github.io/categories/auroralab/"/>
    
    
      <category term="project" scheme="https://life-extension.github.io/tags/project/"/>
    
      <category term="competition" scheme="https://life-extension.github.io/tags/competition/"/>
    
      <category term="auroralab" scheme="https://life-extension.github.io/tags/auroralab/"/>
    
  </entry>
  
  <entry>
    <title>about me</title>
    <link href="https://life-extension.github.io/2020/02/15/about-me/"/>
    <id>https://life-extension.github.io/2020/02/15/about-me/</id>
    <published>2020-02-15T14:02:36.000Z</published>
    <updated>2020-05-19T02:16:29.122Z</updated>
    
    <content type="html"><![CDATA[<p>关键词：个人自述，todolist。</p><p>说来惭愧，写了很多的日记，也写过几篇可以充当作业或者领稿费的小文章，也发了很多的说说和pyq，但是发博客确是第一次。在朋友们都已经创办了属于自己的公众号，博客或者专刊的时候，我却才在blog上发表我的第一篇文章。现在，我愿意把我自己的所思所感已经之前写过的一部分日记形成文字，以展现一个真实的自己。</p><p>为什么我忽然想到要写博客呢？</p><p>其实，我在github上也算是个新手，但陆陆续续的参与了一些项目，并且承办了这次新人赛上密码学大部分的出题工作以后，每次有人来问我的github网址邀请我的时候，我不禁感到不好意思。怎么能给别人一个空白的github网址呢，感觉自己就像圈外人一样，人家计算机爱好者都在这里讨论问题，合作完成项目，而我虽然有兴趣，但是行动上却没有跟上来。所以我觉得得抓紧完善打理一下自己的博客，“打扫干净房子再请客”，所以就连着一晚简简单单的弄了一个博客。</p><p>另外，我觉得我有必要做一个生产者，写点有意义的所思所感，也可以分享一些技术文章，来做出自己一份微薄的贡献。就像是当时触动我的那个人是这么说的，“ 许许多多的人曾用他们的光芒照亮了我，我也愿接下火炬继续燃烧。记录日常所思所感，是留给未来的诗歌与火光。 ”我觉得，需要把这些光芒传递下去，让火炬继续燃烧。</p><p>能把我和我们团队的一些日常经历和idea分享给大家，是一件幸事。祝大家2020年能身体健康，万事如意，学有所成！<img src="/2020/02/15/about-me/2020.jpg" alt="2020的祝福"></p><hr><p>4.30更新：</p><p>这个blog建立到现在，也更新了大约有15次了。其实实践无处不在，每天的作业和实验都是一个难得的动手机会。但是，做作业，多多少少包含着一些被动完成任务的心态。所以最近我把博客上的文章精挑细选了一遍，着重展现我充分调动自己的能动性来完成的课外项目和选做任务，我觉得只有这样，才能体现出更全面的自己。当然，有空的话，一些课内的内容我也会尽快补充。</p><p>TODO list：</p><p>（1）汇总自己的日常灵感。</p><p>（2）更新一些日常学习相关的博文，例如学习笔记，课程作业，实践作业及完成思路等。</p><p>（3）更新一些比赛和项目相关的博文，整理以往CTF比赛的wp，天梯赛在PAT平台的训练代码（L1和L2全部），信安作品赛的比赛心得等。</p><p>（4）以往的一些日记，包括人生道理的探讨，兴趣爱好及推荐等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关键词：个人自述，todolist。&lt;/p&gt;
&lt;p&gt;说来惭愧，写了很多的日记，也写过几篇可以充当作业或者领稿费的小文章，也发了很多的说说和pyq，但是发博客确是第一次。在朋友们都已经创办了属于自己的公众号，博客或者专刊的时候，我却才在blog上发表我的第一篇文章。现在，我愿
      
    
    </summary>
    
    
      <category term="article" scheme="https://life-extension.github.io/categories/article/"/>
    
    
      <category term="article" scheme="https://life-extension.github.io/tags/article/"/>
    
      <category term="introduction" scheme="https://life-extension.github.io/tags/introduction/"/>
    
  </entry>
  
</feed>
